//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Adas
//  @ File Name : CCameraTexture.cpp
//  @ Date : 2/16/2015
//  @ Author : 
//
//


#include "CCameraTexture.h"

PFNEGLCREATEIMAGEKHRPROC peglCreateImageKHR = NULL;
PFNEGLDESTROYIMAGEKHRPROC peglDestroyImageKHR = NULL;
PFNGLEGLIMAGETARGETTEXTURE2DOESPROC pFnEGLImageTargetTexture2DOES = NULL;

BOOLEAN CCameraTexture::setup(UInt32 uiW, UInt32 uiH, UInt32 uiFormat, UInt32 uiTexNum)
{
	m_uiTexNum = uiTexNum;
	m_aryImageKHR.resize(uiTexNum);
	m_aryTexId.resize(uiTexNum);
	m_aryPixmap.resize(uiTexNum);
	if( peglCreateImageKHR == NULL || peglDestroyImageKHR == NULL || pFnEGLImageTargetTexture2DOES == NULL )
	{
		peglCreateImageKHR = (PFNEGLCREATEIMAGEKHRPROC)eglGetProcAddress("eglCreateImageKHR");
		if (!peglCreateImageKHR)
			return FALSE;

		peglDestroyImageKHR = (PFNEGLDESTROYIMAGEKHRPROC)eglGetProcAddress("eglDestroyImageKHR");
		if(!peglDestroyImageKHR)
			return FALSE;

		pFnEGLImageTargetTexture2DOES =
					(PFNGLEGLIMAGETARGETTEXTURE2DOESPROC)eglGetProcAddress("glEGLImageTargetTexture2DOES");
		if (!pFnEGLImageTargetTexture2DOES)
			return FALSE;
	}

	for(UInt32 i = 0 ; i < m_uiTexNum; ++i )
	{
		Int32 rc = screen_create_pixmap(&m_aryPixmap[i], getScreenCtx());
		if (rc) {
			DEB_ERROR(("screen_create_pixmap failed\n"));
			return FALSE;
		}

		rc = screen_set_pixmap_property_iv(m_aryPixmap[i], SCREEN_PROPERTY_BUFFER_SIZE, pixBufSize);
		if (rc) {
			perror("screen_set_pixmap_property_iv(SCREEN_PROPERTY_BUFFER_SIZE)");
		}

		rc = screen_set_pixmap_property_iv(m_aryPixmap[i], SCREEN_PROPERTY_FORMAT, &inBufFormat);
		if (rc) {
			perror("screen_set_pixmap_property_iv(SCREEN_PROPERTY_FORMAT)");
		}

		rc = screen_set_pixmap_property_iv(m_aryPixmap[i], SCREEN_PROPERTY_USAGE, &inPixUsage);
		if (rc) {
			perror("screen_set_pixmap_property_iv(SCREEN_PROPERTY_USAGE)");
		}

		rc = screen_attach_pixmap_buffer(m_aryPixmap[i], m_bufs->getBuffer(i));
		if(rc){
			printf("screen_attach_pixmap_buffer[%d] failed!\n",index);
		}
	}

	glGenTextures(m_uiTexNum, &m_aryTexId[0]);

	for(UInt32 i = 0 ; i < m_uiTexNum; ++i )
	{
		m_aryImageKHR[i] = peglCreateImageKHR(getEGLDisplay(), EGL_NO_CONTEXT,
			EGL_NATIVE_PIXMAP_KHR, m_aryPixmap[i], NULL);

		glBindTexture(GL_TEXTURE_2D, m_aryTexId[i]);
		pFnEGLImageTargetTexture2DOES(GL_TEXTURE_2D, m_aryImageKHR[i]);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR );
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR );
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
	}

	return TRUE;
}

void CCameraTexture::flush()
{


}

void CCameraTexture::bind()
{
	flush();

	int bufIndex = BUFFER_INDEX_VALUE_INVALID;
	int interlaceField = INTERLACE_FIELD_VALUE_INVALID;

	m_pCapDriver->bCapUpdate(bufIndex,interlaceField);
	glActiveTexture(GL_TEXTURE0);
	glBindTexture(GL_TEXTURE_2D,m_aryTexId[bufIndex]);
}

void CCameraTexture::destroy()
{

}

void CCameraTexture::unbind()
{

}


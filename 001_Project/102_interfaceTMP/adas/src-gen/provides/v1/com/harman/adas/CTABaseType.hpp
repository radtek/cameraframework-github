/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.201702211714.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.3.0
* generated on: Tue Aug 01 13:37:50 CST 2017
*/
#ifndef V1_COM_HARMAN_ADAS_CTA_Base_Type_HPP_
#define V1_COM_HARMAN_ADAS_CTA_Base_Type_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace adas {

struct CTABaseType {
    
    struct enCTAStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_CTA_NOT_CONFIGURED = 0,
            e_CTA_ON = 1,
            e_CTA_OFF = 2,
            e_CTA_ERR = 3
        };
        
        enCTAStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_CTA_NOT_CONFIGURED)) {}
        enCTAStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_CTA_NOT_CONFIGURED):
                case static_cast<int32_t>(Literal::e_CTA_ON):
                case static_cast<int32_t>(Literal::e_CTA_OFF):
                case static_cast<int32_t>(Literal::e_CTA_ERR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enCTAStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enCTAStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enCTAStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enCTAStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enCTAStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enCTAStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enCTAWorkMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_CTA_FRONT_ON = 1,
            e_CTA_FRONT_OFF = 2,
            e_CTA_REAR_ON = 4,
            e_CTA_REAR_OFF = 8
        };
        
        enCTAWorkMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_CTA_FRONT_ON)) {}
        enCTAWorkMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_CTA_FRONT_ON):
                case static_cast<int32_t>(Literal::e_CTA_FRONT_OFF):
                case static_cast<int32_t>(Literal::e_CTA_REAR_ON):
                case static_cast<int32_t>(Literal::e_CTA_REAR_OFF):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enCTAWorkMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enCTAWorkMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enCTAWorkMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enCTAWorkMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enCTAWorkMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enCTAWorkMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct stCTAStatus : CommonAPI::Struct<enCTAStatus, enCTAStatus> {
    	
    	stCTAStatus() {
    	}
    	stCTAStatus(const enCTAStatus &_CTA_Front_Status, const enCTAStatus &_CTA_Rear_Status)
    	{
    		std::get<0>(values_) = _CTA_Front_Status;
    		std::get<1>(values_) = _CTA_Rear_Status;
    	}
    	inline const enCTAStatus &getCTA_Front_Status() const { return std::get<0>(values_); }
    	inline void setCTA_Front_Status(const enCTAStatus &_value) { std::get<0>(values_) = _value; }
    	inline const enCTAStatus &getCTA_Rear_Status() const { return std::get<1>(values_); }
    	inline void setCTA_Rear_Status(const enCTAStatus &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const stCTAStatus& _other) const {
                return (getCTA_Front_Status() == _other.getCTA_Front_Status() && getCTA_Rear_Status() == _other.getCTA_Rear_Status());
        }
    	inline bool operator!=(const stCTAStatus &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.adas.CTABaseType";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct CTABaseType

} // namespace adas
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for enCTAStatus
    template<>
    struct hash<::v1::com::harman::adas::CTABaseType::enCTAStatus> {
        inline size_t operator()(const ::v1::com::harman::adas::CTABaseType::enCTAStatus& enCTAStatus) const {
            return static_cast<int32_t>(enCTAStatus);
        }
    };
    //Hash for enCTAWorkMode
    template<>
    struct hash<::v1::com::harman::adas::CTABaseType::enCTAWorkMode> {
        inline size_t operator()(const ::v1::com::harman::adas::CTABaseType::enCTAWorkMode& enCTAWorkMode) const {
            return static_cast<int32_t>(enCTAWorkMode);
        }
    };
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_ADAS_CTA_Base_Type_HPP_

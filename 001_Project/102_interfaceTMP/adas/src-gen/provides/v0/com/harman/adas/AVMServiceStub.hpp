/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.201702211714.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.3.0
* generated on: Tue Aug 01 13:37:50 CST 2017
*/
#ifndef V0_COM_HARMAN_ADAS_AVM_Service_STUB_HPP_
#define V0_COM_HARMAN_ADAS_AVM_Service_STUB_HPP_

#include <functional>



#include <v1/com/harman/adas/AVMBaseType.hpp>
#include <v1/com/harman/adas/CTABaseType.hpp>

#include <v0/com/harman/adas/AVMService.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace adas {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service AVMService. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class AVMServiceStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual AVMService {
 public:
    ///Notifies all remote listeners about a change of value of the attribute AVMCamStatus.
    virtual void fireAVMCamStatusAttributeChanged(const ::v1::com::harman::adas::AVMBaseType::stAVMCamState& AVMCamStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute CTAStatus.
    virtual void fireCTAStatusAttributeChanged(const ::v1::com::harman::adas::CTABaseType::stCTAStatus& CTAStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute AutoStatus.
    virtual void fireAutoStatusAttributeChanged(const ::v1::com::harman::adas::AVMBaseType::enAutoCaliState& AutoStatus) = 0;

    /**
     * Sends a broadcast event for bcAVMViewStatus. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireBcAVMViewStatusEvent(const ::v1::com::harman::adas::AVMBaseType::enAVMStatus &_m_AVMStatus) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for AVMService.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class AVMServiceStubRemoteEvent
{
public:
    virtual ~AVMServiceStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service AVMService to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class AVMServiceStub
    : public virtual CommonAPI::Stub<AVMServiceStubAdapter, AVMServiceStubRemoteEvent>
{
public:
    typedef std::function<void ()>SwitchAVMViewReply_t;
    typedef std::function<void ()>SwitchGuidelineReply_t;
    typedef std::function<void (uint8_t _iErrCTA)>SwitchCTAReply_t;
    typedef std::function<void (uint8_t _iErrAutoCali)>SwitchAutoCalibrationAutoReply_t;
    typedef std::function<void (uint8_t _iErrAutoCali)>SwitchAutoCalibrationManuallyReply_t;

    virtual ~AVMServiceStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /// Provides getter access to the attribute AVMCamStatus
    virtual const ::v1::com::harman::adas::AVMBaseType::stAVMCamState &getAVMCamStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute CTAStatus
    virtual const ::v1::com::harman::adas::CTABaseType::stCTAStatus &getCTAStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute AutoStatus
    virtual const ::v1::com::harman::adas::AVMBaseType::enAutoCaliState &getAutoStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /// This is the method that will be called on remote calls on the method SwitchAVMView.
    virtual void SwitchAVMView(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::adas::AVMBaseType::enAVMViewMode _m_eAVMViewMode, SwitchAVMViewReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method SwitchGuideline.
    virtual void SwitchGuideline(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::adas::AVMBaseType::enAVMGuideLineMode _m_eAVMGuideLinewMode, SwitchGuidelineReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method SwitchCTA.
    virtual void SwitchCTA(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::adas::CTABaseType::enCTAWorkMode _m_eCATMode, SwitchCTAReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method SwitchAutoCalibrationAuto.
    virtual void SwitchAutoCalibrationAuto(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::adas::AVMBaseType::enAutoCaliWorkModeAuto _m_eAutoCaliMode, SwitchAutoCalibrationAutoReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method SwitchAutoCalibrationManually.
    virtual void SwitchAutoCalibrationManually(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::adas::AVMBaseType::enAutoCaliWorkModeManu _m_eAutoCaliMode, SwitchAutoCalibrationManuallyReply_t _reply) = 0;
    /// Sends a broadcast event for bcAVMViewStatus.
    virtual void fireBcAVMViewStatusEvent(const ::v1::com::harman::adas::AVMBaseType::enAVMStatus &_m_AVMStatus) = 0;

    using CommonAPI::Stub<AVMServiceStubAdapter, AVMServiceStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<AVMServiceStubAdapter, AVMServiceStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<AVMServiceStubAdapter, AVMServiceStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef AVMServiceStubRemoteEvent RemoteEventType;
    typedef AVMService StubInterface;
};

} // namespace adas
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_ADAS_AVM_Service_STUB_HPP_

/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.201702211714.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.3.0
* generated on: Tue Aug 01 13:37:50 CST 2017
*/
#include <v0/com/harman/adas/AdasServiceStubDefault.hpp>
#include <assert.h>

namespace v0 {
namespace com {
namespace harman {
namespace adas {

AdasServiceStubDefault::AdasServiceStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(AdasService::getInterfaceVersion()) {
}

const CommonAPI::Version& AdasServiceStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

AdasServiceStubRemoteEvent* AdasServiceStubDefault::initStubAdapter(const std::shared_ptr<AdasServiceStubAdapter> &_adapter) {
    CommonAPI::Stub<AdasServiceStubAdapter, AdasServiceStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

const ::v1::com::harman::adas::AdasType::aModuleState& AdasServiceStubDefault::getCurrentStateAttribute() {
    return currentStateAttributeValue_;
}

const ::v1::com::harman::adas::AdasType::aModuleState& AdasServiceStubDefault::getCurrentStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getCurrentStateAttribute();
}

void AdasServiceStubDefault::setCurrentStateAttribute(::v1::com::harman::adas::AdasType::aModuleState _value) {
    const bool valueChanged = trySetCurrentStateAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<AdasServiceStubAdapter, AdasServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireCurrentStateAttributeChanged(currentStateAttributeValue_);
    }
}

bool AdasServiceStubDefault::trySetCurrentStateAttribute(::v1::com::harman::adas::AdasType::aModuleState _value) {
    if (!validateCurrentStateAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (currentStateAttributeValue_ != _value);
    currentStateAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool AdasServiceStubDefault::validateCurrentStateAttributeRequestedValue(const ::v1::com::harman::adas::AdasType::aModuleState &_value) {
    (void)_value;
	return true;
}



void AdasServiceStubDefault::getModuleState(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _moduleName, getModuleStateReply_t _reply) {
    (void)_client;
    (void) _moduleName;
    ::v1::com::harman::adas::AdasType::eModuleStates moduleState = ::v1::com::harman::adas::AdasType::eModuleStates::OFF;
    if (!moduleState.validate()) {
        return;
    }
    _reply(moduleState);
}


void AdasServiceStubDefault::fireAAdasModuleStateEvent(const ::v1::com::harman::adas::AdasType::aModuleState &_modulesState) {
    assert((CommonAPI::Stub<AdasServiceStubAdapter, AdasServiceStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<AdasServiceStubAdapter, AdasServiceStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireAAdasModuleStateEvent(_modulesState);
}


AdasServiceStubDefault::RemoteEventHandler::RemoteEventHandler(AdasServiceStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace adas
} // namespace harman
} // namespace com
} // namespace v0

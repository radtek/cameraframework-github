/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.201702211714.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.3.0
* generated on: Tue Aug 01 13:37:50 CST 2017
*/
#include <v0/com/harman/adas/ADASDiagnosis.hpp>
#include <v0/com/harman/adas/ADASDiagnosisDBusStubAdapter.hpp>

namespace v0 {
namespace com {
namespace harman {
namespace adas {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createADASDiagnosisDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<ADASDiagnosisDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerADASDiagnosisDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	ADASDiagnosis::getInterface(), &createADASDiagnosisDBusStubAdapter);
}

ADASDiagnosisDBusStubAdapterInternal::~ADASDiagnosisDBusStubAdapterInternal() {
    deactivateManagedInstances();
    ADASDiagnosisDBusStubAdapterHelper::deinit();
}

void ADASDiagnosisDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* ADASDiagnosisDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"triggerCameraTesting\">\n"
            "<arg name=\"_m_DiagTest\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"getNumOfCameras\">\n"
            "<arg name=\"_m_eAVMGuideLinewMode\" type=\"y\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::adas::ADASDiagnosisStub,
        CommonAPI::Version
        > ADASDiagnosisDBusStubAdapterInternal::getADASDiagnosisInterfaceVersionStubDispatcher(&ADASDiagnosisStub::getInterfaceVersion, "uu");




CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::adas::ADASDiagnosisStub,
    std::tuple<>,
    std::tuple<::v1::com::harman::adas::ADASDiagType::enDiagTestState>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ADASDiagnosisDBusStubAdapterInternal::triggerCameraTestingStubDispatcher(
    &ADASDiagnosisStub::triggerCameraTesting, "i",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::adas::ADASDiagnosisStub,
    std::tuple<>,
    std::tuple<uint8_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ADASDiagnosisDBusStubAdapterInternal::getNumOfCamerasStubDispatcher(
    &ADASDiagnosisStub::getNumOfCameras, "y",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));





const ADASDiagnosisDBusStubAdapterHelper::StubDispatcherTable& ADASDiagnosisDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& ADASDiagnosisDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

ADASDiagnosisDBusStubAdapterInternal::ADASDiagnosisDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      ADASDiagnosisDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<ADASDiagnosisStub>(_stub), false),
      stubDispatcherTable_({
            { { "triggerCameraTesting", "" }, &com::harman::adas::ADASDiagnosisDBusStubAdapterInternal::triggerCameraTestingStubDispatcher },
            { { "getNumOfCameras", "" }, &com::harman::adas::ADASDiagnosisDBusStubAdapterInternal::getNumOfCamerasStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &com::harman::adas::ADASDiagnosisDBusStubAdapterInternal::getADASDiagnosisInterfaceVersionStubDispatcher });
}

bool ADASDiagnosisDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace adas
} // namespace harman
} // namespace com
} // namespace v0

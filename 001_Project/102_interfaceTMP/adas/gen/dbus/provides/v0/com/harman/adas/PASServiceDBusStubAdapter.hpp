/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.201702211714.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.3.0
* generated on: Tue Aug 01 13:37:50 CST 2017
*/
#ifndef V0_COM_HARMAN_ADAS_PAS_Service_DBUS_STUB_ADAPTER_HPP_
#define V0_COM_HARMAN_ADAS_PAS_Service_DBUS_STUB_ADAPTER_HPP_

#include <v0/com/harman/adas/PASServiceStub.hpp>
#include "v0/com/harman/adas/PASServiceDBusDeployment.hpp"        
#include <v1/com/harman/adas/PASBaseTypeDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace adas {

typedef CommonAPI::DBus::DBusStubAdapterHelper<PASServiceStub> PASServiceDBusStubAdapterHelper;

class PASServiceDBusStubAdapterInternal
    : public virtual PASServiceStubAdapter,
      public PASServiceDBusStubAdapterHelper
{
public:
    PASServiceDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~PASServiceDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return PASService::getInterface();
    }

    void firePASStatusAttributeChanged(const std::vector<::v1::com::harman::adas::PASBaseType::enPASStatus>& value);



    const PASServiceDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::adas::PASServiceStub,
        CommonAPI::Version
        > getPASServiceInterfaceVersionStubDispatcher;

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::adas::PASServiceStub,
        std::vector<::v1::com::harman::adas::PASBaseType::enPASStatus>,
        CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>                
        > getPASStatusAttributeStubDispatcher;



static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::adas::PASServiceStub,
    std::tuple<::v1::com::harman::adas::PASBaseType::enPASViewStatus>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > switchPASViewStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    PASServiceDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class PASServiceDBusStubAdapter
    : public PASServiceDBusStubAdapterInternal,
      public std::enable_shared_from_this<PASServiceDBusStubAdapter> {
public:
    PASServiceDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          PASServiceDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace adas
} // namespace harman
} // namespace com
} // namespace v0

#endif // V0_COM_HARMAN_ADAS_PAS_Service_DBUS_STUB_ADAPTER_HPP_

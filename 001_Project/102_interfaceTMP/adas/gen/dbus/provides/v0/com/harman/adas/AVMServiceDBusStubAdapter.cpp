/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.201702211714.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.3.0
* generated on: Tue Aug 01 13:37:50 CST 2017
*/
#include <v0/com/harman/adas/AVMService.hpp>
#include <v0/com/harman/adas/AVMServiceDBusStubAdapter.hpp>

namespace v0 {
namespace com {
namespace harman {
namespace adas {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createAVMServiceDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<AVMServiceDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerAVMServiceDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	AVMService::getInterface(), &createAVMServiceDBusStubAdapter);
}

AVMServiceDBusStubAdapterInternal::~AVMServiceDBusStubAdapterInternal() {
    deactivateManagedInstances();
    AVMServiceDBusStubAdapterHelper::deinit();
}

void AVMServiceDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* AVMServiceDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"getAVMCamStatusAttribute\">\n"
            "<arg name=\"value\" type=\"(iiii)\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onAVMCamStatusAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"(iiii)\" />\n"
        "</signal>\n"
        "<method name=\"getCTAStatusAttribute\">\n"
            "<arg name=\"value\" type=\"(ii)\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onCTAStatusAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"(ii)\" />\n"
        "</signal>\n"
        "<method name=\"getAutoStatusAttribute\">\n"
            "<arg name=\"value\" type=\"i\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onAutoStatusAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
        "</signal>\n"
        "<signal name=\"bcAVMViewStatus\">\n"
            "<arg name=\"m_AVMStatus\" type=\"i\" />\n"
        "</signal>\n"
        "<method name=\"SwitchAVMView\">\n"
            "<arg name=\"_m_eAVMViewMode\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"SwitchGuideline\">\n"
            "<arg name=\"_m_eAVMGuideLinewMode\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"SwitchCTA\">\n"
            "<arg name=\"_m_eCATMode\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_iErrCTA\" type=\"y\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"SwitchAutoCalibrationAuto\">\n"
            "<arg name=\"_m_eAutoCaliMode\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_iErrAutoCali\" type=\"y\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"SwitchAutoCalibrationManually\">\n"
            "<arg name=\"_m_eAutoCaliMode\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_iErrAutoCali\" type=\"y\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::adas::AVMServiceStub,
        CommonAPI::Version
        > AVMServiceDBusStubAdapterInternal::getAVMServiceInterfaceVersionStubDispatcher(&AVMServiceStub::getInterfaceVersion, "uu");

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::adas::AVMServiceStub,
        ::v1::com::harman::adas::AVMBaseType::stAVMCamState,
        ::v1::com::harman::adas::AVMBaseType_::stAVMCamStateDeployment_t
        > AVMServiceDBusStubAdapterInternal::getAVMCamStatusAttributeStubDispatcher(
            &::v0::com::harman::adas::AVMServiceStub::getAVMCamStatusAttribute
            , "(iiii)"
            );
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::adas::AVMServiceStub,
        ::v1::com::harman::adas::CTABaseType::stCTAStatus,
        ::v1::com::harman::adas::CTABaseType_::stCTAStatusDeployment_t
        > AVMServiceDBusStubAdapterInternal::getCTAStatusAttributeStubDispatcher(
            &::v0::com::harman::adas::AVMServiceStub::getCTAStatusAttribute
            , "(ii)"
            );
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::adas::AVMServiceStub,
        ::v1::com::harman::adas::AVMBaseType::enAutoCaliState
        > AVMServiceDBusStubAdapterInternal::getAutoStatusAttributeStubDispatcher(
            &::v0::com::harman::adas::AVMServiceStub::getAutoStatusAttribute
            , "i"
            );



CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::adas::AVMServiceStub,
    std::tuple<::v1::com::harman::adas::AVMBaseType::enAVMViewMode>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > AVMServiceDBusStubAdapterInternal::switchAVMViewStubDispatcher(
    &AVMServiceStub::SwitchAVMView, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::adas::AVMServiceStub,
    std::tuple<::v1::com::harman::adas::AVMBaseType::enAVMGuideLineMode>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > AVMServiceDBusStubAdapterInternal::switchGuidelineStubDispatcher(
    &AVMServiceStub::SwitchGuideline, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::adas::AVMServiceStub,
    std::tuple<::v1::com::harman::adas::CTABaseType::enCTAWorkMode>,
    std::tuple<uint8_t>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > AVMServiceDBusStubAdapterInternal::switchCTAStubDispatcher(
    &AVMServiceStub::SwitchCTA, "y",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::adas::AVMServiceStub,
    std::tuple<::v1::com::harman::adas::AVMBaseType::enAutoCaliWorkModeAuto>,
    std::tuple<uint8_t>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > AVMServiceDBusStubAdapterInternal::switchAutoCalibrationAutoStubDispatcher(
    &AVMServiceStub::SwitchAutoCalibrationAuto, "y",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::adas::AVMServiceStub,
    std::tuple<::v1::com::harman::adas::AVMBaseType::enAutoCaliWorkModeManu>,
    std::tuple<uint8_t>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > AVMServiceDBusStubAdapterInternal::switchAutoCalibrationManuallyStubDispatcher(
    &AVMServiceStub::SwitchAutoCalibrationManually, "y",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));


void AVMServiceDBusStubAdapterInternal::fireAVMCamStatusAttributeChanged(const ::v1::com::harman::adas::AVMBaseType::stAVMCamState& value) {
    CommonAPI::Deployable<::v1::com::harman::adas::AVMBaseType::stAVMCamState, ::v1::com::harman::adas::AVMBaseType_::stAVMCamStateDeployment_t> deployedValue(value, static_cast<::v1::com::harman::adas::AVMBaseType_::stAVMCamStateDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v1::com::harman::adas::AVMBaseType::stAVMCamState,
        ::v1::com::harman::adas::AVMBaseType_::stAVMCamStateDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onAVMCamStatusAttributeChanged",
            "(iiii)",
            deployedValue
    
    );
}
void AVMServiceDBusStubAdapterInternal::fireCTAStatusAttributeChanged(const ::v1::com::harman::adas::CTABaseType::stCTAStatus& value) {
    CommonAPI::Deployable<::v1::com::harman::adas::CTABaseType::stCTAStatus, ::v1::com::harman::adas::CTABaseType_::stCTAStatusDeployment_t> deployedValue(value, static_cast<::v1::com::harman::adas::CTABaseType_::stCTAStatusDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v1::com::harman::adas::CTABaseType::stCTAStatus,
        ::v1::com::harman::adas::CTABaseType_::stCTAStatusDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onCTAStatusAttributeChanged",
            "(ii)",
            deployedValue
    
    );
}
void AVMServiceDBusStubAdapterInternal::fireAutoStatusAttributeChanged(const ::v1::com::harman::adas::AVMBaseType::enAutoCaliState& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v1::com::harman::adas::AVMBaseType::enAutoCaliState
    >>
        ::sendSignal(
            *this,
            "onAutoStatusAttributeChanged",
            "i",
            value
    
    );
}

void AVMServiceDBusStubAdapterInternal::fireBcAVMViewStatusEvent(const ::v1::com::harman::adas::AVMBaseType::enAVMStatus& m_AVMStatus) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v1::com::harman::adas::AVMBaseType::enAVMStatus
    >>::sendSignal(
            *this,
            "bcAVMViewStatus",
            "i",
    m_AVMStatus
    );
}


const AVMServiceDBusStubAdapterHelper::StubDispatcherTable& AVMServiceDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& AVMServiceDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

AVMServiceDBusStubAdapterInternal::AVMServiceDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      AVMServiceDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<AVMServiceStub>(_stub), false),
      stubDispatcherTable_({
            { { "getAVMCamStatusAttribute", "" }, &com::harman::adas::AVMServiceDBusStubAdapterInternal::getAVMCamStatusAttributeStubDispatcher },
            { { "getCTAStatusAttribute", "" }, &com::harman::adas::AVMServiceDBusStubAdapterInternal::getCTAStatusAttributeStubDispatcher },
            { { "getAutoStatusAttribute", "" }, &com::harman::adas::AVMServiceDBusStubAdapterInternal::getAutoStatusAttributeStubDispatcher }
            ,
            { { "SwitchAVMView", "i" }, &com::harman::adas::AVMServiceDBusStubAdapterInternal::switchAVMViewStubDispatcher },
            { { "SwitchGuideline", "i" }, &com::harman::adas::AVMServiceDBusStubAdapterInternal::switchGuidelineStubDispatcher },
            { { "SwitchCTA", "i" }, &com::harman::adas::AVMServiceDBusStubAdapterInternal::switchCTAStubDispatcher },
            { { "SwitchAutoCalibrationAuto", "i" }, &com::harman::adas::AVMServiceDBusStubAdapterInternal::switchAutoCalibrationAutoStubDispatcher },
            { { "SwitchAutoCalibrationManually", "i" }, &com::harman::adas::AVMServiceDBusStubAdapterInternal::switchAutoCalibrationManuallyStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &com::harman::adas::AVMServiceDBusStubAdapterInternal::getAVMServiceInterfaceVersionStubDispatcher });
}

bool AVMServiceDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace adas
} // namespace harman
} // namespace com
} // namespace v0

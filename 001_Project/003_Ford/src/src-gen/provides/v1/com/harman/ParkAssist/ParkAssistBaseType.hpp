/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V1_COM_HARMAN_PARKASSIST_Park_Assist_Base_Type_HPP_
#define V1_COM_HARMAN_PARKASSIST_Park_Assist_Base_Type_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace ParkAssist {

struct ParkAssistBaseType {
    
    struct enRVCStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            RVC_On = 0,
            RVC_Off = 1,
            RVC_OFF_REQ = 2,
            RVC_OFF_ACK = 3,
            RVC_ON_REQ = 4,
            RVC_ON_ACK = 5,
            RVC_NOT_CONFIGURED = 6
        };
        
        enRVCStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::RVC_On)) {}
        enRVCStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::RVC_On):
                case static_cast<int32_t>(Literal::RVC_Off):
                case static_cast<int32_t>(Literal::RVC_OFF_REQ):
                case static_cast<int32_t>(Literal::RVC_OFF_ACK):
                case static_cast<int32_t>(Literal::RVC_ON_REQ):
                case static_cast<int32_t>(Literal::RVC_ON_ACK):
                case static_cast<int32_t>(Literal::RVC_NOT_CONFIGURED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enRVCStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enRVCStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enRVCStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enRVCStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enRVCStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enRVCStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enRVCZoom : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            RVC_Zoom_Off_Request = 0,
            RVC_Zoom_off_Completed = 1,
            RVC_Zoom_On_Request = 2,
            RVC_Zoom_on_Completed = 3
        };
        
        enRVCZoom() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::RVC_Zoom_Off_Request)) {}
        enRVCZoom(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::RVC_Zoom_Off_Request):
                case static_cast<int32_t>(Literal::RVC_Zoom_off_Completed):
                case static_cast<int32_t>(Literal::RVC_Zoom_On_Request):
                case static_cast<int32_t>(Literal::RVC_Zoom_on_Completed):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enRVCZoom &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enRVCZoom &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enRVCZoom &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enRVCZoom &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enRVCZoom &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enRVCZoom &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enRVCSplitView : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            RVC_SplitView_Off_Request = 0,
            RVC_SplitView_off_Completed = 1,
            RVC_SplitView_on_Request = 2,
            RVC_SplitView_on_Completed = 3
        };
        
        enRVCSplitView() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::RVC_SplitView_Off_Request)) {}
        enRVCSplitView(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::RVC_SplitView_Off_Request):
                case static_cast<int32_t>(Literal::RVC_SplitView_off_Completed):
                case static_cast<int32_t>(Literal::RVC_SplitView_on_Request):
                case static_cast<int32_t>(Literal::RVC_SplitView_on_Completed):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enRVCSplitView &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enRVCSplitView &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enRVCSplitView &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enRVCSplitView &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enRVCSplitView &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enRVCSplitView &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enRVCError : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            RVC_NoVideo = 0,
            RVC_VideoMalfunction = 1,
            RVC_VideoBufferAllocationFailed = 2,
            RVC_UnKnowError = 3,
            RVC_GearFAULT = 4,
            RVC_noError = 5
        };
        
        enRVCError() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::RVC_NoVideo)) {}
        enRVCError(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::RVC_NoVideo):
                case static_cast<int32_t>(Literal::RVC_VideoMalfunction):
                case static_cast<int32_t>(Literal::RVC_VideoBufferAllocationFailed):
                case static_cast<int32_t>(Literal::RVC_UnKnowError):
                case static_cast<int32_t>(Literal::RVC_GearFAULT):
                case static_cast<int32_t>(Literal::RVC_noError):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enRVCError &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enRVCError &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enRVCError &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enRVCError &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enRVCError &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enRVCError &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enDisplayIconType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_ZOOM_ICON = 0,
            e_RVC_CANCEL_ICON = 1,
            e_NO_ICON = 2,
            e_INVALID = 3
        };
        
        enDisplayIconType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_ZOOM_ICON)) {}
        enDisplayIconType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_ZOOM_ICON):
                case static_cast<int32_t>(Literal::e_RVC_CANCEL_ICON):
                case static_cast<int32_t>(Literal::e_NO_ICON):
                case static_cast<int32_t>(Literal::e_INVALID):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enDisplayIconType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enDisplayIconType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enDisplayIconType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enDisplayIconType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enDisplayIconType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enDisplayIconType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enCancelRVC : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_RVC_CANCEL_ICON_REQ = 0
        };
        
        enCancelRVC() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_RVC_CANCEL_ICON_REQ)) {}
        enCancelRVC(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_RVC_CANCEL_ICON_REQ):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enCancelRVC &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enCancelRVC &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enCancelRVC &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enCancelRVC &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enCancelRVC &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enCancelRVC &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.ParkAssist.ParkAssistBaseType";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct ParkAssistBaseType

} // namespace ParkAssist
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for enRVCStatus
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCStatus> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCStatus& enRVCStatus) const {
            return static_cast<int32_t>(enRVCStatus);
        }
    };
    //Hash for enRVCZoom
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom& enRVCZoom) const {
            return static_cast<int32_t>(enRVCZoom);
        }
    };
    //Hash for enRVCSplitView
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView& enRVCSplitView) const {
            return static_cast<int32_t>(enRVCSplitView);
        }
    };
    //Hash for enRVCError
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCError> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCError& enRVCError) const {
            return static_cast<int32_t>(enRVCError);
        }
    };
    //Hash for enDisplayIconType
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::enDisplayIconType> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enDisplayIconType& enDisplayIconType) const {
            return static_cast<int32_t>(enDisplayIconType);
        }
    };
    //Hash for enCancelRVC
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::enCancelRVC> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enCancelRVC& enCancelRVC) const {
            return static_cast<int32_t>(enCancelRVC);
        }
    };
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_PARKASSIST_Park_Assist_Base_Type_HPP_

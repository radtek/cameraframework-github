/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V1_COM_HARMAN_PARKASSIST_APA_Base_Type_HPP_
#define V1_COM_HARMAN_PARKASSIST_APA_Base_Type_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace ParkAssist {

struct APABaseType {
    
    struct enAPAMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Mode_Off = 0,
            e_Mode_Sapp = 1,
            e_Mode_Ppa = 2,
            e_Mode_Poa = 3
        };
        
        enAPAMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Mode_Off)) {}
        enAPAMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Mode_Off):
                case static_cast<int32_t>(Literal::e_Mode_Sapp):
                case static_cast<int32_t>(Literal::e_Mode_Ppa):
                case static_cast<int32_t>(Literal::e_Mode_Poa):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enAPAMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enAPAMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enAPAMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enAPAMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enAPAMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enAPAMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enAPAStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_APA_Off = 0,
            e_APA_On = 1,
            e_APA_NOT_CONFIGURED = 2
        };
        
        enAPAStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_APA_Off)) {}
        enAPAStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_APA_Off):
                case static_cast<int32_t>(Literal::e_APA_On):
                case static_cast<int32_t>(Literal::e_APA_NOT_CONFIGURED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enAPAStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enAPAStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enAPAStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enAPAStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enAPAStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enAPAStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enModeSelectability : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Invalid = -1,
            e_Selectable = 0,
            e_NotSelectable = 1,
            e_NotConfigured = 2
        };
        
        enModeSelectability() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Invalid)) {}
        enModeSelectability(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Invalid):
                case static_cast<int32_t>(Literal::e_Selectable):
                case static_cast<int32_t>(Literal::e_NotSelectable):
                case static_cast<int32_t>(Literal::e_NotConfigured):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enModeSelectability &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enModeSelectability &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enModeSelectability &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enModeSelectability &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enModeSelectability &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enModeSelectability &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct APAavaliabilityInfo : CommonAPI::Struct<enAPAMode, enModeSelectability> {
    	
    	APAavaliabilityInfo() {
    	}
    	APAavaliabilityInfo(const enAPAMode &_m_eAPAMode, const enModeSelectability &_m_eModeSelectability)
    	{
    		std::get<0>(values_) = _m_eAPAMode;
    		std::get<1>(values_) = _m_eModeSelectability;
    	}
    	inline const enAPAMode &getM_eAPAMode() const { return std::get<0>(values_); }
    	inline void setM_eAPAMode(const enAPAMode &_value) { std::get<0>(values_) = _value; }
    	inline const enModeSelectability &getM_eModeSelectability() const { return std::get<1>(values_); }
    	inline void setM_eModeSelectability(const enModeSelectability &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const APAavaliabilityInfo& _other) const {
                return (getM_eAPAMode() == _other.getM_eAPAMode() && getM_eModeSelectability() == _other.getM_eModeSelectability());
        }
    	inline bool operator!=(const APAavaliabilityInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<APABaseType::APAavaliabilityInfo> ListAPAavaliabilityInfo;
    
    struct enPositionalScanLeftRightStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Scan_Blank = -1,
            e_Scan_LeftActive_RightPassive = 0,
            e_Scan_LeftPassive_RightActive = 1
        };
        
        enPositionalScanLeftRightStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Scan_Blank)) {}
        enPositionalScanLeftRightStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Scan_Blank):
                case static_cast<int32_t>(Literal::e_Scan_LeftActive_RightPassive):
                case static_cast<int32_t>(Literal::e_Scan_LeftPassive_RightActive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enPositionalScanLeftRightStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enPositionalScanLeftRightStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enPositionalScanLeftRightStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enPositionalScanLeftRightStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enPositionalScanLeftRightStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enPositionalScanLeftRightStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enPositionalSymbol1Info : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Symbol1Info_Blank = -1,
            e_Symbol1Info_RemoveHands = 0,
            e_Symbol1Info_Stop = 1,
            e_Symbol1Info_DownArrowWithBlackColour = 2,
            e_Symbol1Info_Withfill = 3,
            e_Symbol1Info_DownArrowWithGreenColour = 4,
            e_Symbol1Info_Flag = 5,
            e_Symbol1Info_UpArrowWithBlackColour = 6,
            e_Symbol1Info_UpArrowWithGreenColour = 7,
            e_Symbol1Info_CrossMark = 8,
            e_Symbol1Info_SlowDown = 9,
            e_Symbol1Info_Note = 10,
            e_Symbol1Info_Shiftto1 = 11,
            e_Symbol1Info_DoorOpen = 12,
            e_Symbol1Info_Caution = 13,
            e_Symbol1Info_Park = 14,
            e_Symbol1Info_ShifttoD = 15
        };
        
        enPositionalSymbol1Info() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Symbol1Info_Blank)) {}
        enPositionalSymbol1Info(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Symbol1Info_Blank):
                case static_cast<int32_t>(Literal::e_Symbol1Info_RemoveHands):
                case static_cast<int32_t>(Literal::e_Symbol1Info_Stop):
                case static_cast<int32_t>(Literal::e_Symbol1Info_DownArrowWithBlackColour):
                case static_cast<int32_t>(Literal::e_Symbol1Info_Withfill):
                case static_cast<int32_t>(Literal::e_Symbol1Info_DownArrowWithGreenColour):
                case static_cast<int32_t>(Literal::e_Symbol1Info_Flag):
                case static_cast<int32_t>(Literal::e_Symbol1Info_UpArrowWithBlackColour):
                case static_cast<int32_t>(Literal::e_Symbol1Info_UpArrowWithGreenColour):
                case static_cast<int32_t>(Literal::e_Symbol1Info_CrossMark):
                case static_cast<int32_t>(Literal::e_Symbol1Info_SlowDown):
                case static_cast<int32_t>(Literal::e_Symbol1Info_Note):
                case static_cast<int32_t>(Literal::e_Symbol1Info_Shiftto1):
                case static_cast<int32_t>(Literal::e_Symbol1Info_DoorOpen):
                case static_cast<int32_t>(Literal::e_Symbol1Info_Caution):
                case static_cast<int32_t>(Literal::e_Symbol1Info_Park):
                case static_cast<int32_t>(Literal::e_Symbol1Info_ShifttoD):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enPositionalSymbol1Info &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enPositionalSymbol1Info &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enPositionalSymbol1Info &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enPositionalSymbol1Info &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enPositionalSymbol1Info &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enPositionalSymbol1Info &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enPositionalSymbol2Info : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Symbol2Info_Symbol_Blank = -1,
            e_Symbol2Info_Letter_R = 1,
            e_Symbol2Info_Letter_P = 2,
            e_Symbol2Info_Letter_N = 3,
            e_Symbol2Info_Letter_D = 4,
            e_Symbol2Info_Letter_SHIFT_R = 5,
            e_Symbol2Info_Letter_Shift_1 = 6,
            e_Symbol2Info_Symbol_Wait = 7,
            e_Symbol2Info_Symbol_Park = 8
        };
        
        enPositionalSymbol2Info() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Symbol2Info_Symbol_Blank)) {}
        enPositionalSymbol2Info(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Symbol2Info_Symbol_Blank):
                case static_cast<int32_t>(Literal::e_Symbol2Info_Letter_R):
                case static_cast<int32_t>(Literal::e_Symbol2Info_Letter_P):
                case static_cast<int32_t>(Literal::e_Symbol2Info_Letter_N):
                case static_cast<int32_t>(Literal::e_Symbol2Info_Letter_D):
                case static_cast<int32_t>(Literal::e_Symbol2Info_Letter_SHIFT_R):
                case static_cast<int32_t>(Literal::e_Symbol2Info_Letter_Shift_1):
                case static_cast<int32_t>(Literal::e_Symbol2Info_Symbol_Wait):
                case static_cast<int32_t>(Literal::e_Symbol2Info_Symbol_Park):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enPositionalSymbol2Info &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enPositionalSymbol2Info &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enPositionalSymbol2Info &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enPositionalSymbol2Info &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enPositionalSymbol2Info &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enPositionalSymbol2Info &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enAPAViewType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Invalid = 0,
            e_RVC_With_CameraImage = 1,
            e_RVC_Without_CameraImage = 2,
            e_WithoutRVC = 3
        };
        
        enAPAViewType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Invalid)) {}
        enAPAViewType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Invalid):
                case static_cast<int32_t>(Literal::e_RVC_With_CameraImage):
                case static_cast<int32_t>(Literal::e_RVC_Without_CameraImage):
                case static_cast<int32_t>(Literal::e_WithoutRVC):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enAPAViewType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enAPAViewType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enAPAViewType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enAPAViewType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enAPAViewType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enAPAViewType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct APAViewType : CommonAPI::Struct<enAPAMode, enAPAViewType> {
    	
    	APAViewType() {
    	}
    	APAViewType(const enAPAMode &_m_eAPAMode, const enAPAViewType &_m_eAPAViewType)
    	{
    		std::get<0>(values_) = _m_eAPAMode;
    		std::get<1>(values_) = _m_eAPAViewType;
    	}
    	inline const enAPAMode &getM_eAPAMode() const { return std::get<0>(values_); }
    	inline void setM_eAPAMode(const enAPAMode &_value) { std::get<0>(values_) = _value; }
    	inline const enAPAViewType &getM_eAPAViewType() const { return std::get<1>(values_); }
    	inline void setM_eAPAViewType(const enAPAViewType &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const APAViewType& _other) const {
                return (getM_eAPAMode() == _other.getM_eAPAMode() && getM_eAPAViewType() == _other.getM_eAPAViewType());
        }
    	inline bool operator!=(const APAViewType &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct enPositionalText1 : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Text1_Blank = -1,
            e_Text1_Scanning = 0,
            e_Text1_Select_Side = 2,
            e_Text1_Right_Side_Selected = 3,
            e_Text1_Left_Side_Selected = 4,
            e_Text1_Select_Left_Side = 5,
            e_Text1_Select_Right_Side = 6,
            e_Text1_Release_Steering_Wheel = 7,
            e_Text1_Space_Found = 8,
            e_Text1_Stop_Red_Text = 9,
            e_Text1_Drive_Forward_Slowly_Green_Text = 10,
            e_Text1_Drive_Backward_Slowly_Green_Text = 11,
            e_Text1_Finished_Take_Control = 12,
            e_Text1_Slow_Down = 13,
            e_Text1_Cancelled = 14,
            e_Text1_Cancelled_Wheel_Slip = 15,
            e_Text1_Cancelled_Door_Open = 16,
            e_Text1_Cancelled_High_Inclination = 17,
            e_Text1_Cancelled_Obstacle_In_Path = 18,
            e_Text1_Cancelled_Steering_Intervention = 19,
            e_Text1_Cancelled_Auto_Break = 20,
            e_Text1_Cancelled_Sensors_Blocked = 21,
            e_Text1_Cancelled_Trailer_Attached = 22,
            e_Text1_Paused = 23,
            e_Text1_Active_park_Assist = 24,
            e_Text1_Shift_To_1 = 25,
            e_Text1_Shift_To_D = 26,
            e_Text1_Shift_To_P = 27,
            e_Text1_Active_park_Not_Available = 28,
            e_Text1_Finished = 29,
            e_Text1_Hold_Park_Button = 30,
            e_Text1_Attention = 31,
            e_Text1_Obstracle_In_Path = 32,
            e_Text1_Accel_Pedal_Inactive = 33
        };
        
        enPositionalText1() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Text1_Blank)) {}
        enPositionalText1(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Text1_Blank):
                case static_cast<int32_t>(Literal::e_Text1_Scanning):
                case static_cast<int32_t>(Literal::e_Text1_Select_Side):
                case static_cast<int32_t>(Literal::e_Text1_Right_Side_Selected):
                case static_cast<int32_t>(Literal::e_Text1_Left_Side_Selected):
                case static_cast<int32_t>(Literal::e_Text1_Select_Left_Side):
                case static_cast<int32_t>(Literal::e_Text1_Select_Right_Side):
                case static_cast<int32_t>(Literal::e_Text1_Release_Steering_Wheel):
                case static_cast<int32_t>(Literal::e_Text1_Space_Found):
                case static_cast<int32_t>(Literal::e_Text1_Stop_Red_Text):
                case static_cast<int32_t>(Literal::e_Text1_Drive_Forward_Slowly_Green_Text):
                case static_cast<int32_t>(Literal::e_Text1_Drive_Backward_Slowly_Green_Text):
                case static_cast<int32_t>(Literal::e_Text1_Finished_Take_Control):
                case static_cast<int32_t>(Literal::e_Text1_Slow_Down):
                case static_cast<int32_t>(Literal::e_Text1_Cancelled):
                case static_cast<int32_t>(Literal::e_Text1_Cancelled_Wheel_Slip):
                case static_cast<int32_t>(Literal::e_Text1_Cancelled_Door_Open):
                case static_cast<int32_t>(Literal::e_Text1_Cancelled_High_Inclination):
                case static_cast<int32_t>(Literal::e_Text1_Cancelled_Obstacle_In_Path):
                case static_cast<int32_t>(Literal::e_Text1_Cancelled_Steering_Intervention):
                case static_cast<int32_t>(Literal::e_Text1_Cancelled_Auto_Break):
                case static_cast<int32_t>(Literal::e_Text1_Cancelled_Sensors_Blocked):
                case static_cast<int32_t>(Literal::e_Text1_Cancelled_Trailer_Attached):
                case static_cast<int32_t>(Literal::e_Text1_Paused):
                case static_cast<int32_t>(Literal::e_Text1_Active_park_Assist):
                case static_cast<int32_t>(Literal::e_Text1_Shift_To_1):
                case static_cast<int32_t>(Literal::e_Text1_Shift_To_D):
                case static_cast<int32_t>(Literal::e_Text1_Shift_To_P):
                case static_cast<int32_t>(Literal::e_Text1_Active_park_Not_Available):
                case static_cast<int32_t>(Literal::e_Text1_Finished):
                case static_cast<int32_t>(Literal::e_Text1_Hold_Park_Button):
                case static_cast<int32_t>(Literal::e_Text1_Attention):
                case static_cast<int32_t>(Literal::e_Text1_Obstracle_In_Path):
                case static_cast<int32_t>(Literal::e_Text1_Accel_Pedal_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enPositionalText1 &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enPositionalText1 &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enPositionalText1 &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enPositionalText1 &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enPositionalText1 &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enPositionalText1 &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enPositionalText2 : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Text2_Blank = -1,
            e_Text2_Stop = 1,
            e_Text2_Drive_Forward = 2,
            e_Text2_Drive_Forward_Green_Text = 3,
            e_Text2_Shift_To_Drive = 4,
            e_Text2_Shift_To_Reverse = 5,
            e_Text2_Shift_To_Forward = 6,
            e_Text2_Shift_To_N = 7,
            e_Text2_Prepare_To_Stop = 8,
            e_Text2_Take_Control = 9,
            e_Text2_Object_In_Path = 10,
            e_Text2_Auto_Break_Activated = 11,
            e_Text2_Press_Button_To_Resume = 12,
            e_Text2_Wheel_Slip = 13,
            e_Text2_TC_Off = 14,
            e_Text2_HighSpeed = 15,
            e_Text2_Driver_Use_Breaks = 16,
            e_Text2_Sensor_Blocked = 17,
            e_Text2_Trailer_Attached = 18,
            e_Text2_Remove_Hands = 19,
            e_Text2_Wrong_direction = 20,
            e_Text2_System_Fault = 21,
            e_Text2_Release_Break_To_Start = 22,
            e_Text2_Check_Surroundings = 23,
            e_Text2_Close_Door = 24,
            e_Text2_Release_SteeringWheel = 25,
            e_Text2_Hold_Button_To_Resume = 26,
            e_Text2_Wait_For_Steering = 27,
            e_Text2_High_Inclination = 28
        };
        
        enPositionalText2() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Text2_Blank)) {}
        enPositionalText2(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Text2_Blank):
                case static_cast<int32_t>(Literal::e_Text2_Stop):
                case static_cast<int32_t>(Literal::e_Text2_Drive_Forward):
                case static_cast<int32_t>(Literal::e_Text2_Drive_Forward_Green_Text):
                case static_cast<int32_t>(Literal::e_Text2_Shift_To_Drive):
                case static_cast<int32_t>(Literal::e_Text2_Shift_To_Reverse):
                case static_cast<int32_t>(Literal::e_Text2_Shift_To_Forward):
                case static_cast<int32_t>(Literal::e_Text2_Shift_To_N):
                case static_cast<int32_t>(Literal::e_Text2_Prepare_To_Stop):
                case static_cast<int32_t>(Literal::e_Text2_Take_Control):
                case static_cast<int32_t>(Literal::e_Text2_Object_In_Path):
                case static_cast<int32_t>(Literal::e_Text2_Auto_Break_Activated):
                case static_cast<int32_t>(Literal::e_Text2_Press_Button_To_Resume):
                case static_cast<int32_t>(Literal::e_Text2_Wheel_Slip):
                case static_cast<int32_t>(Literal::e_Text2_TC_Off):
                case static_cast<int32_t>(Literal::e_Text2_HighSpeed):
                case static_cast<int32_t>(Literal::e_Text2_Driver_Use_Breaks):
                case static_cast<int32_t>(Literal::e_Text2_Sensor_Blocked):
                case static_cast<int32_t>(Literal::e_Text2_Trailer_Attached):
                case static_cast<int32_t>(Literal::e_Text2_Remove_Hands):
                case static_cast<int32_t>(Literal::e_Text2_Wrong_direction):
                case static_cast<int32_t>(Literal::e_Text2_System_Fault):
                case static_cast<int32_t>(Literal::e_Text2_Release_Break_To_Start):
                case static_cast<int32_t>(Literal::e_Text2_Check_Surroundings):
                case static_cast<int32_t>(Literal::e_Text2_Close_Door):
                case static_cast<int32_t>(Literal::e_Text2_Release_SteeringWheel):
                case static_cast<int32_t>(Literal::e_Text2_Hold_Button_To_Resume):
                case static_cast<int32_t>(Literal::e_Text2_Wait_For_Steering):
                case static_cast<int32_t>(Literal::e_Text2_High_Inclination):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enPositionalText2 &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enPositionalText2 &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enPositionalText2 &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enPositionalText2 &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enPositionalText2 &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enPositionalText2 &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enParkScenarioLeft : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Park_ScenarioLeft_Blank = -1,
            e_Park_ScenarioLeft_SlotFound_Graphics_SAPP_L = 1,
            e_Park_ScenarioLeft_SlotFound_Graphics_PPA_L = 2,
            e_Park_ScenarioLeft_SlotReady_Graphics_SAPP_L = 3,
            e_Park_ScenarioLeft_SlotReady_Graphics_PPA_L = 4,
            e_Park_ScenarioLeft_NoSlot_Found_Graphics_SAPP_L = 5,
            e_Park_ScenarioLeft_NoSlot_Found_Graphics_PPA_L = 6
        };
        
        enParkScenarioLeft() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Park_ScenarioLeft_Blank)) {}
        enParkScenarioLeft(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Park_ScenarioLeft_Blank):
                case static_cast<int32_t>(Literal::e_Park_ScenarioLeft_SlotFound_Graphics_SAPP_L):
                case static_cast<int32_t>(Literal::e_Park_ScenarioLeft_SlotFound_Graphics_PPA_L):
                case static_cast<int32_t>(Literal::e_Park_ScenarioLeft_SlotReady_Graphics_SAPP_L):
                case static_cast<int32_t>(Literal::e_Park_ScenarioLeft_SlotReady_Graphics_PPA_L):
                case static_cast<int32_t>(Literal::e_Park_ScenarioLeft_NoSlot_Found_Graphics_SAPP_L):
                case static_cast<int32_t>(Literal::e_Park_ScenarioLeft_NoSlot_Found_Graphics_PPA_L):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enParkScenarioLeft &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enParkScenarioLeft &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enParkScenarioLeft &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enParkScenarioLeft &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enParkScenarioLeft &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enParkScenarioLeft &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enParkScenarioRight : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Park_ScenarioRight_Blank = -1,
            e_Park_ScenarioRight_SlotFound_Graphics_SAPP_R = 1,
            e_Park_ScenarioRight_SlotFound_Graphics_PPA_R = 2,
            e_Park_ScenarioRight_SlotReady_Graphics_SAPP_R = 3,
            e_Park_ScenarioRight_SlotReady_Graphics_PPA_R = 4,
            e_Park_ScenarioRight_NoSlot_Found_Graphics_SAPP_R = 5,
            e_Park_ScenarioRight_NoSlot_Found_Graphics_PPA_R = 6
        };
        
        enParkScenarioRight() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Park_ScenarioRight_Blank)) {}
        enParkScenarioRight(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Park_ScenarioRight_Blank):
                case static_cast<int32_t>(Literal::e_Park_ScenarioRight_SlotFound_Graphics_SAPP_R):
                case static_cast<int32_t>(Literal::e_Park_ScenarioRight_SlotFound_Graphics_PPA_R):
                case static_cast<int32_t>(Literal::e_Park_ScenarioRight_SlotReady_Graphics_SAPP_R):
                case static_cast<int32_t>(Literal::e_Park_ScenarioRight_SlotReady_Graphics_PPA_R):
                case static_cast<int32_t>(Literal::e_Park_ScenarioRight_NoSlot_Found_Graphics_SAPP_R):
                case static_cast<int32_t>(Literal::e_Park_ScenarioRight_NoSlot_Found_Graphics_PPA_R):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enParkScenarioRight &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enParkScenarioRight &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enParkScenarioRight &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enParkScenarioRight &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enParkScenarioRight &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enParkScenarioRight &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enParkInArrow : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Park_InArrow_Blank = -1,
            e_Park_Right_Down_Arrow = 1,
            e_Park_Right_Arrow = 2,
            e_Park_Left_Down_Arrow = 3,
            e_Park_Left_Arrow = 4
        };
        
        enParkInArrow() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Park_InArrow_Blank)) {}
        enParkInArrow(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Park_InArrow_Blank):
                case static_cast<int32_t>(Literal::e_Park_Right_Down_Arrow):
                case static_cast<int32_t>(Literal::e_Park_Right_Arrow):
                case static_cast<int32_t>(Literal::e_Park_Left_Down_Arrow):
                case static_cast<int32_t>(Literal::e_Park_Left_Arrow):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enParkInArrow &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enParkInArrow &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enParkInArrow &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enParkInArrow &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enParkInArrow &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enParkInArrow &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enPositionalPOALeft : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Park_POALeft_Blank = -1,
            e_Park_POALeft_Show_Left_Arrow = 1,
            e_Park_POALeft_Show_Left_Arrow_With_CrossMark = 2
        };
        
        enPositionalPOALeft() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Park_POALeft_Blank)) {}
        enPositionalPOALeft(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Park_POALeft_Blank):
                case static_cast<int32_t>(Literal::e_Park_POALeft_Show_Left_Arrow):
                case static_cast<int32_t>(Literal::e_Park_POALeft_Show_Left_Arrow_With_CrossMark):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enPositionalPOALeft &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enPositionalPOALeft &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enPositionalPOALeft &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enPositionalPOALeft &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enPositionalPOALeft &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enPositionalPOALeft &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enPositionalPOARight : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Park_POARight_Blank = -1,
            e_Park_POARight_Show_Right_Arrow = 1,
            e_Park_POARight_Show_Right_Arrow_With_CrossMark = 2
        };
        
        enPositionalPOARight() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Park_POARight_Blank)) {}
        enPositionalPOARight(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Park_POARight_Blank):
                case static_cast<int32_t>(Literal::e_Park_POARight_Show_Right_Arrow):
                case static_cast<int32_t>(Literal::e_Park_POARight_Show_Right_Arrow_With_CrossMark):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enPositionalPOARight &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enPositionalPOARight &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enPositionalPOARight &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enPositionalPOARight &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enPositionalPOARight &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enPositionalPOARight &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enPositionalPOARightSelected : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Park_POA_Right_Selected_Arrow_Blank = -1,
            e_Park_POA_Right_Selected_Arrow_Show = 1
        };
        
        enPositionalPOARightSelected() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Park_POA_Right_Selected_Arrow_Blank)) {}
        enPositionalPOARightSelected(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Park_POA_Right_Selected_Arrow_Blank):
                case static_cast<int32_t>(Literal::e_Park_POA_Right_Selected_Arrow_Show):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enPositionalPOARightSelected &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enPositionalPOARightSelected &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enPositionalPOARightSelected &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enPositionalPOARightSelected &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enPositionalPOARightSelected &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enPositionalPOARightSelected &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enPositionalPOALeftSelected : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Park_POA_Left_Selected_Arrow_Blank = -1,
            e_Park_POA_Left_Selected_Arrow_Show = 1
        };
        
        enPositionalPOALeftSelected() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Park_POA_Left_Selected_Arrow_Blank)) {}
        enPositionalPOALeftSelected(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Park_POA_Left_Selected_Arrow_Blank):
                case static_cast<int32_t>(Literal::e_Park_POA_Left_Selected_Arrow_Show):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enPositionalPOALeftSelected &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enPositionalPOALeftSelected &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enPositionalPOALeftSelected &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enPositionalPOALeftSelected &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enPositionalPOALeftSelected &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enPositionalPOALeftSelected &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enPositionalSymbol3 : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Symbol3_Blank = -1,
            e_Symbol3_Stop = 1,
            e_Symbol3_Green_Arrow_Down_Zero = 2,
            e_Symbol3_Green_Arrow_Down_One = 3,
            e_Symbol3_Green_Arrow_Down_Two = 4,
            e_Symbol3_Green_Arrow_Down_Three = 5,
            e_Symbol3_Green_Arrow_Down_Four = 6,
            e_Symbol3_Green_Arrow_Down_Five = 7,
            e_Symbol3_Green_Arrow_Down_Six = 8,
            e_Symbol3_Green_Arrow_Down_Seven = 9,
            e_Symbol3_Green_Arrow_Down_Eight = 10,
            e_Symbol3_Green_Arrow_Down_Nine = 11,
            e_Symbol3_Green_Arrow_Down_Ten = 12,
            e_Symbol3_Green_Arrow_Down_Eleven = 13,
            e_Symbol3_Green_Arrow_Down_Twelve = 14,
            e_Symbol3_Green_Arrow_Down_Thirteen = 15,
            e_Symbol3_Green_Arrow_Down_Fourteen = 16,
            e_Symbol3_Green_Arrow_Down_Fifteen = 17,
            e_Symbol3_Door_Open = 18,
            e_Symbol3_RemoveHands = 19,
            e_Symbol3_Park_Icon = 20,
            e_Symbol3_Flag_Icon = 21,
            e_Symbol3_Green_Arrow_Up_Zero = 22,
            e_Symbol3_Green_Arrow_Up_One = 23,
            e_Symbol3_Green_Arrow_Up_Two = 24,
            e_Symbol3_Green_Arrow_Up_Three = 25,
            e_Symbol3_Green_Arrow_Up_Four = 26,
            e_Symbol3_Green_Arrow_Up_Five = 27,
            e_Symbol3_Green_Arrow_Up_Six = 28,
            e_Symbol3_Green_Arrow_Up_Seven = 29,
            e_Symbol3_Green_Arrow_Up_Eight = 30,
            e_Symbol3_Green_Arrow_Up_Nine = 31,
            e_Symbol3_Green_Arrow_Up_Ten = 32,
            e_Symbol3_Green_Arrow_Up_Eleven = 33,
            e_Symbol3_Green_Arrow_Up_Twelve = 34,
            e_Symbol3_Green_Arrow_Up_Thirteen = 35,
            e_Symbol3_Green_Arrow_Up_Fourteen = 36,
            e_Symbol3_Green_Arrow_Up_Fifteen = 37,
            e_Symbol3_Slow_Icon = 38,
            e_Symbol3_Shift1 = 39,
            e_Symbol3_ShiftToD = 40,
            e_Symbol3_Info = 41,
            e_Symbol3_Cross_Mark = 42
        };
        
        enPositionalSymbol3() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Symbol3_Blank)) {}
        enPositionalSymbol3(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Symbol3_Blank):
                case static_cast<int32_t>(Literal::e_Symbol3_Stop):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Down_Zero):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Down_One):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Down_Two):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Down_Three):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Down_Four):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Down_Five):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Down_Six):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Down_Seven):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Down_Eight):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Down_Nine):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Down_Ten):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Down_Eleven):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Down_Twelve):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Down_Thirteen):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Down_Fourteen):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Down_Fifteen):
                case static_cast<int32_t>(Literal::e_Symbol3_Door_Open):
                case static_cast<int32_t>(Literal::e_Symbol3_RemoveHands):
                case static_cast<int32_t>(Literal::e_Symbol3_Park_Icon):
                case static_cast<int32_t>(Literal::e_Symbol3_Flag_Icon):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Up_Zero):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Up_One):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Up_Two):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Up_Three):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Up_Four):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Up_Five):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Up_Six):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Up_Seven):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Up_Eight):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Up_Nine):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Up_Ten):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Up_Eleven):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Up_Twelve):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Up_Thirteen):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Up_Fourteen):
                case static_cast<int32_t>(Literal::e_Symbol3_Green_Arrow_Up_Fifteen):
                case static_cast<int32_t>(Literal::e_Symbol3_Slow_Icon):
                case static_cast<int32_t>(Literal::e_Symbol3_Shift1):
                case static_cast<int32_t>(Literal::e_Symbol3_ShiftToD):
                case static_cast<int32_t>(Literal::e_Symbol3_Info):
                case static_cast<int32_t>(Literal::e_Symbol3_Cross_Mark):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enPositionalSymbol3 &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enPositionalSymbol3 &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enPositionalSymbol3 &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enPositionalSymbol3 &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enPositionalSymbol3 &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enPositionalSymbol3 &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enPositionalSymbol4 : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Symbol4_Blank = -1,
            e_Symbol4_Remove_Hands = 1,
            e_Symbol4_ShiftToR = 2,
            e_Symbol4_Letter_R = 3,
            e_Symbol4_Shift_To_1 = 4,
            e_Symbol4_ShiftToD = 5,
            e_Symbol4_Symbol_Wait = 6,
            e_Symbol4_Symbol_park = 7,
            e_Symbol4_Letter_N = 8,
            e_Symbol4_Info = 9
        };
        
        enPositionalSymbol4() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Symbol4_Blank)) {}
        enPositionalSymbol4(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Symbol4_Blank):
                case static_cast<int32_t>(Literal::e_Symbol4_Remove_Hands):
                case static_cast<int32_t>(Literal::e_Symbol4_ShiftToR):
                case static_cast<int32_t>(Literal::e_Symbol4_Letter_R):
                case static_cast<int32_t>(Literal::e_Symbol4_Shift_To_1):
                case static_cast<int32_t>(Literal::e_Symbol4_ShiftToD):
                case static_cast<int32_t>(Literal::e_Symbol4_Symbol_Wait):
                case static_cast<int32_t>(Literal::e_Symbol4_Symbol_park):
                case static_cast<int32_t>(Literal::e_Symbol4_Letter_N):
                case static_cast<int32_t>(Literal::e_Symbol4_Info):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enPositionalSymbol4 &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enPositionalSymbol4 &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enPositionalSymbol4 &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enPositionalSymbol4 &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enPositionalSymbol4 &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enPositionalSymbol4 &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enPositionalText3 : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Text3_Blank = -1,
            e_Text3_Stop = 1,
            e_Text3_Finished = 2,
            e_Text3_Drive_Forward_Slowly = 3,
            e_Text3_Drive_Backward_Slowly = 4,
            e_Text3_Cancelled_Wheel_Slip = 5,
            e_Text3_Cancelled = 6,
            e_Text3_Cancelled_518 = 7,
            e_Text3_Cancelled_519 = 8,
            e_Text3_Cancelled_Steering_Intervention = 9,
            e_Text3_Cancelled_Door_Open = 10,
            e_Text3_Cancelled_High_Inclination = 11,
            e_Text3_Cancelled_Obstracle_InPath = 12,
            e_Text3_Cancelled_Sensor_Blocked_520 = 13,
            e_Text3_Cancelled_Trailer_Attached_521 = 14,
            e_Text3_Cancelled_AutoBrake = 15,
            e_Text3_Relese_Steering_Wheel = 16,
            e_Text3_System_Fault = 17,
            e_Text3_Shift_To_1 = 18,
            e_Text3_Shift_To_D = 19,
            e_Text3_Not_Available = 20,
            e_Text3_Slow_Down = 21,
            e_Text3_Attention = 22,
            e_Text3_Paused = 23,
            e_Text3_Accel_Pedal_Inactive = 24
        };
        
        enPositionalText3() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Text3_Blank)) {}
        enPositionalText3(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Text3_Blank):
                case static_cast<int32_t>(Literal::e_Text3_Stop):
                case static_cast<int32_t>(Literal::e_Text3_Finished):
                case static_cast<int32_t>(Literal::e_Text3_Drive_Forward_Slowly):
                case static_cast<int32_t>(Literal::e_Text3_Drive_Backward_Slowly):
                case static_cast<int32_t>(Literal::e_Text3_Cancelled_Wheel_Slip):
                case static_cast<int32_t>(Literal::e_Text3_Cancelled):
                case static_cast<int32_t>(Literal::e_Text3_Cancelled_518):
                case static_cast<int32_t>(Literal::e_Text3_Cancelled_519):
                case static_cast<int32_t>(Literal::e_Text3_Cancelled_Steering_Intervention):
                case static_cast<int32_t>(Literal::e_Text3_Cancelled_Door_Open):
                case static_cast<int32_t>(Literal::e_Text3_Cancelled_High_Inclination):
                case static_cast<int32_t>(Literal::e_Text3_Cancelled_Obstracle_InPath):
                case static_cast<int32_t>(Literal::e_Text3_Cancelled_Sensor_Blocked_520):
                case static_cast<int32_t>(Literal::e_Text3_Cancelled_Trailer_Attached_521):
                case static_cast<int32_t>(Literal::e_Text3_Cancelled_AutoBrake):
                case static_cast<int32_t>(Literal::e_Text3_Relese_Steering_Wheel):
                case static_cast<int32_t>(Literal::e_Text3_System_Fault):
                case static_cast<int32_t>(Literal::e_Text3_Shift_To_1):
                case static_cast<int32_t>(Literal::e_Text3_Shift_To_D):
                case static_cast<int32_t>(Literal::e_Text3_Not_Available):
                case static_cast<int32_t>(Literal::e_Text3_Slow_Down):
                case static_cast<int32_t>(Literal::e_Text3_Attention):
                case static_cast<int32_t>(Literal::e_Text3_Paused):
                case static_cast<int32_t>(Literal::e_Text3_Accel_Pedal_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enPositionalText3 &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enPositionalText3 &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enPositionalText3 &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enPositionalText3 &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enPositionalText3 &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enPositionalText3 &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enPositionalText4 : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Text4_Blank = -1,
            e_Text4_Release_Steering = 1,
            e_Text4_Take_Control = 2,
            e_Text4_Shift_To_Reverse = 3,
            e_Text4_Shift_To_Neutral = 4,
            e_Text4_Object_In_Path = 5,
            e_Text4_Prepare_To_Stop = 6,
            e_Text4_Check_Sarrounding = 7,
            e_Text4_Press_Button_To_Resume = 8,
            e_Text4_Wait_For_Steering = 9,
            e_Text4_Wheel_Slip = 10,
            e_Text4_TC_Off = 11,
            e_Text4_High_Speed = 12,
            e_Text4_Driver_Use_Brakes = 13,
            e_Text4_Sensor_Blocked = 14,
            e_Text4_Trailer_Attached = 15,
            e_Text4_Remove_Hands = 16,
            e_Text4_Wrong_Direction = 17,
            e_Text4_Auto_Brake_Activated = 18,
            e_Text4_Close_Door = 19,
            e_Text4_Release_Steering_Wheel = 20,
            e_Text4_Hold_Button_To_Resume = 21,
            e_Text4_High_Inclination = 22
        };
        
        enPositionalText4() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Text4_Blank)) {}
        enPositionalText4(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Text4_Blank):
                case static_cast<int32_t>(Literal::e_Text4_Release_Steering):
                case static_cast<int32_t>(Literal::e_Text4_Take_Control):
                case static_cast<int32_t>(Literal::e_Text4_Shift_To_Reverse):
                case static_cast<int32_t>(Literal::e_Text4_Shift_To_Neutral):
                case static_cast<int32_t>(Literal::e_Text4_Object_In_Path):
                case static_cast<int32_t>(Literal::e_Text4_Prepare_To_Stop):
                case static_cast<int32_t>(Literal::e_Text4_Check_Sarrounding):
                case static_cast<int32_t>(Literal::e_Text4_Press_Button_To_Resume):
                case static_cast<int32_t>(Literal::e_Text4_Wait_For_Steering):
                case static_cast<int32_t>(Literal::e_Text4_Wheel_Slip):
                case static_cast<int32_t>(Literal::e_Text4_TC_Off):
                case static_cast<int32_t>(Literal::e_Text4_High_Speed):
                case static_cast<int32_t>(Literal::e_Text4_Driver_Use_Brakes):
                case static_cast<int32_t>(Literal::e_Text4_Sensor_Blocked):
                case static_cast<int32_t>(Literal::e_Text4_Trailer_Attached):
                case static_cast<int32_t>(Literal::e_Text4_Remove_Hands):
                case static_cast<int32_t>(Literal::e_Text4_Wrong_Direction):
                case static_cast<int32_t>(Literal::e_Text4_Auto_Brake_Activated):
                case static_cast<int32_t>(Literal::e_Text4_Close_Door):
                case static_cast<int32_t>(Literal::e_Text4_Release_Steering_Wheel):
                case static_cast<int32_t>(Literal::e_Text4_Hold_Button_To_Resume):
                case static_cast<int32_t>(Literal::e_Text4_High_Inclination):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enPositionalText4 &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enPositionalText4 &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enPositionalText4 &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enPositionalText4 &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enPositionalText4 &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enPositionalText4 &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enPositionalText5 : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_Text5_Blank = -1,
            e_Text5_Shift_To_Cancel = 1
        };
        
        enPositionalText5() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_Text5_Blank)) {}
        enPositionalText5(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_Text5_Blank):
                case static_cast<int32_t>(Literal::e_Text5_Shift_To_Cancel):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enPositionalText5 &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enPositionalText5 &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enPositionalText5 &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enPositionalText5 &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enPositionalText5 &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enPositionalText5 &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.ParkAssist.APABaseType";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct APABaseType

} // namespace ParkAssist
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for enAPAMode
    template<>
    struct hash<::v1::com::harman::ParkAssist::APABaseType::enAPAMode> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::APABaseType::enAPAMode& enAPAMode) const {
            return static_cast<int32_t>(enAPAMode);
        }
    };
    //Hash for enAPAStatus
    template<>
    struct hash<::v1::com::harman::ParkAssist::APABaseType::enAPAStatus> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::APABaseType::enAPAStatus& enAPAStatus) const {
            return static_cast<int32_t>(enAPAStatus);
        }
    };
    //Hash for enModeSelectability
    template<>
    struct hash<::v1::com::harman::ParkAssist::APABaseType::enModeSelectability> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::APABaseType::enModeSelectability& enModeSelectability) const {
            return static_cast<int32_t>(enModeSelectability);
        }
    };
    //Hash for enPositionalScanLeftRightStatus
    template<>
    struct hash<::v1::com::harman::ParkAssist::APABaseType::enPositionalScanLeftRightStatus> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalScanLeftRightStatus& enPositionalScanLeftRightStatus) const {
            return static_cast<int32_t>(enPositionalScanLeftRightStatus);
        }
    };
    //Hash for enPositionalSymbol1Info
    template<>
    struct hash<::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol1Info> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol1Info& enPositionalSymbol1Info) const {
            return static_cast<int32_t>(enPositionalSymbol1Info);
        }
    };
    //Hash for enPositionalSymbol2Info
    template<>
    struct hash<::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol2Info> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol2Info& enPositionalSymbol2Info) const {
            return static_cast<int32_t>(enPositionalSymbol2Info);
        }
    };
    //Hash for enAPAViewType
    template<>
    struct hash<::v1::com::harman::ParkAssist::APABaseType::enAPAViewType> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::APABaseType::enAPAViewType& enAPAViewType) const {
            return static_cast<int32_t>(enAPAViewType);
        }
    };
    //Hash for enPositionalText1
    template<>
    struct hash<::v1::com::harman::ParkAssist::APABaseType::enPositionalText1> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText1& enPositionalText1) const {
            return static_cast<int32_t>(enPositionalText1);
        }
    };
    //Hash for enPositionalText2
    template<>
    struct hash<::v1::com::harman::ParkAssist::APABaseType::enPositionalText2> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText2& enPositionalText2) const {
            return static_cast<int32_t>(enPositionalText2);
        }
    };
    //Hash for enParkScenarioLeft
    template<>
    struct hash<::v1::com::harman::ParkAssist::APABaseType::enParkScenarioLeft> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioLeft& enParkScenarioLeft) const {
            return static_cast<int32_t>(enParkScenarioLeft);
        }
    };
    //Hash for enParkScenarioRight
    template<>
    struct hash<::v1::com::harman::ParkAssist::APABaseType::enParkScenarioRight> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioRight& enParkScenarioRight) const {
            return static_cast<int32_t>(enParkScenarioRight);
        }
    };
    //Hash for enParkInArrow
    template<>
    struct hash<::v1::com::harman::ParkAssist::APABaseType::enParkInArrow> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::APABaseType::enParkInArrow& enParkInArrow) const {
            return static_cast<int32_t>(enParkInArrow);
        }
    };
    //Hash for enPositionalPOALeft
    template<>
    struct hash<::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeft> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeft& enPositionalPOALeft) const {
            return static_cast<int32_t>(enPositionalPOALeft);
        }
    };
    //Hash for enPositionalPOARight
    template<>
    struct hash<::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARight> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARight& enPositionalPOARight) const {
            return static_cast<int32_t>(enPositionalPOARight);
        }
    };
    //Hash for enPositionalPOARightSelected
    template<>
    struct hash<::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARightSelected> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARightSelected& enPositionalPOARightSelected) const {
            return static_cast<int32_t>(enPositionalPOARightSelected);
        }
    };
    //Hash for enPositionalPOALeftSelected
    template<>
    struct hash<::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeftSelected> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeftSelected& enPositionalPOALeftSelected) const {
            return static_cast<int32_t>(enPositionalPOALeftSelected);
        }
    };
    //Hash for enPositionalSymbol3
    template<>
    struct hash<::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol3> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol3& enPositionalSymbol3) const {
            return static_cast<int32_t>(enPositionalSymbol3);
        }
    };
    //Hash for enPositionalSymbol4
    template<>
    struct hash<::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol4> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol4& enPositionalSymbol4) const {
            return static_cast<int32_t>(enPositionalSymbol4);
        }
    };
    //Hash for enPositionalText3
    template<>
    struct hash<::v1::com::harman::ParkAssist::APABaseType::enPositionalText3> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText3& enPositionalText3) const {
            return static_cast<int32_t>(enPositionalText3);
        }
    };
    //Hash for enPositionalText4
    template<>
    struct hash<::v1::com::harman::ParkAssist::APABaseType::enPositionalText4> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText4& enPositionalText4) const {
            return static_cast<int32_t>(enPositionalText4);
        }
    };
    //Hash for enPositionalText5
    template<>
    struct hash<::v1::com::harman::ParkAssist::APABaseType::enPositionalText5> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText5& enPositionalText5) const {
            return static_cast<int32_t>(enPositionalText5);
        }
    };
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_PARKASSIST_APA_Base_Type_HPP_

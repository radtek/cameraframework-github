/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V1_COM_HARMAN_PARKASSIST_PDC_Base_Type_HPP_
#define V1_COM_HARMAN_PARKASSIST_PDC_Base_Type_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace ParkAssist {

struct PDCBaseType {
    
    struct enPDCStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_PDC_ON = 0,
            e_PDC_OFF = 1,
            e_PDC_INVALID = 2,
            e_PDC_NOT_CONFIGURED = 3
        };
        
        enPDCStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_PDC_ON)) {}
        enPDCStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_PDC_ON):
                case static_cast<int32_t>(Literal::e_PDC_OFF):
                case static_cast<int32_t>(Literal::e_PDC_INVALID):
                case static_cast<int32_t>(Literal::e_PDC_NOT_CONFIGURED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enPDCStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enPDCStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enPDCStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enPDCStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enPDCStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enPDCStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enCancelPDCIcon : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            e_PDC_CANCEL_REQ = 0
        };
        
        enCancelPDCIcon() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::e_PDC_CANCEL_REQ)) {}
        enCancelPDCIcon(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::e_PDC_CANCEL_REQ):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enCancelPDCIcon &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enCancelPDCIcon &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enCancelPDCIcon &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enCancelPDCIcon &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enCancelPDCIcon &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enCancelPDCIcon &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.ParkAssist.PDCBaseType";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct PDCBaseType

} // namespace ParkAssist
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for enPDCStatus
    template<>
    struct hash<::v1::com::harman::ParkAssist::PDCBaseType::enPDCStatus> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::PDCBaseType::enPDCStatus& enPDCStatus) const {
            return static_cast<int32_t>(enPDCStatus);
        }
    };
    //Hash for enCancelPDCIcon
    template<>
    struct hash<::v1::com::harman::ParkAssist::PDCBaseType::enCancelPDCIcon> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::PDCBaseType::enCancelPDCIcon& enCancelPDCIcon) const {
            return static_cast<int32_t>(enCancelPDCIcon);
        }
    };
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_PARKASSIST_PDC_Base_Type_HPP_

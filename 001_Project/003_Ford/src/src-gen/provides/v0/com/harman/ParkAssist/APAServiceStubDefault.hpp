/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_COM_HARMAN_PARKASSIST_APA_Service_STUB_DEFAULT_HPP_
#define V0_COM_HARMAN_PARKASSIST_APA_Service_STUB_DEFAULT_HPP_


#include <v0/com/harman/ParkAssist/APAServiceStub.hpp>
#include <sstream>

namespace v0 {
namespace com {
namespace harman {
namespace ParkAssist {

/**
 * Provides a default implementation for APAServiceStubRemoteEvent and
 * APAServiceStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class APAServiceStubDefault
    : public virtual APAServiceStub {
public:
    APAServiceStubDefault();

    APAServiceStubRemoteEvent* initStubAdapter(const std::shared_ptr<APAServiceStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);

    virtual const ::v1::com::harman::ParkAssist::APABaseType::enAPAStatus& getAPAStatusAttribute();
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enAPAStatus& getAPAStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setAPAStatusAttribute(::v1::com::harman::ParkAssist::APABaseType::enAPAStatus _value);
    virtual const ::v1::com::harman::ParkAssist::APABaseType::ListAPAavaliabilityInfo& getAPAModeAvailabilityInfoAttribute();
    virtual const ::v1::com::harman::ParkAssist::APABaseType::ListAPAavaliabilityInfo& getAPAModeAvailabilityInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setAPAModeAvailabilityInfoAttribute(::v1::com::harman::ParkAssist::APABaseType::ListAPAavaliabilityInfo _value);
    virtual const ::v1::com::harman::ParkAssist::APABaseType::APAViewType& getObjApaViewTypeAttribute();
    virtual const ::v1::com::harman::ParkAssist::APABaseType::APAViewType& getObjApaViewTypeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setObjApaViewTypeAttribute(::v1::com::harman::ParkAssist::APABaseType::APAViewType _value);
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enAPAMode& getCurrentApaActiveModeAttribute();
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enAPAMode& getCurrentApaActiveModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setCurrentApaActiveModeAttribute(::v1::com::harman::ParkAssist::APABaseType::enAPAMode _value);
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalScanLeftRightStatus& getScanLeftRightStatusAttribute();
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalScanLeftRightStatus& getScanLeftRightStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setScanLeftRightStatusAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalScanLeftRightStatus _value);
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol1Info& getPositionalSymbol1StatusAttribute();
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol1Info& getPositionalSymbol1StatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPositionalSymbol1StatusAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol1Info _value);
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol2Info& getPositionalSymbol2StatusAttribute();
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol2Info& getPositionalSymbol2StatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPositionalSymbol2StatusAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol2Info _value);
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText1& getPositionalText1Attribute();
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText1& getPositionalText1Attribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPositionalText1Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalText1 _value);
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText2& getPositionalText2Attribute();
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText2& getPositionalText2Attribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPositionalText2Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalText2 _value);
    virtual const bool& getPositionalCarLeftAttribute();
    virtual const bool& getPositionalCarLeftAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPositionalCarLeftAttribute(bool _value);
    virtual const bool& getPositionalCarRightAttribute();
    virtual const bool& getPositionalCarRightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPositionalCarRightAttribute(bool _value);
    virtual const bool& getPositionalCarPOAAttribute();
    virtual const bool& getPositionalCarPOAAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPositionalCarPOAAttribute(bool _value);
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioLeft& getParkScenarioLeftAttribute();
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioLeft& getParkScenarioLeftAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setParkScenarioLeftAttribute(::v1::com::harman::ParkAssist::APABaseType::enParkScenarioLeft _value);
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioRight& getParkScenarioRightAttribute();
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioRight& getParkScenarioRightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setParkScenarioRightAttribute(::v1::com::harman::ParkAssist::APABaseType::enParkScenarioRight _value);
    virtual const bool& getParkScenarioPOAAttribute();
    virtual const bool& getParkScenarioPOAAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setParkScenarioPOAAttribute(bool _value);
    virtual const bool& getCarNonRVCSacAttribute();
    virtual const bool& getCarNonRVCSacAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setCarNonRVCSacAttribute(bool _value);
    virtual const bool& getAPAErrorStatusAttribute();
    virtual const bool& getAPAErrorStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setAPAErrorStatusAttribute(bool _value);
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enParkInArrow& getParkInArrowAttribute();
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enParkInArrow& getParkInArrowAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setParkInArrowAttribute(::v1::com::harman::ParkAssist::APABaseType::enParkInArrow _value);
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeft& getPositionalPOALeftAttribute();
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeft& getPositionalPOALeftAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPositionalPOALeftAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeft _value);
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARight& getPositionalPOARightAttribute();
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARight& getPositionalPOARightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPositionalPOARightAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARight _value);
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARightSelected& getPositionalPOARightSelectedAttribute();
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARightSelected& getPositionalPOARightSelectedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPositionalPOARightSelectedAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARightSelected _value);
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeftSelected& getPositionalPOALeftSelectedAttribute();
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeftSelected& getPositionalPOALeftSelectedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPositionalPOALeftSelectedAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeftSelected _value);
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol3& getPositionalSymbol3Attribute();
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol3& getPositionalSymbol3Attribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPositionalSymbol3Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol3 _value);
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol4& getPositionalSymbol4Attribute();
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol4& getPositionalSymbol4Attribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPositionalSymbol4Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol4 _value);
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText3& getPositionalText3Attribute();
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText3& getPositionalText3Attribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPositionalText3Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalText3 _value);
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText4& getPositionalText4Attribute();
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText4& getPositionalText4Attribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPositionalText4Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalText4 _value);
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText5& getPositionalText5Attribute();
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText5& getPositionalText5Attribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPositionalText5Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalText5 _value);

    virtual void SelectApaMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::ParkAssist::APABaseType::enAPAMode _m_eAPAMode, SelectApaModeReply_t _reply);



protected:
    virtual bool trySetAPAStatusAttribute(::v1::com::harman::ParkAssist::APABaseType::enAPAStatus _value);
    virtual bool validateAPAStatusAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enAPAStatus &_value);
    virtual bool trySetAPAModeAvailabilityInfoAttribute(::v1::com::harman::ParkAssist::APABaseType::ListAPAavaliabilityInfo _value);
    virtual bool validateAPAModeAvailabilityInfoAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::ListAPAavaliabilityInfo &_value);
    virtual bool trySetObjApaViewTypeAttribute(::v1::com::harman::ParkAssist::APABaseType::APAViewType _value);
    virtual bool validateObjApaViewTypeAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::APAViewType &_value);
    virtual bool trySetCurrentApaActiveModeAttribute(::v1::com::harman::ParkAssist::APABaseType::enAPAMode _value);
    virtual bool validateCurrentApaActiveModeAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enAPAMode &_value);
    virtual bool trySetScanLeftRightStatusAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalScanLeftRightStatus _value);
    virtual bool validateScanLeftRightStatusAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalScanLeftRightStatus &_value);
    virtual bool trySetPositionalSymbol1StatusAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol1Info _value);
    virtual bool validatePositionalSymbol1StatusAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol1Info &_value);
    virtual bool trySetPositionalSymbol2StatusAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol2Info _value);
    virtual bool validatePositionalSymbol2StatusAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol2Info &_value);
    virtual bool trySetPositionalText1Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalText1 _value);
    virtual bool validatePositionalText1AttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText1 &_value);
    virtual bool trySetPositionalText2Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalText2 _value);
    virtual bool validatePositionalText2AttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText2 &_value);
    virtual bool trySetPositionalCarLeftAttribute(bool _value);
    virtual bool validatePositionalCarLeftAttributeRequestedValue(const bool &_value);
    virtual bool trySetPositionalCarRightAttribute(bool _value);
    virtual bool validatePositionalCarRightAttributeRequestedValue(const bool &_value);
    virtual bool trySetPositionalCarPOAAttribute(bool _value);
    virtual bool validatePositionalCarPOAAttributeRequestedValue(const bool &_value);
    virtual bool trySetParkScenarioLeftAttribute(::v1::com::harman::ParkAssist::APABaseType::enParkScenarioLeft _value);
    virtual bool validateParkScenarioLeftAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioLeft &_value);
    virtual bool trySetParkScenarioRightAttribute(::v1::com::harman::ParkAssist::APABaseType::enParkScenarioRight _value);
    virtual bool validateParkScenarioRightAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioRight &_value);
    virtual bool trySetParkScenarioPOAAttribute(bool _value);
    virtual bool validateParkScenarioPOAAttributeRequestedValue(const bool &_value);
    virtual bool trySetCarNonRVCSacAttribute(bool _value);
    virtual bool validateCarNonRVCSacAttributeRequestedValue(const bool &_value);
    virtual bool trySetAPAErrorStatusAttribute(bool _value);
    virtual bool validateAPAErrorStatusAttributeRequestedValue(const bool &_value);
    virtual bool trySetParkInArrowAttribute(::v1::com::harman::ParkAssist::APABaseType::enParkInArrow _value);
    virtual bool validateParkInArrowAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enParkInArrow &_value);
    virtual bool trySetPositionalPOALeftAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeft _value);
    virtual bool validatePositionalPOALeftAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeft &_value);
    virtual bool trySetPositionalPOARightAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARight _value);
    virtual bool validatePositionalPOARightAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARight &_value);
    virtual bool trySetPositionalPOARightSelectedAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARightSelected _value);
    virtual bool validatePositionalPOARightSelectedAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARightSelected &_value);
    virtual bool trySetPositionalPOALeftSelectedAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeftSelected _value);
    virtual bool validatePositionalPOALeftSelectedAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeftSelected &_value);
    virtual bool trySetPositionalSymbol3Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol3 _value);
    virtual bool validatePositionalSymbol3AttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol3 &_value);
    virtual bool trySetPositionalSymbol4Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol4 _value);
    virtual bool validatePositionalSymbol4AttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol4 &_value);
    virtual bool trySetPositionalText3Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalText3 _value);
    virtual bool validatePositionalText3AttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText3 &_value);
    virtual bool trySetPositionalText4Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalText4 _value);
    virtual bool validatePositionalText4AttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText4 &_value);
    virtual bool trySetPositionalText5Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalText5 _value);
    virtual bool validatePositionalText5AttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText5 &_value);
    class RemoteEventHandler: public virtual APAServiceStubRemoteEvent {
    public:
        RemoteEventHandler(APAServiceStubDefault *_defaultStub);





























    private:
        APAServiceStubDefault *defaultStub_;
    };
private:
    APAServiceStubDefault::RemoteEventHandler remoteEventHandler_;

    ::v1::com::harman::ParkAssist::APABaseType::enAPAStatus aPAStatusAttributeValue_ {};
    ::v1::com::harman::ParkAssist::APABaseType::ListAPAavaliabilityInfo aPAModeAvailabilityInfoAttributeValue_ {};
    ::v1::com::harman::ParkAssist::APABaseType::APAViewType objApaViewTypeAttributeValue_ {};
    ::v1::com::harman::ParkAssist::APABaseType::enAPAMode currentApaActiveModeAttributeValue_ {};
    ::v1::com::harman::ParkAssist::APABaseType::enPositionalScanLeftRightStatus scanLeftRightStatusAttributeValue_ {};
    ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol1Info positionalSymbol1StatusAttributeValue_ {};
    ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol2Info positionalSymbol2StatusAttributeValue_ {};
    ::v1::com::harman::ParkAssist::APABaseType::enPositionalText1 positionalText1AttributeValue_ {};
    ::v1::com::harman::ParkAssist::APABaseType::enPositionalText2 positionalText2AttributeValue_ {};
    bool positionalCarLeftAttributeValue_ {};
    bool positionalCarRightAttributeValue_ {};
    bool positionalCarPOAAttributeValue_ {};
    ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioLeft parkScenarioLeftAttributeValue_ {};
    ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioRight parkScenarioRightAttributeValue_ {};
    bool parkScenarioPOAAttributeValue_ {};
    bool carNonRVCSacAttributeValue_ {};
    bool aPAErrorStatusAttributeValue_ {};
    ::v1::com::harman::ParkAssist::APABaseType::enParkInArrow parkInArrowAttributeValue_ {};
    ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeft positionalPOALeftAttributeValue_ {};
    ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARight positionalPOARightAttributeValue_ {};
    ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARightSelected positionalPOARightSelectedAttributeValue_ {};
    ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeftSelected positionalPOALeftSelectedAttributeValue_ {};
    ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol3 positionalSymbol3AttributeValue_ {};
    ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol4 positionalSymbol4AttributeValue_ {};
    ::v1::com::harman::ParkAssist::APABaseType::enPositionalText3 positionalText3AttributeValue_ {};
    ::v1::com::harman::ParkAssist::APABaseType::enPositionalText4 positionalText4AttributeValue_ {};
    ::v1::com::harman::ParkAssist::APABaseType::enPositionalText5 positionalText5AttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace ParkAssist
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_PARKASSIST_APA_Service_STUB_DEFAULT

/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_COM_HARMAN_PARKASSIST_RVC_Service_STUB_HPP_
#define V0_COM_HARMAN_PARKASSIST_RVC_Service_STUB_HPP_

#include <functional>



#include <v1/com/harman/ParkAssist/ParkAssistBaseType.hpp>

#include <v0/com/harman/ParkAssist/RVCService.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace ParkAssist {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service RVCService. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class RVCServiceStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual RVCService {
 public:
    ///Notifies all remote listeners about a change of value of the attribute RVCZoomOnOff.
    virtual void fireRVCZoomOnOffAttributeChanged(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom& RVCZoomOnOff) = 0;
    ///Notifies all remote listeners about a change of value of the attribute RVCSpiltViewOnOff.
    virtual void fireRVCSpiltViewOnOffAttributeChanged(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView& RVCSpiltViewOnOff) = 0;
    ///Notifies all remote listeners about a change of value of the attribute RVCDisPlayStatus.
    virtual void fireRVCDisPlayStatusAttributeChanged(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCStatus& RVCDisPlayStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute RVCError.
    virtual void fireRVCErrorAttributeChanged(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCError& RVCError) = 0;
    ///Notifies all remote listeners about a change of value of the attribute CameraDelayOnOff.
    virtual void fireCameraDelayOnOffAttributeChanged(const bool& CameraDelayOnOff) = 0;
    ///Notifies all remote listeners about a change of value of the attribute RVCEnhancedPrkAid.
    virtual void fireRVCEnhancedPrkAidAttributeChanged(const bool& RVCEnhancedPrkAid) = 0;
    ///Notifies all remote listeners about a change of value of the attribute RVCTrunkStatus.
    virtual void fireRVCTrunkStatusAttributeChanged(const bool& RVCTrunkStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute DisplayIconType.
    virtual void fireDisplayIconTypeAttributeChanged(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enDisplayIconType& DisplayIconType) = 0;



    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for RVCService.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class RVCServiceStubRemoteEvent
{
public:
    virtual ~RVCServiceStubRemoteEvent() { }

    /// Verification callback for remote set requests on the attribute RVCZoomOnOff
    virtual bool onRemoteSetRVCZoomOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom _value) = 0;
    /// Action callback for remote set requests on the attribute RVCZoomOnOff
    virtual void onRemoteRVCZoomOnOffAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute RVCSpiltViewOnOff
    virtual bool onRemoteSetRVCSpiltViewOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView _value) = 0;
    /// Action callback for remote set requests on the attribute RVCSpiltViewOnOff
    virtual void onRemoteRVCSpiltViewOnOffAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute CameraDelayOnOff
    virtual bool onRemoteSetCameraDelayOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute CameraDelayOnOff
    virtual void onRemoteCameraDelayOnOffAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute RVCEnhancedPrkAid
    virtual bool onRemoteSetRVCEnhancedPrkAidAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute RVCEnhancedPrkAid
    virtual void onRemoteRVCEnhancedPrkAidAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute RVCTrunkStatus
    virtual bool onRemoteSetRVCTrunkStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute RVCTrunkStatus
    virtual void onRemoteRVCTrunkStatusAttributeChanged() = 0;
};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service RVCService to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class RVCServiceStub
    : public virtual CommonAPI::Stub<RVCServiceStubAdapter, RVCServiceStubRemoteEvent>
{
public:
    typedef std::function<void ()>CancelRVCReqReply_t;

    virtual ~RVCServiceStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /// Provides getter access to the attribute RVCZoomOnOff
    virtual const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom &getRVCZoomOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute RVCSpiltViewOnOff
    virtual const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView &getRVCSpiltViewOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute RVCDisPlayStatus
    virtual const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCStatus &getRVCDisPlayStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute RVCError
    virtual const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCError &getRVCErrorAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute CameraDelayOnOff
    virtual const bool &getCameraDelayOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute RVCEnhancedPrkAid
    virtual const bool &getRVCEnhancedPrkAidAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute RVCTrunkStatus
    virtual const bool &getRVCTrunkStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute DisplayIconType
    virtual const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enDisplayIconType &getDisplayIconTypeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /// This is the method that will be called on remote calls on the method CancelRVCReq.
    virtual void CancelRVCReq(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::ParkAssist::ParkAssistBaseType::enCancelRVC _m_eCancelRVC, CancelRVCReqReply_t _reply) = 0;

    using CommonAPI::Stub<RVCServiceStubAdapter, RVCServiceStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<RVCServiceStubAdapter, RVCServiceStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<RVCServiceStubAdapter, RVCServiceStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef RVCServiceStubRemoteEvent RemoteEventType;
    typedef RVCService StubInterface;
};

} // namespace ParkAssist
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_PARKASSIST_RVC_Service_STUB_HPP_

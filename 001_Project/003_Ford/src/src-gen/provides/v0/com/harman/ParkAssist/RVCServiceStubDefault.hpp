/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_COM_HARMAN_PARKASSIST_RVC_Service_STUB_DEFAULT_HPP_
#define V0_COM_HARMAN_PARKASSIST_RVC_Service_STUB_DEFAULT_HPP_


#include <v0/com/harman/ParkAssist/RVCServiceStub.hpp>
#include <sstream>

namespace v0 {
namespace com {
namespace harman {
namespace ParkAssist {

/**
 * Provides a default implementation for RVCServiceStubRemoteEvent and
 * RVCServiceStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class RVCServiceStubDefault
    : public virtual RVCServiceStub {
public:
    RVCServiceStubDefault();

    RVCServiceStubRemoteEvent* initStubAdapter(const std::shared_ptr<RVCServiceStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);

    virtual const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom& getRVCZoomOnOffAttribute();
    virtual const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom& getRVCZoomOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setRVCZoomOnOffAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom _value);
    virtual void setRVCZoomOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom _value);
    virtual const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView& getRVCSpiltViewOnOffAttribute();
    virtual const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView& getRVCSpiltViewOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setRVCSpiltViewOnOffAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView _value);
    virtual void setRVCSpiltViewOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView _value);
    virtual const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCStatus& getRVCDisPlayStatusAttribute();
    virtual const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCStatus& getRVCDisPlayStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setRVCDisPlayStatusAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCStatus _value);
    virtual const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCError& getRVCErrorAttribute();
    virtual const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCError& getRVCErrorAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setRVCErrorAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCError _value);
    virtual const bool& getCameraDelayOnOffAttribute();
    virtual const bool& getCameraDelayOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setCameraDelayOnOffAttribute(bool _value);
    virtual void setCameraDelayOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
    virtual const bool& getRVCEnhancedPrkAidAttribute();
    virtual const bool& getRVCEnhancedPrkAidAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setRVCEnhancedPrkAidAttribute(bool _value);
    virtual void setRVCEnhancedPrkAidAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
    virtual const bool& getRVCTrunkStatusAttribute();
    virtual const bool& getRVCTrunkStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setRVCTrunkStatusAttribute(bool _value);
    virtual void setRVCTrunkStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
    virtual const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enDisplayIconType& getDisplayIconTypeAttribute();
    virtual const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enDisplayIconType& getDisplayIconTypeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setDisplayIconTypeAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enDisplayIconType _value);

    virtual void CancelRVCReq(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::ParkAssist::ParkAssistBaseType::enCancelRVC _m_eCancelRVC, CancelRVCReqReply_t _reply);



protected:
    virtual bool trySetRVCZoomOnOffAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom _value);
    virtual bool validateRVCZoomOnOffAttributeRequestedValue(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom &_value);
    virtual void onRemoteRVCZoomOnOffAttributeChanged();
    virtual bool trySetRVCSpiltViewOnOffAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView _value);
    virtual bool validateRVCSpiltViewOnOffAttributeRequestedValue(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView &_value);
    virtual void onRemoteRVCSpiltViewOnOffAttributeChanged();
    virtual bool trySetRVCDisPlayStatusAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCStatus _value);
    virtual bool validateRVCDisPlayStatusAttributeRequestedValue(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCStatus &_value);
    virtual bool trySetRVCErrorAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCError _value);
    virtual bool validateRVCErrorAttributeRequestedValue(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCError &_value);
    virtual bool trySetCameraDelayOnOffAttribute(bool _value);
    virtual bool validateCameraDelayOnOffAttributeRequestedValue(const bool &_value);
    virtual void onRemoteCameraDelayOnOffAttributeChanged();
    virtual bool trySetRVCEnhancedPrkAidAttribute(bool _value);
    virtual bool validateRVCEnhancedPrkAidAttributeRequestedValue(const bool &_value);
    virtual void onRemoteRVCEnhancedPrkAidAttributeChanged();
    virtual bool trySetRVCTrunkStatusAttribute(bool _value);
    virtual bool validateRVCTrunkStatusAttributeRequestedValue(const bool &_value);
    virtual void onRemoteRVCTrunkStatusAttributeChanged();
    virtual bool trySetDisplayIconTypeAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enDisplayIconType _value);
    virtual bool validateDisplayIconTypeAttributeRequestedValue(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enDisplayIconType &_value);
    class RemoteEventHandler: public virtual RVCServiceStubRemoteEvent {
    public:
        RemoteEventHandler(RVCServiceStubDefault *_defaultStub);

        virtual bool onRemoteSetRVCZoomOnOffAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom _value);
        virtual bool onRemoteSetRVCZoomOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom _value);
        virtual void onRemoteRVCZoomOnOffAttributeChanged();

        virtual bool onRemoteSetRVCSpiltViewOnOffAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView _value);
        virtual bool onRemoteSetRVCSpiltViewOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView _value);
        virtual void onRemoteRVCSpiltViewOnOffAttributeChanged();



        virtual bool onRemoteSetCameraDelayOnOffAttribute(bool _value);
        virtual bool onRemoteSetCameraDelayOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
        virtual void onRemoteCameraDelayOnOffAttributeChanged();

        virtual bool onRemoteSetRVCEnhancedPrkAidAttribute(bool _value);
        virtual bool onRemoteSetRVCEnhancedPrkAidAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
        virtual void onRemoteRVCEnhancedPrkAidAttributeChanged();

        virtual bool onRemoteSetRVCTrunkStatusAttribute(bool _value);
        virtual bool onRemoteSetRVCTrunkStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
        virtual void onRemoteRVCTrunkStatusAttributeChanged();



    private:
        RVCServiceStubDefault *defaultStub_;
    };
private:
    RVCServiceStubDefault::RemoteEventHandler remoteEventHandler_;

    ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom rVCZoomOnOffAttributeValue_ {};
    ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView rVCSpiltViewOnOffAttributeValue_ {};
    ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCStatus rVCDisPlayStatusAttributeValue_ {};
    ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCError rVCErrorAttributeValue_ {};
    bool cameraDelayOnOffAttributeValue_ {};
    bool rVCEnhancedPrkAidAttributeValue_ {};
    bool rVCTrunkStatusAttributeValue_ {};
    ::v1::com::harman::ParkAssist::ParkAssistBaseType::enDisplayIconType displayIconTypeAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace ParkAssist
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_PARKASSIST_RVC_Service_STUB_DEFAULT

/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#include <v0/com/harman/ParkAssist/RVCServiceStubDefault.hpp>
#include <assert.h>

namespace v0 {
namespace com {
namespace harman {
namespace ParkAssist {

RVCServiceStubDefault::RVCServiceStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(RVCService::getInterfaceVersion()) {
}

const CommonAPI::Version& RVCServiceStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

RVCServiceStubRemoteEvent* RVCServiceStubDefault::initStubAdapter(const std::shared_ptr<RVCServiceStubAdapter> &_adapter) {
    CommonAPI::Stub<RVCServiceStubAdapter, RVCServiceStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom& RVCServiceStubDefault::getRVCZoomOnOffAttribute() {
    return rVCZoomOnOffAttributeValue_;
}

const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom& RVCServiceStubDefault::getRVCZoomOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getRVCZoomOnOffAttribute();
}

void RVCServiceStubDefault::setRVCZoomOnOffAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom _value) {
    const bool valueChanged = trySetRVCZoomOnOffAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<RVCServiceStubAdapter, RVCServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireRVCZoomOnOffAttributeChanged(rVCZoomOnOffAttributeValue_);
    }
}

bool RVCServiceStubDefault::trySetRVCZoomOnOffAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom _value) {
    if (!validateRVCZoomOnOffAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (rVCZoomOnOffAttributeValue_ != _value);
    rVCZoomOnOffAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool RVCServiceStubDefault::validateRVCZoomOnOffAttributeRequestedValue(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom &_value) {
    (void)_value;
	return _value.validate();
}

void RVCServiceStubDefault::setRVCZoomOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom _value) {
    (void)_client;
    setRVCZoomOnOffAttribute(_value);
}

void RVCServiceStubDefault::onRemoteRVCZoomOnOffAttributeChanged() {
    // No operation in default
}

void RVCServiceStubDefault::RemoteEventHandler::onRemoteRVCZoomOnOffAttributeChanged() {
	assert(defaultStub_ !=NULL);
    defaultStub_->onRemoteRVCZoomOnOffAttributeChanged();
}

bool RVCServiceStubDefault::RemoteEventHandler::onRemoteSetRVCZoomOnOffAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom _value) {
	assert(defaultStub_ !=NULL);
    return defaultStub_->trySetRVCZoomOnOffAttribute(std::move(_value));
}

bool RVCServiceStubDefault::RemoteEventHandler::onRemoteSetRVCZoomOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom _value) {
    (void)_client;
    return onRemoteSetRVCZoomOnOffAttribute(_value);
}

const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView& RVCServiceStubDefault::getRVCSpiltViewOnOffAttribute() {
    return rVCSpiltViewOnOffAttributeValue_;
}

const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView& RVCServiceStubDefault::getRVCSpiltViewOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getRVCSpiltViewOnOffAttribute();
}

void RVCServiceStubDefault::setRVCSpiltViewOnOffAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView _value) {
    const bool valueChanged = trySetRVCSpiltViewOnOffAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<RVCServiceStubAdapter, RVCServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireRVCSpiltViewOnOffAttributeChanged(rVCSpiltViewOnOffAttributeValue_);
    }
}

bool RVCServiceStubDefault::trySetRVCSpiltViewOnOffAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView _value) {
    if (!validateRVCSpiltViewOnOffAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (rVCSpiltViewOnOffAttributeValue_ != _value);
    rVCSpiltViewOnOffAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool RVCServiceStubDefault::validateRVCSpiltViewOnOffAttributeRequestedValue(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView &_value) {
    (void)_value;
	return _value.validate();
}

void RVCServiceStubDefault::setRVCSpiltViewOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView _value) {
    (void)_client;
    setRVCSpiltViewOnOffAttribute(_value);
}

void RVCServiceStubDefault::onRemoteRVCSpiltViewOnOffAttributeChanged() {
    // No operation in default
}

void RVCServiceStubDefault::RemoteEventHandler::onRemoteRVCSpiltViewOnOffAttributeChanged() {
	assert(defaultStub_ !=NULL);
    defaultStub_->onRemoteRVCSpiltViewOnOffAttributeChanged();
}

bool RVCServiceStubDefault::RemoteEventHandler::onRemoteSetRVCSpiltViewOnOffAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView _value) {
	assert(defaultStub_ !=NULL);
    return defaultStub_->trySetRVCSpiltViewOnOffAttribute(std::move(_value));
}

bool RVCServiceStubDefault::RemoteEventHandler::onRemoteSetRVCSpiltViewOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView _value) {
    (void)_client;
    return onRemoteSetRVCSpiltViewOnOffAttribute(_value);
}

const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCStatus& RVCServiceStubDefault::getRVCDisPlayStatusAttribute() {
    return rVCDisPlayStatusAttributeValue_;
}

const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCStatus& RVCServiceStubDefault::getRVCDisPlayStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getRVCDisPlayStatusAttribute();
}

void RVCServiceStubDefault::setRVCDisPlayStatusAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCStatus _value) {
    const bool valueChanged = trySetRVCDisPlayStatusAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<RVCServiceStubAdapter, RVCServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireRVCDisPlayStatusAttributeChanged(rVCDisPlayStatusAttributeValue_);
    }
}

bool RVCServiceStubDefault::trySetRVCDisPlayStatusAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCStatus _value) {
    if (!validateRVCDisPlayStatusAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (rVCDisPlayStatusAttributeValue_ != _value);
    rVCDisPlayStatusAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool RVCServiceStubDefault::validateRVCDisPlayStatusAttributeRequestedValue(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCStatus &_value) {
    (void)_value;
	return _value.validate();
}


const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCError& RVCServiceStubDefault::getRVCErrorAttribute() {
    return rVCErrorAttributeValue_;
}

const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCError& RVCServiceStubDefault::getRVCErrorAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getRVCErrorAttribute();
}

void RVCServiceStubDefault::setRVCErrorAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCError _value) {
    const bool valueChanged = trySetRVCErrorAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<RVCServiceStubAdapter, RVCServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireRVCErrorAttributeChanged(rVCErrorAttributeValue_);
    }
}

bool RVCServiceStubDefault::trySetRVCErrorAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCError _value) {
    if (!validateRVCErrorAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (rVCErrorAttributeValue_ != _value);
    rVCErrorAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool RVCServiceStubDefault::validateRVCErrorAttributeRequestedValue(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCError &_value) {
    (void)_value;
	return _value.validate();
}


const bool& RVCServiceStubDefault::getCameraDelayOnOffAttribute() {
    return cameraDelayOnOffAttributeValue_;
}

const bool& RVCServiceStubDefault::getCameraDelayOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getCameraDelayOnOffAttribute();
}

void RVCServiceStubDefault::setCameraDelayOnOffAttribute(bool _value) {
    const bool valueChanged = trySetCameraDelayOnOffAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<RVCServiceStubAdapter, RVCServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireCameraDelayOnOffAttributeChanged(cameraDelayOnOffAttributeValue_);
    }
}

bool RVCServiceStubDefault::trySetCameraDelayOnOffAttribute(bool _value) {
    if (!validateCameraDelayOnOffAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (cameraDelayOnOffAttributeValue_ != _value);
    cameraDelayOnOffAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool RVCServiceStubDefault::validateCameraDelayOnOffAttributeRequestedValue(const bool &_value) {
    (void)_value;
	return true;
}

void RVCServiceStubDefault::setCameraDelayOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) {
    (void)_client;
    setCameraDelayOnOffAttribute(_value);
}

void RVCServiceStubDefault::onRemoteCameraDelayOnOffAttributeChanged() {
    // No operation in default
}

void RVCServiceStubDefault::RemoteEventHandler::onRemoteCameraDelayOnOffAttributeChanged() {
	assert(defaultStub_ !=NULL);
    defaultStub_->onRemoteCameraDelayOnOffAttributeChanged();
}

bool RVCServiceStubDefault::RemoteEventHandler::onRemoteSetCameraDelayOnOffAttribute(bool _value) {
	assert(defaultStub_ !=NULL);
    return defaultStub_->trySetCameraDelayOnOffAttribute(std::move(_value));
}

bool RVCServiceStubDefault::RemoteEventHandler::onRemoteSetCameraDelayOnOffAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) {
    (void)_client;
    return onRemoteSetCameraDelayOnOffAttribute(_value);
}

const bool& RVCServiceStubDefault::getRVCEnhancedPrkAidAttribute() {
    return rVCEnhancedPrkAidAttributeValue_;
}

const bool& RVCServiceStubDefault::getRVCEnhancedPrkAidAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getRVCEnhancedPrkAidAttribute();
}

void RVCServiceStubDefault::setRVCEnhancedPrkAidAttribute(bool _value) {
    const bool valueChanged = trySetRVCEnhancedPrkAidAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<RVCServiceStubAdapter, RVCServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireRVCEnhancedPrkAidAttributeChanged(rVCEnhancedPrkAidAttributeValue_);
    }
}

bool RVCServiceStubDefault::trySetRVCEnhancedPrkAidAttribute(bool _value) {
    if (!validateRVCEnhancedPrkAidAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (rVCEnhancedPrkAidAttributeValue_ != _value);
    rVCEnhancedPrkAidAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool RVCServiceStubDefault::validateRVCEnhancedPrkAidAttributeRequestedValue(const bool &_value) {
    (void)_value;
	return true;
}

void RVCServiceStubDefault::setRVCEnhancedPrkAidAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) {
    (void)_client;
    setRVCEnhancedPrkAidAttribute(_value);
}

void RVCServiceStubDefault::onRemoteRVCEnhancedPrkAidAttributeChanged() {
    // No operation in default
}

void RVCServiceStubDefault::RemoteEventHandler::onRemoteRVCEnhancedPrkAidAttributeChanged() {
	assert(defaultStub_ !=NULL);
    defaultStub_->onRemoteRVCEnhancedPrkAidAttributeChanged();
}

bool RVCServiceStubDefault::RemoteEventHandler::onRemoteSetRVCEnhancedPrkAidAttribute(bool _value) {
	assert(defaultStub_ !=NULL);
    return defaultStub_->trySetRVCEnhancedPrkAidAttribute(std::move(_value));
}

bool RVCServiceStubDefault::RemoteEventHandler::onRemoteSetRVCEnhancedPrkAidAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) {
    (void)_client;
    return onRemoteSetRVCEnhancedPrkAidAttribute(_value);
}

const bool& RVCServiceStubDefault::getRVCTrunkStatusAttribute() {
    return rVCTrunkStatusAttributeValue_;
}

const bool& RVCServiceStubDefault::getRVCTrunkStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getRVCTrunkStatusAttribute();
}

void RVCServiceStubDefault::setRVCTrunkStatusAttribute(bool _value) {
    const bool valueChanged = trySetRVCTrunkStatusAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<RVCServiceStubAdapter, RVCServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireRVCTrunkStatusAttributeChanged(rVCTrunkStatusAttributeValue_);
    }
}

bool RVCServiceStubDefault::trySetRVCTrunkStatusAttribute(bool _value) {
    if (!validateRVCTrunkStatusAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (rVCTrunkStatusAttributeValue_ != _value);
    rVCTrunkStatusAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool RVCServiceStubDefault::validateRVCTrunkStatusAttributeRequestedValue(const bool &_value) {
    (void)_value;
	return true;
}

void RVCServiceStubDefault::setRVCTrunkStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) {
    (void)_client;
    setRVCTrunkStatusAttribute(_value);
}

void RVCServiceStubDefault::onRemoteRVCTrunkStatusAttributeChanged() {
    // No operation in default
}

void RVCServiceStubDefault::RemoteEventHandler::onRemoteRVCTrunkStatusAttributeChanged() {
	assert(defaultStub_ !=NULL);
    defaultStub_->onRemoteRVCTrunkStatusAttributeChanged();
}

bool RVCServiceStubDefault::RemoteEventHandler::onRemoteSetRVCTrunkStatusAttribute(bool _value) {
	assert(defaultStub_ !=NULL);
    return defaultStub_->trySetRVCTrunkStatusAttribute(std::move(_value));
}

bool RVCServiceStubDefault::RemoteEventHandler::onRemoteSetRVCTrunkStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) {
    (void)_client;
    return onRemoteSetRVCTrunkStatusAttribute(_value);
}

const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enDisplayIconType& RVCServiceStubDefault::getDisplayIconTypeAttribute() {
    return displayIconTypeAttributeValue_;
}

const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enDisplayIconType& RVCServiceStubDefault::getDisplayIconTypeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getDisplayIconTypeAttribute();
}

void RVCServiceStubDefault::setDisplayIconTypeAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enDisplayIconType _value) {
    const bool valueChanged = trySetDisplayIconTypeAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<RVCServiceStubAdapter, RVCServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireDisplayIconTypeAttributeChanged(displayIconTypeAttributeValue_);
    }
}

bool RVCServiceStubDefault::trySetDisplayIconTypeAttribute(::v1::com::harman::ParkAssist::ParkAssistBaseType::enDisplayIconType _value) {
    if (!validateDisplayIconTypeAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (displayIconTypeAttributeValue_ != _value);
    displayIconTypeAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool RVCServiceStubDefault::validateDisplayIconTypeAttributeRequestedValue(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enDisplayIconType &_value) {
    (void)_value;
	return _value.validate();
}



void RVCServiceStubDefault::CancelRVCReq(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::ParkAssist::ParkAssistBaseType::enCancelRVC _m_eCancelRVC, CancelRVCReqReply_t _reply) {
    (void)_client;
    (void) _m_eCancelRVC;
    _reply();
}




RVCServiceStubDefault::RemoteEventHandler::RemoteEventHandler(RVCServiceStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace ParkAssist
} // namespace harman
} // namespace com
} // namespace v0

/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#include <v0/com/harman/ParkAssist/APAServiceStubDefault.hpp>
#include <assert.h>

namespace v0 {
namespace com {
namespace harman {
namespace ParkAssist {

APAServiceStubDefault::APAServiceStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(APAService::getInterfaceVersion()) {
}

const CommonAPI::Version& APAServiceStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

APAServiceStubRemoteEvent* APAServiceStubDefault::initStubAdapter(const std::shared_ptr<APAServiceStubAdapter> &_adapter) {
    CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

const ::v1::com::harman::ParkAssist::APABaseType::enAPAStatus& APAServiceStubDefault::getAPAStatusAttribute() {
    return aPAStatusAttributeValue_;
}

const ::v1::com::harman::ParkAssist::APABaseType::enAPAStatus& APAServiceStubDefault::getAPAStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getAPAStatusAttribute();
}

void APAServiceStubDefault::setAPAStatusAttribute(::v1::com::harman::ParkAssist::APABaseType::enAPAStatus _value) {
    const bool valueChanged = trySetAPAStatusAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireAPAStatusAttributeChanged(aPAStatusAttributeValue_);
    }
}

bool APAServiceStubDefault::trySetAPAStatusAttribute(::v1::com::harman::ParkAssist::APABaseType::enAPAStatus _value) {
    if (!validateAPAStatusAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (aPAStatusAttributeValue_ != _value);
    aPAStatusAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validateAPAStatusAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enAPAStatus &_value) {
    (void)_value;
	return _value.validate();
}


const ::v1::com::harman::ParkAssist::APABaseType::ListAPAavaliabilityInfo& APAServiceStubDefault::getAPAModeAvailabilityInfoAttribute() {
    return aPAModeAvailabilityInfoAttributeValue_;
}

const ::v1::com::harman::ParkAssist::APABaseType::ListAPAavaliabilityInfo& APAServiceStubDefault::getAPAModeAvailabilityInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getAPAModeAvailabilityInfoAttribute();
}

void APAServiceStubDefault::setAPAModeAvailabilityInfoAttribute(::v1::com::harman::ParkAssist::APABaseType::ListAPAavaliabilityInfo _value) {
    const bool valueChanged = trySetAPAModeAvailabilityInfoAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireAPAModeAvailabilityInfoAttributeChanged(aPAModeAvailabilityInfoAttributeValue_);
    }
}

bool APAServiceStubDefault::trySetAPAModeAvailabilityInfoAttribute(::v1::com::harman::ParkAssist::APABaseType::ListAPAavaliabilityInfo _value) {
    if (!validateAPAModeAvailabilityInfoAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (aPAModeAvailabilityInfoAttributeValue_ != _value);
    aPAModeAvailabilityInfoAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validateAPAModeAvailabilityInfoAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::ListAPAavaliabilityInfo &_value) {
    (void)_value;
	return true;
}


const ::v1::com::harman::ParkAssist::APABaseType::APAViewType& APAServiceStubDefault::getObjApaViewTypeAttribute() {
    return objApaViewTypeAttributeValue_;
}

const ::v1::com::harman::ParkAssist::APABaseType::APAViewType& APAServiceStubDefault::getObjApaViewTypeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getObjApaViewTypeAttribute();
}

void APAServiceStubDefault::setObjApaViewTypeAttribute(::v1::com::harman::ParkAssist::APABaseType::APAViewType _value) {
    const bool valueChanged = trySetObjApaViewTypeAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireObjApaViewTypeAttributeChanged(objApaViewTypeAttributeValue_);
    }
}

bool APAServiceStubDefault::trySetObjApaViewTypeAttribute(::v1::com::harman::ParkAssist::APABaseType::APAViewType _value) {
    if (!validateObjApaViewTypeAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (objApaViewTypeAttributeValue_ != _value);
    objApaViewTypeAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validateObjApaViewTypeAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::APAViewType &_value) {
    (void)_value;
	return true;
}


const ::v1::com::harman::ParkAssist::APABaseType::enAPAMode& APAServiceStubDefault::getCurrentApaActiveModeAttribute() {
    return currentApaActiveModeAttributeValue_;
}

const ::v1::com::harman::ParkAssist::APABaseType::enAPAMode& APAServiceStubDefault::getCurrentApaActiveModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getCurrentApaActiveModeAttribute();
}

void APAServiceStubDefault::setCurrentApaActiveModeAttribute(::v1::com::harman::ParkAssist::APABaseType::enAPAMode _value) {
    const bool valueChanged = trySetCurrentApaActiveModeAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireCurrentApaActiveModeAttributeChanged(currentApaActiveModeAttributeValue_);
    }
}

bool APAServiceStubDefault::trySetCurrentApaActiveModeAttribute(::v1::com::harman::ParkAssist::APABaseType::enAPAMode _value) {
    if (!validateCurrentApaActiveModeAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (currentApaActiveModeAttributeValue_ != _value);
    currentApaActiveModeAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validateCurrentApaActiveModeAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enAPAMode &_value) {
    (void)_value;
	return _value.validate();
}


const ::v1::com::harman::ParkAssist::APABaseType::enPositionalScanLeftRightStatus& APAServiceStubDefault::getScanLeftRightStatusAttribute() {
    return scanLeftRightStatusAttributeValue_;
}

const ::v1::com::harman::ParkAssist::APABaseType::enPositionalScanLeftRightStatus& APAServiceStubDefault::getScanLeftRightStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getScanLeftRightStatusAttribute();
}

void APAServiceStubDefault::setScanLeftRightStatusAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalScanLeftRightStatus _value) {
    const bool valueChanged = trySetScanLeftRightStatusAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireScanLeftRightStatusAttributeChanged(scanLeftRightStatusAttributeValue_);
    }
}

bool APAServiceStubDefault::trySetScanLeftRightStatusAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalScanLeftRightStatus _value) {
    if (!validateScanLeftRightStatusAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (scanLeftRightStatusAttributeValue_ != _value);
    scanLeftRightStatusAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validateScanLeftRightStatusAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalScanLeftRightStatus &_value) {
    (void)_value;
	return _value.validate();
}


const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol1Info& APAServiceStubDefault::getPositionalSymbol1StatusAttribute() {
    return positionalSymbol1StatusAttributeValue_;
}

const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol1Info& APAServiceStubDefault::getPositionalSymbol1StatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getPositionalSymbol1StatusAttribute();
}

void APAServiceStubDefault::setPositionalSymbol1StatusAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol1Info _value) {
    const bool valueChanged = trySetPositionalSymbol1StatusAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->firePositionalSymbol1StatusAttributeChanged(positionalSymbol1StatusAttributeValue_);
    }
}

bool APAServiceStubDefault::trySetPositionalSymbol1StatusAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol1Info _value) {
    if (!validatePositionalSymbol1StatusAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (positionalSymbol1StatusAttributeValue_ != _value);
    positionalSymbol1StatusAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validatePositionalSymbol1StatusAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol1Info &_value) {
    (void)_value;
	return _value.validate();
}


const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol2Info& APAServiceStubDefault::getPositionalSymbol2StatusAttribute() {
    return positionalSymbol2StatusAttributeValue_;
}

const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol2Info& APAServiceStubDefault::getPositionalSymbol2StatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getPositionalSymbol2StatusAttribute();
}

void APAServiceStubDefault::setPositionalSymbol2StatusAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol2Info _value) {
    const bool valueChanged = trySetPositionalSymbol2StatusAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->firePositionalSymbol2StatusAttributeChanged(positionalSymbol2StatusAttributeValue_);
    }
}

bool APAServiceStubDefault::trySetPositionalSymbol2StatusAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol2Info _value) {
    if (!validatePositionalSymbol2StatusAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (positionalSymbol2StatusAttributeValue_ != _value);
    positionalSymbol2StatusAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validatePositionalSymbol2StatusAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol2Info &_value) {
    (void)_value;
	return _value.validate();
}


const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText1& APAServiceStubDefault::getPositionalText1Attribute() {
    return positionalText1AttributeValue_;
}

const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText1& APAServiceStubDefault::getPositionalText1Attribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getPositionalText1Attribute();
}

void APAServiceStubDefault::setPositionalText1Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalText1 _value) {
    const bool valueChanged = trySetPositionalText1Attribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->firePositionalText1AttributeChanged(positionalText1AttributeValue_);
    }
}

bool APAServiceStubDefault::trySetPositionalText1Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalText1 _value) {
    if (!validatePositionalText1AttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (positionalText1AttributeValue_ != _value);
    positionalText1AttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validatePositionalText1AttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText1 &_value) {
    (void)_value;
	return _value.validate();
}


const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText2& APAServiceStubDefault::getPositionalText2Attribute() {
    return positionalText2AttributeValue_;
}

const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText2& APAServiceStubDefault::getPositionalText2Attribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getPositionalText2Attribute();
}

void APAServiceStubDefault::setPositionalText2Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalText2 _value) {
    const bool valueChanged = trySetPositionalText2Attribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->firePositionalText2AttributeChanged(positionalText2AttributeValue_);
    }
}

bool APAServiceStubDefault::trySetPositionalText2Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalText2 _value) {
    if (!validatePositionalText2AttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (positionalText2AttributeValue_ != _value);
    positionalText2AttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validatePositionalText2AttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText2 &_value) {
    (void)_value;
	return _value.validate();
}


const bool& APAServiceStubDefault::getPositionalCarLeftAttribute() {
    return positionalCarLeftAttributeValue_;
}

const bool& APAServiceStubDefault::getPositionalCarLeftAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getPositionalCarLeftAttribute();
}

void APAServiceStubDefault::setPositionalCarLeftAttribute(bool _value) {
    const bool valueChanged = trySetPositionalCarLeftAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->firePositionalCarLeftAttributeChanged(positionalCarLeftAttributeValue_);
    }
}

bool APAServiceStubDefault::trySetPositionalCarLeftAttribute(bool _value) {
    if (!validatePositionalCarLeftAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (positionalCarLeftAttributeValue_ != _value);
    positionalCarLeftAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validatePositionalCarLeftAttributeRequestedValue(const bool &_value) {
    (void)_value;
	return true;
}


const bool& APAServiceStubDefault::getPositionalCarRightAttribute() {
    return positionalCarRightAttributeValue_;
}

const bool& APAServiceStubDefault::getPositionalCarRightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getPositionalCarRightAttribute();
}

void APAServiceStubDefault::setPositionalCarRightAttribute(bool _value) {
    const bool valueChanged = trySetPositionalCarRightAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->firePositionalCarRightAttributeChanged(positionalCarRightAttributeValue_);
    }
}

bool APAServiceStubDefault::trySetPositionalCarRightAttribute(bool _value) {
    if (!validatePositionalCarRightAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (positionalCarRightAttributeValue_ != _value);
    positionalCarRightAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validatePositionalCarRightAttributeRequestedValue(const bool &_value) {
    (void)_value;
	return true;
}


const bool& APAServiceStubDefault::getPositionalCarPOAAttribute() {
    return positionalCarPOAAttributeValue_;
}

const bool& APAServiceStubDefault::getPositionalCarPOAAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getPositionalCarPOAAttribute();
}

void APAServiceStubDefault::setPositionalCarPOAAttribute(bool _value) {
    const bool valueChanged = trySetPositionalCarPOAAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->firePositionalCarPOAAttributeChanged(positionalCarPOAAttributeValue_);
    }
}

bool APAServiceStubDefault::trySetPositionalCarPOAAttribute(bool _value) {
    if (!validatePositionalCarPOAAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (positionalCarPOAAttributeValue_ != _value);
    positionalCarPOAAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validatePositionalCarPOAAttributeRequestedValue(const bool &_value) {
    (void)_value;
	return true;
}


const ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioLeft& APAServiceStubDefault::getParkScenarioLeftAttribute() {
    return parkScenarioLeftAttributeValue_;
}

const ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioLeft& APAServiceStubDefault::getParkScenarioLeftAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getParkScenarioLeftAttribute();
}

void APAServiceStubDefault::setParkScenarioLeftAttribute(::v1::com::harman::ParkAssist::APABaseType::enParkScenarioLeft _value) {
    const bool valueChanged = trySetParkScenarioLeftAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireParkScenarioLeftAttributeChanged(parkScenarioLeftAttributeValue_);
    }
}

bool APAServiceStubDefault::trySetParkScenarioLeftAttribute(::v1::com::harman::ParkAssist::APABaseType::enParkScenarioLeft _value) {
    if (!validateParkScenarioLeftAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (parkScenarioLeftAttributeValue_ != _value);
    parkScenarioLeftAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validateParkScenarioLeftAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioLeft &_value) {
    (void)_value;
	return _value.validate();
}


const ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioRight& APAServiceStubDefault::getParkScenarioRightAttribute() {
    return parkScenarioRightAttributeValue_;
}

const ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioRight& APAServiceStubDefault::getParkScenarioRightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getParkScenarioRightAttribute();
}

void APAServiceStubDefault::setParkScenarioRightAttribute(::v1::com::harman::ParkAssist::APABaseType::enParkScenarioRight _value) {
    const bool valueChanged = trySetParkScenarioRightAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireParkScenarioRightAttributeChanged(parkScenarioRightAttributeValue_);
    }
}

bool APAServiceStubDefault::trySetParkScenarioRightAttribute(::v1::com::harman::ParkAssist::APABaseType::enParkScenarioRight _value) {
    if (!validateParkScenarioRightAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (parkScenarioRightAttributeValue_ != _value);
    parkScenarioRightAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validateParkScenarioRightAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioRight &_value) {
    (void)_value;
	return _value.validate();
}


const bool& APAServiceStubDefault::getParkScenarioPOAAttribute() {
    return parkScenarioPOAAttributeValue_;
}

const bool& APAServiceStubDefault::getParkScenarioPOAAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getParkScenarioPOAAttribute();
}

void APAServiceStubDefault::setParkScenarioPOAAttribute(bool _value) {
    const bool valueChanged = trySetParkScenarioPOAAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireParkScenarioPOAAttributeChanged(parkScenarioPOAAttributeValue_);
    }
}

bool APAServiceStubDefault::trySetParkScenarioPOAAttribute(bool _value) {
    if (!validateParkScenarioPOAAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (parkScenarioPOAAttributeValue_ != _value);
    parkScenarioPOAAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validateParkScenarioPOAAttributeRequestedValue(const bool &_value) {
    (void)_value;
	return true;
}


const bool& APAServiceStubDefault::getCarNonRVCSacAttribute() {
    return carNonRVCSacAttributeValue_;
}

const bool& APAServiceStubDefault::getCarNonRVCSacAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getCarNonRVCSacAttribute();
}

void APAServiceStubDefault::setCarNonRVCSacAttribute(bool _value) {
    const bool valueChanged = trySetCarNonRVCSacAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireCarNonRVCSacAttributeChanged(carNonRVCSacAttributeValue_);
    }
}

bool APAServiceStubDefault::trySetCarNonRVCSacAttribute(bool _value) {
    if (!validateCarNonRVCSacAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (carNonRVCSacAttributeValue_ != _value);
    carNonRVCSacAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validateCarNonRVCSacAttributeRequestedValue(const bool &_value) {
    (void)_value;
	return true;
}


const bool& APAServiceStubDefault::getAPAErrorStatusAttribute() {
    return aPAErrorStatusAttributeValue_;
}

const bool& APAServiceStubDefault::getAPAErrorStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getAPAErrorStatusAttribute();
}

void APAServiceStubDefault::setAPAErrorStatusAttribute(bool _value) {
    const bool valueChanged = trySetAPAErrorStatusAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireAPAErrorStatusAttributeChanged(aPAErrorStatusAttributeValue_);
    }
}

bool APAServiceStubDefault::trySetAPAErrorStatusAttribute(bool _value) {
    if (!validateAPAErrorStatusAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (aPAErrorStatusAttributeValue_ != _value);
    aPAErrorStatusAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validateAPAErrorStatusAttributeRequestedValue(const bool &_value) {
    (void)_value;
	return true;
}


const ::v1::com::harman::ParkAssist::APABaseType::enParkInArrow& APAServiceStubDefault::getParkInArrowAttribute() {
    return parkInArrowAttributeValue_;
}

const ::v1::com::harman::ParkAssist::APABaseType::enParkInArrow& APAServiceStubDefault::getParkInArrowAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getParkInArrowAttribute();
}

void APAServiceStubDefault::setParkInArrowAttribute(::v1::com::harman::ParkAssist::APABaseType::enParkInArrow _value) {
    const bool valueChanged = trySetParkInArrowAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireParkInArrowAttributeChanged(parkInArrowAttributeValue_);
    }
}

bool APAServiceStubDefault::trySetParkInArrowAttribute(::v1::com::harman::ParkAssist::APABaseType::enParkInArrow _value) {
    if (!validateParkInArrowAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (parkInArrowAttributeValue_ != _value);
    parkInArrowAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validateParkInArrowAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enParkInArrow &_value) {
    (void)_value;
	return _value.validate();
}


const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeft& APAServiceStubDefault::getPositionalPOALeftAttribute() {
    return positionalPOALeftAttributeValue_;
}

const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeft& APAServiceStubDefault::getPositionalPOALeftAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getPositionalPOALeftAttribute();
}

void APAServiceStubDefault::setPositionalPOALeftAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeft _value) {
    const bool valueChanged = trySetPositionalPOALeftAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->firePositionalPOALeftAttributeChanged(positionalPOALeftAttributeValue_);
    }
}

bool APAServiceStubDefault::trySetPositionalPOALeftAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeft _value) {
    if (!validatePositionalPOALeftAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (positionalPOALeftAttributeValue_ != _value);
    positionalPOALeftAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validatePositionalPOALeftAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeft &_value) {
    (void)_value;
	return _value.validate();
}


const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARight& APAServiceStubDefault::getPositionalPOARightAttribute() {
    return positionalPOARightAttributeValue_;
}

const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARight& APAServiceStubDefault::getPositionalPOARightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getPositionalPOARightAttribute();
}

void APAServiceStubDefault::setPositionalPOARightAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARight _value) {
    const bool valueChanged = trySetPositionalPOARightAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->firePositionalPOARightAttributeChanged(positionalPOARightAttributeValue_);
    }
}

bool APAServiceStubDefault::trySetPositionalPOARightAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARight _value) {
    if (!validatePositionalPOARightAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (positionalPOARightAttributeValue_ != _value);
    positionalPOARightAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validatePositionalPOARightAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARight &_value) {
    (void)_value;
	return _value.validate();
}


const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARightSelected& APAServiceStubDefault::getPositionalPOARightSelectedAttribute() {
    return positionalPOARightSelectedAttributeValue_;
}

const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARightSelected& APAServiceStubDefault::getPositionalPOARightSelectedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getPositionalPOARightSelectedAttribute();
}

void APAServiceStubDefault::setPositionalPOARightSelectedAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARightSelected _value) {
    const bool valueChanged = trySetPositionalPOARightSelectedAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->firePositionalPOARightSelectedAttributeChanged(positionalPOARightSelectedAttributeValue_);
    }
}

bool APAServiceStubDefault::trySetPositionalPOARightSelectedAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARightSelected _value) {
    if (!validatePositionalPOARightSelectedAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (positionalPOARightSelectedAttributeValue_ != _value);
    positionalPOARightSelectedAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validatePositionalPOARightSelectedAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARightSelected &_value) {
    (void)_value;
	return _value.validate();
}


const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeftSelected& APAServiceStubDefault::getPositionalPOALeftSelectedAttribute() {
    return positionalPOALeftSelectedAttributeValue_;
}

const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeftSelected& APAServiceStubDefault::getPositionalPOALeftSelectedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getPositionalPOALeftSelectedAttribute();
}

void APAServiceStubDefault::setPositionalPOALeftSelectedAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeftSelected _value) {
    const bool valueChanged = trySetPositionalPOALeftSelectedAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->firePositionalPOALeftSelectedAttributeChanged(positionalPOALeftSelectedAttributeValue_);
    }
}

bool APAServiceStubDefault::trySetPositionalPOALeftSelectedAttribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeftSelected _value) {
    if (!validatePositionalPOALeftSelectedAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (positionalPOALeftSelectedAttributeValue_ != _value);
    positionalPOALeftSelectedAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validatePositionalPOALeftSelectedAttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeftSelected &_value) {
    (void)_value;
	return _value.validate();
}


const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol3& APAServiceStubDefault::getPositionalSymbol3Attribute() {
    return positionalSymbol3AttributeValue_;
}

const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol3& APAServiceStubDefault::getPositionalSymbol3Attribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getPositionalSymbol3Attribute();
}

void APAServiceStubDefault::setPositionalSymbol3Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol3 _value) {
    const bool valueChanged = trySetPositionalSymbol3Attribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->firePositionalSymbol3AttributeChanged(positionalSymbol3AttributeValue_);
    }
}

bool APAServiceStubDefault::trySetPositionalSymbol3Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol3 _value) {
    if (!validatePositionalSymbol3AttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (positionalSymbol3AttributeValue_ != _value);
    positionalSymbol3AttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validatePositionalSymbol3AttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol3 &_value) {
    (void)_value;
	return _value.validate();
}


const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol4& APAServiceStubDefault::getPositionalSymbol4Attribute() {
    return positionalSymbol4AttributeValue_;
}

const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol4& APAServiceStubDefault::getPositionalSymbol4Attribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getPositionalSymbol4Attribute();
}

void APAServiceStubDefault::setPositionalSymbol4Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol4 _value) {
    const bool valueChanged = trySetPositionalSymbol4Attribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->firePositionalSymbol4AttributeChanged(positionalSymbol4AttributeValue_);
    }
}

bool APAServiceStubDefault::trySetPositionalSymbol4Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol4 _value) {
    if (!validatePositionalSymbol4AttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (positionalSymbol4AttributeValue_ != _value);
    positionalSymbol4AttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validatePositionalSymbol4AttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol4 &_value) {
    (void)_value;
	return _value.validate();
}


const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText3& APAServiceStubDefault::getPositionalText3Attribute() {
    return positionalText3AttributeValue_;
}

const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText3& APAServiceStubDefault::getPositionalText3Attribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getPositionalText3Attribute();
}

void APAServiceStubDefault::setPositionalText3Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalText3 _value) {
    const bool valueChanged = trySetPositionalText3Attribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->firePositionalText3AttributeChanged(positionalText3AttributeValue_);
    }
}

bool APAServiceStubDefault::trySetPositionalText3Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalText3 _value) {
    if (!validatePositionalText3AttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (positionalText3AttributeValue_ != _value);
    positionalText3AttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validatePositionalText3AttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText3 &_value) {
    (void)_value;
	return _value.validate();
}


const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText4& APAServiceStubDefault::getPositionalText4Attribute() {
    return positionalText4AttributeValue_;
}

const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText4& APAServiceStubDefault::getPositionalText4Attribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getPositionalText4Attribute();
}

void APAServiceStubDefault::setPositionalText4Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalText4 _value) {
    const bool valueChanged = trySetPositionalText4Attribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->firePositionalText4AttributeChanged(positionalText4AttributeValue_);
    }
}

bool APAServiceStubDefault::trySetPositionalText4Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalText4 _value) {
    if (!validatePositionalText4AttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (positionalText4AttributeValue_ != _value);
    positionalText4AttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validatePositionalText4AttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText4 &_value) {
    (void)_value;
	return _value.validate();
}


const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText5& APAServiceStubDefault::getPositionalText5Attribute() {
    return positionalText5AttributeValue_;
}

const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText5& APAServiceStubDefault::getPositionalText5Attribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getPositionalText5Attribute();
}

void APAServiceStubDefault::setPositionalText5Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalText5 _value) {
    const bool valueChanged = trySetPositionalText5Attribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->firePositionalText5AttributeChanged(positionalText5AttributeValue_);
    }
}

bool APAServiceStubDefault::trySetPositionalText5Attribute(::v1::com::harman::ParkAssist::APABaseType::enPositionalText5 _value) {
    if (!validatePositionalText5AttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (positionalText5AttributeValue_ != _value);
    positionalText5AttributeValue_ = std::move(_value);
    return valueChanged;
}

bool APAServiceStubDefault::validatePositionalText5AttributeRequestedValue(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText5 &_value) {
    (void)_value;
	return _value.validate();
}



void APAServiceStubDefault::SelectApaMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::ParkAssist::APABaseType::enAPAMode _m_eAPAMode, SelectApaModeReply_t _reply) {
    (void)_client;
    (void) _m_eAPAMode;
    _reply();
}




APAServiceStubDefault::RemoteEventHandler::RemoteEventHandler(APAServiceStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace ParkAssist
} // namespace harman
} // namespace com
} // namespace v0

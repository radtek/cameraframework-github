/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_COM_HARMAN_PARKASSIST_APA_Service_STUB_HPP_
#define V0_COM_HARMAN_PARKASSIST_APA_Service_STUB_HPP_

#include <functional>



#include <v1/com/harman/ParkAssist/APABaseType.hpp>

#include <v0/com/harman/ParkAssist/APAService.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace ParkAssist {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service APAService. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class APAServiceStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual APAService {
 public:
    ///Notifies all remote listeners about a change of value of the attribute APAStatus.
    virtual void fireAPAStatusAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enAPAStatus& APAStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute APAModeAvailabilityInfo.
    virtual void fireAPAModeAvailabilityInfoAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::ListAPAavaliabilityInfo& APAModeAvailabilityInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute ObjApaViewType.
    virtual void fireObjApaViewTypeAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::APAViewType& ObjApaViewType) = 0;
    ///Notifies all remote listeners about a change of value of the attribute CurrentApaActiveMode.
    virtual void fireCurrentApaActiveModeAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enAPAMode& CurrentApaActiveMode) = 0;
    ///Notifies all remote listeners about a change of value of the attribute ScanLeftRightStatus.
    virtual void fireScanLeftRightStatusAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalScanLeftRightStatus& ScanLeftRightStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute PositionalSymbol1Status.
    virtual void firePositionalSymbol1StatusAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol1Info& PositionalSymbol1Status) = 0;
    ///Notifies all remote listeners about a change of value of the attribute PositionalSymbol2Status.
    virtual void firePositionalSymbol2StatusAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol2Info& PositionalSymbol2Status) = 0;
    ///Notifies all remote listeners about a change of value of the attribute PositionalText1.
    virtual void firePositionalText1AttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText1& PositionalText1) = 0;
    ///Notifies all remote listeners about a change of value of the attribute PositionalText2.
    virtual void firePositionalText2AttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText2& PositionalText2) = 0;
    ///Notifies all remote listeners about a change of value of the attribute PositionalCarLeft.
    virtual void firePositionalCarLeftAttributeChanged(const bool& PositionalCarLeft) = 0;
    ///Notifies all remote listeners about a change of value of the attribute PositionalCarRight.
    virtual void firePositionalCarRightAttributeChanged(const bool& PositionalCarRight) = 0;
    ///Notifies all remote listeners about a change of value of the attribute PositionalCarPOA.
    virtual void firePositionalCarPOAAttributeChanged(const bool& PositionalCarPOA) = 0;
    ///Notifies all remote listeners about a change of value of the attribute ParkScenarioLeft.
    virtual void fireParkScenarioLeftAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioLeft& ParkScenarioLeft) = 0;
    ///Notifies all remote listeners about a change of value of the attribute ParkScenarioRight.
    virtual void fireParkScenarioRightAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioRight& ParkScenarioRight) = 0;
    ///Notifies all remote listeners about a change of value of the attribute ParkScenarioPOA.
    virtual void fireParkScenarioPOAAttributeChanged(const bool& ParkScenarioPOA) = 0;
    ///Notifies all remote listeners about a change of value of the attribute CarNonRVCSac.
    virtual void fireCarNonRVCSacAttributeChanged(const bool& CarNonRVCSac) = 0;
    ///Notifies all remote listeners about a change of value of the attribute APAErrorStatus.
    virtual void fireAPAErrorStatusAttributeChanged(const bool& APAErrorStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute ParkInArrow.
    virtual void fireParkInArrowAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enParkInArrow& ParkInArrow) = 0;
    ///Notifies all remote listeners about a change of value of the attribute PositionalPOALeft.
    virtual void firePositionalPOALeftAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeft& PositionalPOALeft) = 0;
    ///Notifies all remote listeners about a change of value of the attribute PositionalPOARight.
    virtual void firePositionalPOARightAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARight& PositionalPOARight) = 0;
    ///Notifies all remote listeners about a change of value of the attribute PositionalPOARightSelected.
    virtual void firePositionalPOARightSelectedAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARightSelected& PositionalPOARightSelected) = 0;
    ///Notifies all remote listeners about a change of value of the attribute PositionalPOALeftSelected.
    virtual void firePositionalPOALeftSelectedAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeftSelected& PositionalPOALeftSelected) = 0;
    ///Notifies all remote listeners about a change of value of the attribute PositionalSymbol3.
    virtual void firePositionalSymbol3AttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol3& PositionalSymbol3) = 0;
    ///Notifies all remote listeners about a change of value of the attribute PositionalSymbol4.
    virtual void firePositionalSymbol4AttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol4& PositionalSymbol4) = 0;
    ///Notifies all remote listeners about a change of value of the attribute PositionalText3.
    virtual void firePositionalText3AttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText3& PositionalText3) = 0;
    ///Notifies all remote listeners about a change of value of the attribute PositionalText4.
    virtual void firePositionalText4AttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText4& PositionalText4) = 0;
    ///Notifies all remote listeners about a change of value of the attribute PositionalText5.
    virtual void firePositionalText5AttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText5& PositionalText5) = 0;



    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for APAService.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class APAServiceStubRemoteEvent
{
public:
    virtual ~APAServiceStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service APAService to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class APAServiceStub
    : public virtual CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>
{
public:
    typedef std::function<void ()>SelectApaModeReply_t;

    virtual ~APAServiceStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /// Provides getter access to the attribute APAStatus
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enAPAStatus &getAPAStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute APAModeAvailabilityInfo
    virtual const ::v1::com::harman::ParkAssist::APABaseType::ListAPAavaliabilityInfo &getAPAModeAvailabilityInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute ObjApaViewType
    virtual const ::v1::com::harman::ParkAssist::APABaseType::APAViewType &getObjApaViewTypeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute CurrentApaActiveMode
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enAPAMode &getCurrentApaActiveModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute ScanLeftRightStatus
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalScanLeftRightStatus &getScanLeftRightStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute PositionalSymbol1Status
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol1Info &getPositionalSymbol1StatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute PositionalSymbol2Status
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol2Info &getPositionalSymbol2StatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute PositionalText1
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText1 &getPositionalText1Attribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute PositionalText2
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText2 &getPositionalText2Attribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute PositionalCarLeft
    virtual const bool &getPositionalCarLeftAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute PositionalCarRight
    virtual const bool &getPositionalCarRightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute PositionalCarPOA
    virtual const bool &getPositionalCarPOAAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute ParkScenarioLeft
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioLeft &getParkScenarioLeftAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute ParkScenarioRight
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioRight &getParkScenarioRightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute ParkScenarioPOA
    virtual const bool &getParkScenarioPOAAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute CarNonRVCSac
    virtual const bool &getCarNonRVCSacAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute APAErrorStatus
    virtual const bool &getAPAErrorStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute ParkInArrow
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enParkInArrow &getParkInArrowAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute PositionalPOALeft
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeft &getPositionalPOALeftAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute PositionalPOARight
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARight &getPositionalPOARightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute PositionalPOARightSelected
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARightSelected &getPositionalPOARightSelectedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute PositionalPOALeftSelected
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeftSelected &getPositionalPOALeftSelectedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute PositionalSymbol3
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol3 &getPositionalSymbol3Attribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute PositionalSymbol4
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol4 &getPositionalSymbol4Attribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute PositionalText3
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText3 &getPositionalText3Attribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute PositionalText4
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText4 &getPositionalText4Attribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute PositionalText5
    virtual const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText5 &getPositionalText5Attribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /// This is the method that will be called on remote calls on the method SelectApaMode.
    virtual void SelectApaMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::ParkAssist::APABaseType::enAPAMode _m_eAPAMode, SelectApaModeReply_t _reply) = 0;

    using CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<APAServiceStubAdapter, APAServiceStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef APAServiceStubRemoteEvent RemoteEventType;
    typedef APAService StubInterface;
};

} // namespace ParkAssist
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_PARKASSIST_APA_Service_STUB_HPP_

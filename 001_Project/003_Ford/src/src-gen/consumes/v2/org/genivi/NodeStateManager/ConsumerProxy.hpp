/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V2_ORG_GENIVI_NODESTATEMANAGER_Consumer_PROXY_HPP_
#define V2_ORG_GENIVI_NODESTATEMANAGER_Consumer_PROXY_HPP_

#include <v2/org/genivi/NodeStateManager/ConsumerProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v2 {
namespace org {
namespace genivi {
namespace NodeStateManager {

template <typename ... _AttributeExtensions>
class ConsumerProxy
    : virtual public Consumer, 
      virtual public ConsumerProxyBase,
      virtual public _AttributeExtensions... {
public:
    ConsumerProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~ConsumerProxy();

    typedef Consumer InterfaceType;


    /**
     * description: RestartReason: This property informs clients about the reason for the last
     *   restart. The values are based upon the enummeration NsmRestartReason_e. Note:
     *   The value is only set once at start-up.
     */
    /**
     * Returns the wrapper class that provides access to the attribute RestartReason.
     */
    virtual RestartReasonAttribute& getRestartReasonAttribute() {
        return delegate_->getRestartReasonAttribute();
    }
    /**
     * description: ShutdownReason: This property informs clients about the reason for the last
     *   shutdown. The values are based upon the enummeration NsmShutdownReason_e.
     *   Note: The value is only set once at start-up.
     */
    /**
     * Returns the wrapper class that provides access to the attribute ShutdownReason.
     */
    virtual ShutdownReasonAttribute& getShutdownReasonAttribute() {
        return delegate_->getShutdownReasonAttribute();
    }
    /**
     * description: WakeUpReason: This property informs clients about the recent reason for waking
     *   up the target. The values are based upon the enummeration NsmWakeUpReason_e.
     *   Note: The value is only set once at start-up.
     */
    /**
     * Returns the wrapper class that provides access to the attribute WakeUpReason.
     */
    virtual WakeUpReasonAttribute& getWakeUpReasonAttribute() {
        return delegate_->getWakeUpReasonAttribute();
    }
    /**
     * description: BootMode: This property informs clients about the recent BootMode of the
     *   target. The values will be defined by a third party header, which has not been
     *   delivered yet. The description needs to be updated as soon as the header is
     *   available.
     */
    /**
     * Returns the wrapper class that provides access to the attribute BootMode.
     */
    virtual BootModeAttribute& getBootModeAttribute() {
        return delegate_->getBootModeAttribute();
    }
    /**
     * description: VehiclePowerMode: This property informs clients about the current PowerMode of
     *   the target. The values will be updates as soon as the power master changes the
     *   state. 	   basic PowerMode States are
     *   ACTIVE,STANDBY,SLEEP,SHUTDOWN,ENTERTAINMENT_MODE
     */
    /**
     * Returns the wrapper class that provides access to the attribute VehiclePowerMode.
     */
    virtual VehiclePowerModeAttribute& getVehiclePowerModeAttribute() {
        return delegate_->getVehiclePowerModeAttribute();
    }

    /**
     * description: NodeState: 	   NodeState: Numeric value for the current NodeState, defined in
     *   NsmNodeState_e.  	   Clients can register for notifications when the NodeState
     *   is updated inside the NodeStateManager. This signal is sent to registered
     *   clients and will include the current NodeState as a parameter.
     * author: Giridhar
     */
    /**
     * Returns the wrapper class that provides access to the broadcast NodeState.
     */
    virtual NodeStateEvent& getNodeStateEvent() {
        return delegate_->getNodeStateEvent();
    }
    /**
     * description: NodeApplicationMode: 	   ApplicationModeId: Numeric value for the current
     *   ApplicationMode, defined in NsmAplicationMode_e.  	   Clients can register for
     *   notifications when the NodeApplicationMode is updated inside the
     *   NodeStateManager. This signal is sent to registered clients and will include
     *   the current NodeApplicationMode as a parameter.
     * author: Giridhar
     */
    /**
     * Returns the wrapper class that provides access to the broadcast NodeApplicationMode.
     */
    virtual NodeApplicationModeEvent& getNodeApplicationModeEvent() {
        return delegate_->getNodeApplicationModeEvent();
    }
    /**
     * description: SessionStateChanged:     	SessionStateName: The SessionName will be based upon
     *   either the pre-defined platform SessionNames or using a newly added product
     *   defined session name.     	SeatID:           This parameter will be based upon
     *   the enum NsmSeat_e.     	SessionState:     This parameter will be based upon
     *   the NsmSessionState_e but it will not be bounded by the values in that
     *   enumeration. The listed values are the default values that are mandatory for
     *   platform sessions, but product sessions may have additional session states.   
     *         	This signal is sent to registered clients when a particular session is
     *   state is changed. The client can register for notification about a specific
     *   session through the use of the SessionName, as a "match rule".
     * author: Giridhar
     */
    /**
     * Returns the wrapper class that provides access to the broadcast SessionStateChanged.
     */
    virtual SessionStateChangedEvent& getSessionStateChangedEvent() {
        return delegate_->getSessionStateChangedEvent();
    }
    /**
     * description: ShutdownEvent:     	Request: Shutdown mode on which client will be informed
     *   (NSM_SHUTDOWNTYPE_NORMAL, NSM_SHUTDOWNTYPE_FAST).          	Selective
     *   broadcast of shutdown request to registered clients     	This signal is sent
     *   to registered clients when shutdown state is received 		Note:LifeCycleRequest
     *   signal renamed to ShutdownEvent and RequestID is removed
     * author: Giridhar
     */
    /**
     * Returns the wrapper class that provides access to the broadcast ShutdownEvent.
     */
    virtual ShutdownEventSelectiveEvent& getShutdownEventSelectiveEvent() {
        return delegate_->getShutdownEventSelectiveEvent();
    }

    /**
     * description: GetNodeState:     	NodeStateId: Will be based on the NsmNodeState_e.    
     *   	ErrorCode:   Return value passed to the caller, based upon NsmErrorStatus_e. 
     *      	The method is used by other applications to get the NodeState without the
     *   need of registration to the signal.
     * author: Giridhar
     * Calls GetNodeState with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetNodeState(CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmNodeState &_NodeStateId, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetNodeState with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetNodeStateAsync(GetNodeStateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: SetSessionState:     	SessionName:  The SessionName will be based upon either
     *   the pre-defined platform SessionNames (see NSM content page) or using a newly
     *   added product defined session name.     	SessionOwner: This parameter defines
     *   the name of the application that is setting the state of the session. This
     *   must be the applications systemd unit filename.     	SeatID:       This
     *   parameter will be based upon the enum NsmSeat_e     	SessionState: This
     *   parameter will be based upon the NsmSessionState_e but it will not be bounded
     *   by the values in that enumeration. The listed values are the default values
     *   that are mandatory for platform sessions, but product sessions may have
     *   additional SessionStates.     	ErrorCode:    Return value passed to the
     *   caller, based upon NsmErrorStatus_e.          	The method is used by
     *   applications to set the state of a session.
     * author: Giridhar
     * Calls SetSessionState with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SetSessionState(const std::string &_SessionName, const std::string &_SessionOwner, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState &_SessionState, CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SetSessionState with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SetSessionStateAsync(const std::string &_SessionName, const std::string &_SessionOwner, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState &_SessionState, SetSessionStateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: GetSessionState:     	SessionName:  The SessionName will be based upon either
     *   the pre-defined platform session names (see NSM content page) or using a newly
     *   added product defined SessionName.     	SeatID:       This parameter will be
     *   based upon the enum NsmSeat_e.     	SessionState: This parameter will be based
     *   upon the NsmSessionState_e but it will not be bounded by the values in that
     *   enumeration. The listed values are the default values that are mandatory for
     *   platform sessions, but product sessions may have additional SessionStates.    
     *   	ErrorCode:    Return value passed to the caller, based upon NsmErrorStatus_e.
     *            	The method is used by applications to get the state of a session.
     * author: Giridhar
     * Calls GetSessionState with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetSessionState(const std::string &_SessionName, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState &_SessionState, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetSessionState with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetSessionStateAsync(const std::string &_SessionName, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, GetSessionStateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: GetApplicationMode: 			ApplicationModeId: This parameter will be based upon the
     *   NsmNodeApplicationMode_e. 			ErrorCode:         Return value passed to the
     *   caller, based upon NsmErrorStatus_e. 	 			The method is used by other
     *   applications to get the application mode. 			The method is used by
     *   applications to get the state of a session.
     * author: Giridhar
     * Calls GetApplicationMode with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetApplicationMode(CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmApplicationMode &_ApplicationModeId, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetApplicationMode with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetApplicationModeAsync(GetApplicationModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: RegisterShutdownClient:     	ShutdownMode: Shutdown mode for which client wants
     *   to be informed (i.e normal, fast etc).     	TimeoutMs:    Max. Timeout to wait
     *   for response from shutdown client in ms.     	ErrorCode:    Return value
     *   passed to the caller, based upon NsmErrorStatus_e.          	The method is
     *   used by other applications to register themselves as shutdown client. Any
     *   client that registers must provide a method in their D-Bus object called
     *   "LifecycleRequest". This method will take one parameter which is the
     *   RequestType (NSM_SHUTDOWNTYPE_NORMAL, NSM_SHUTDOWNTYPE_FAST). For an example
     *   of the required client interface please see the BootManager component who will
     *   be a client of the NSM. 		Removed Below Parameters:  		BusName:      Bus name
     *   of remote application.     	ObjName:      Object name of remote object that
     *   provides the shutdown interface.
     * author: Giridhar
     * Calls RegisterShutdownClient with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void RegisterShutdownClient(const uint32_t &_ShutdownMode, const uint32_t &_TimeoutMs, CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls RegisterShutdownClient with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> RegisterShutdownClientAsync(const uint32_t &_ShutdownMode, const uint32_t &_TimeoutMs, RegisterShutdownClientAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: UnRegisterShutdownClient:     	ShutdownMode: Shutdown mode for which client
     *   wants to unregister (NSM_SHUTDOWNTYPE_NORMAL, NSM_SHUTDOWNTYPE_FAST).    
     *   	ErrorCode:    Return value passed to the caller, based upon NsmErrorStatus_e.
     *            	The method is used by other applications to unregister themselves as
     *   shutdown client.  		Removed Below Parameters:  		BusName:      Bus name of
     *   remote application.     	ObjName:      Object name of remote object that
     *   provides the shutdown interface.
     * author: Giridhar
     * Calls UnRegisterShutdownClient with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void UnRegisterShutdownClient(const uint32_t &_ShutdownMode, CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls UnRegisterShutdownClient with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> UnRegisterShutdownClientAsync(const uint32_t &_ShutdownMode, UnRegisterShutdownClientAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: RegisterSession:     	SessionName:  The SessionName will be based upon either
     *   the pre-defined platform session names (see NSM content page) or using a newly
     *   added product defined SessionName.     	SessionOwner: This is the name of the
     *   application that is registering the new session (this must be the applications
     *   systemd unit filename).     	SeatID:       This parameter will be based upon
     *   the enum NsmSeatId_e     	SessionState: This parameter will be based upon the
     *   NsmSessionState_e but it will not be bounded by the values in that
     *   enumeration. The listed values are the default values that are mandatory for
     *   platform sessions, but product sessions may have additional session states.   
     *    	ErrorCode:    Return value passed to the caller, based upon
     *   NsmErrorStatus_e.          	The method is used by other applications to
     *   register a new session whose state should be observed and distributed by the
     *   NSM.
     * author: Giridhar
     * Calls RegisterSession with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void RegisterSession(const std::string &_SessionName, const std::string &_SessionOwner, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState &_SessionState, CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls RegisterSession with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> RegisterSessionAsync(const std::string &_SessionName, const std::string &_SessionOwner, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState &_SessionState, RegisterSessionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: UnRegisterSession:     	SessionName:  The SessionName will be based upon either
     *   the pre-defined platform session names (see NSM content page) or using a newly
     *   added product defined SessionName.     	SessionOwner: This is the name of the
     *   application that originally registered the session. It will be validated that
     *   this value matches the stored value from the registration.     	SeatID:      
     *   This parameter will be based upon the enum NsmSeat_e.     	ErrorCode:   
     *   Return value passed to the caller, based upon NsmErrorStatus_e.          	The
     *   method is used by other applications to remove a new session from the session
     *   list hosted by NSM.
     * author: Giridhar
     * Calls UnRegisterSession with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void UnRegisterSession(const std::string &_SessionName, const std::string &_SessionOwner, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls UnRegisterSession with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> UnRegisterSessionAsync(const std::string &_SessionName, const std::string &_SessionOwner, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, UnRegisterSessionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: GetAppHealthCount:     	Count: Return value passed to the caller. Number of
     *   applications that crashed or terminated accidentally.     	The method returns
     *   the number of applications that crashed or terminated accidentally, within the
     *   current life cycle. It can be used to observe the system state.
     * author: Giridhar
     * Calls GetAppHealthCount with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetAppHealthCount(CommonAPI::CallStatus &_internalCallStatus, uint32_t &_Count, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetAppHealthCount with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetAppHealthCountAsync(GetAppHealthCountAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: GetInterfaceVersion:     	Version: Unsigned integer that represents the version
     *   number of the Node State Manager.     	     	The method returns the version
     *   number of the Node State Manager. The number is organized in four bytes:      
     *      	Version: VVV.RRR.PPP.BBB          	<literallayout>     		VVV => Version 
     *   [1..255]     		RRR => Release  [0..255]     		PPP => Patch    [0..255]    
     *   		BBB => Build    [0..255]     	</literallayout>
     * author: Giridhar
     * Calls GetInterfaceVersion with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetInterfaceVersion(CommonAPI::CallStatus &_internalCallStatus, uint32_t &_Version, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetInterfaceVersion with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetInterfaceVersionAsync(GetInterfaceVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: LifecycleRequestComplete:         Status:    The result of the call to
     *   "LifecycleRequest". NsmErrorStatus_Ok: Request successfully processed.
     *   NsmErrorStatus_Error: An error occured while processing the
     *   "LifecycleRequest".         ErrorCode: Return value passed to the caller,
     *   based upon NsmErrorStatus_e.                  The function has to be called by
     *   a "asynchrounous" lifecycle client, when he processed the "LifecycleRequest". 
     *     		Removed below parameters:    		RequestId: The request Id of the called
     *   life cycle client. The value has been passed when "LifecycleRequest" was
     *   called.
     * author: Giridhar
     * Calls LifecycleRequestComplete with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void LifecycleRequestComplete(const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_Status, CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls LifecycleRequestComplete with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> LifecycleRequestCompleteAsync(const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_Status, LifecycleRequestCompleteAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<ConsumerProxyBase> delegate_;
};

typedef ConsumerProxy<> ConsumerProxyDefault;

namespace ConsumerExtensions {
    /**
     * description: RestartReason: This property informs clients about the reason for the last
     *   restart. The values are based upon the enummeration NsmRestartReason_e. Note:
     *   The value is only set once at start-up.
     */
    template <template <typename > class _ExtensionType>
    class RestartReasonAttributeExtension {
     public:
        typedef _ExtensionType<ConsumerProxyBase::RestartReasonAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ConsumerProxyBase::RestartReasonAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        RestartReasonAttributeExtension() {}
    #endif
    
        RestartReasonAttributeExtension(ConsumerProxyBase& proxy): attributeExtension_(proxy.getRestartReasonAttribute()) {
        }
    
        inline extension_type& getRestartReasonAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: ShutdownReason: This property informs clients about the reason for the last
     *   shutdown. The values are based upon the enummeration NsmShutdownReason_e.
     *   Note: The value is only set once at start-up.
     */
    template <template <typename > class _ExtensionType>
    class ShutdownReasonAttributeExtension {
     public:
        typedef _ExtensionType<ConsumerProxyBase::ShutdownReasonAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ConsumerProxyBase::ShutdownReasonAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ShutdownReasonAttributeExtension() {}
    #endif
    
        ShutdownReasonAttributeExtension(ConsumerProxyBase& proxy): attributeExtension_(proxy.getShutdownReasonAttribute()) {
        }
    
        inline extension_type& getShutdownReasonAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: WakeUpReason: This property informs clients about the recent reason for waking
     *   up the target. The values are based upon the enummeration NsmWakeUpReason_e.
     *   Note: The value is only set once at start-up.
     */
    template <template <typename > class _ExtensionType>
    class WakeUpReasonAttributeExtension {
     public:
        typedef _ExtensionType<ConsumerProxyBase::WakeUpReasonAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ConsumerProxyBase::WakeUpReasonAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        WakeUpReasonAttributeExtension() {}
    #endif
    
        WakeUpReasonAttributeExtension(ConsumerProxyBase& proxy): attributeExtension_(proxy.getWakeUpReasonAttribute()) {
        }
    
        inline extension_type& getWakeUpReasonAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: BootMode: This property informs clients about the recent BootMode of the
     *   target. The values will be defined by a third party header, which has not been
     *   delivered yet. The description needs to be updated as soon as the header is
     *   available.
     */
    template <template <typename > class _ExtensionType>
    class BootModeAttributeExtension {
     public:
        typedef _ExtensionType<ConsumerProxyBase::BootModeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ConsumerProxyBase::BootModeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        BootModeAttributeExtension() {}
    #endif
    
        BootModeAttributeExtension(ConsumerProxyBase& proxy): attributeExtension_(proxy.getBootModeAttribute()) {
        }
    
        inline extension_type& getBootModeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: VehiclePowerMode: This property informs clients about the current PowerMode of
     *   the target. The values will be updates as soon as the power master changes the
     *   state. 	   basic PowerMode States are
     *   ACTIVE,STANDBY,SLEEP,SHUTDOWN,ENTERTAINMENT_MODE
     */
    template <template <typename > class _ExtensionType>
    class VehiclePowerModeAttributeExtension {
     public:
        typedef _ExtensionType<ConsumerProxyBase::VehiclePowerModeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ConsumerProxyBase::VehiclePowerModeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        VehiclePowerModeAttributeExtension() {}
    #endif
    
        VehiclePowerModeAttributeExtension(ConsumerProxyBase& proxy): attributeExtension_(proxy.getVehiclePowerModeAttribute()) {
        }
    
        inline extension_type& getVehiclePowerModeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace ConsumerExtensions

//
// ConsumerProxy Implementation
//
template <typename ... _AttributeExtensions>
ConsumerProxy<_AttributeExtensions...>::ConsumerProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<ConsumerProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<ConsumerProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
ConsumerProxy<_AttributeExtensions...>::~ConsumerProxy() {
}

/**
 * description: GetNodeState:     	NodeStateId: Will be based on the NsmNodeState_e.    
 *   	ErrorCode:   Return value passed to the caller, based upon NsmErrorStatus_e. 
 *      	The method is used by other applications to get the NodeState without the
 *   need of registration to the signal.
 * author: Giridhar
 */
template <typename ... _AttributeExtensions>
void ConsumerProxy<_AttributeExtensions...>::GetNodeState(CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmNodeState &_NodeStateId, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
    delegate_->GetNodeState(_internalCallStatus, _NodeStateId, _ErrorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConsumerProxy<_AttributeExtensions...>::GetNodeStateAsync(GetNodeStateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetNodeStateAsync(_callback, _info);
}
/**
 * description: SetSessionState:     	SessionName:  The SessionName will be based upon either
 *   the pre-defined platform SessionNames (see NSM content page) or using a newly
 *   added product defined session name.     	SessionOwner: This parameter defines
 *   the name of the application that is setting the state of the session. This
 *   must be the applications systemd unit filename.     	SeatID:       This
 *   parameter will be based upon the enum NsmSeat_e     	SessionState: This
 *   parameter will be based upon the NsmSessionState_e but it will not be bounded
 *   by the values in that enumeration. The listed values are the default values
 *   that are mandatory for platform sessions, but product sessions may have
 *   additional SessionStates.     	ErrorCode:    Return value passed to the
 *   caller, based upon NsmErrorStatus_e.          	The method is used by
 *   applications to set the state of a session.
 * author: Giridhar
 */
template <typename ... _AttributeExtensions>
void ConsumerProxy<_AttributeExtensions...>::SetSessionState(const std::string &_SessionName, const std::string &_SessionOwner, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState &_SessionState, CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
    if (!_SeatID.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    if (!_SessionState.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->SetSessionState(_SessionName, _SessionOwner, _SeatID, _SessionState, _internalCallStatus, _ErrorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConsumerProxy<_AttributeExtensions...>::SetSessionStateAsync(const std::string &_SessionName, const std::string &_SessionOwner, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState &_SessionState, SetSessionStateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_SeatID.validate()) {
        ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus ErrorCode = ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus::NsmErrorStatus_NotSet;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, ErrorCode);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    if (!_SessionState.validate()) {
        ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus ErrorCode = ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus::NsmErrorStatus_NotSet;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, ErrorCode);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->SetSessionStateAsync(_SessionName, _SessionOwner, _SeatID, _SessionState, _callback, _info);
}
/**
 * description: GetSessionState:     	SessionName:  The SessionName will be based upon either
 *   the pre-defined platform session names (see NSM content page) or using a newly
 *   added product defined SessionName.     	SeatID:       This parameter will be
 *   based upon the enum NsmSeat_e.     	SessionState: This parameter will be based
 *   upon the NsmSessionState_e but it will not be bounded by the values in that
 *   enumeration. The listed values are the default values that are mandatory for
 *   platform sessions, but product sessions may have additional SessionStates.    
 *   	ErrorCode:    Return value passed to the caller, based upon NsmErrorStatus_e.
 *            	The method is used by applications to get the state of a session.
 * author: Giridhar
 */
template <typename ... _AttributeExtensions>
void ConsumerProxy<_AttributeExtensions...>::GetSessionState(const std::string &_SessionName, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState &_SessionState, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
    if (!_SeatID.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->GetSessionState(_SessionName, _SeatID, _internalCallStatus, _SessionState, _ErrorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConsumerProxy<_AttributeExtensions...>::GetSessionStateAsync(const std::string &_SessionName, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, GetSessionStateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_SeatID.validate()) {
        ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState SessionState = ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState::NsmSessionState_Unregistered;
        ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus ErrorCode = ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus::NsmErrorStatus_NotSet;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, SessionState, ErrorCode);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->GetSessionStateAsync(_SessionName, _SeatID, _callback, _info);
}
/**
 * description: GetApplicationMode: 			ApplicationModeId: This parameter will be based upon the
 *   NsmNodeApplicationMode_e. 			ErrorCode:         Return value passed to the
 *   caller, based upon NsmErrorStatus_e. 	 			The method is used by other
 *   applications to get the application mode. 			The method is used by
 *   applications to get the state of a session.
 * author: Giridhar
 */
template <typename ... _AttributeExtensions>
void ConsumerProxy<_AttributeExtensions...>::GetApplicationMode(CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmApplicationMode &_ApplicationModeId, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
    delegate_->GetApplicationMode(_internalCallStatus, _ApplicationModeId, _ErrorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConsumerProxy<_AttributeExtensions...>::GetApplicationModeAsync(GetApplicationModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetApplicationModeAsync(_callback, _info);
}
/**
 * description: RegisterShutdownClient:     	ShutdownMode: Shutdown mode for which client wants
 *   to be informed (i.e normal, fast etc).     	TimeoutMs:    Max. Timeout to wait
 *   for response from shutdown client in ms.     	ErrorCode:    Return value
 *   passed to the caller, based upon NsmErrorStatus_e.          	The method is
 *   used by other applications to register themselves as shutdown client. Any
 *   client that registers must provide a method in their D-Bus object called
 *   "LifecycleRequest". This method will take one parameter which is the
 *   RequestType (NSM_SHUTDOWNTYPE_NORMAL, NSM_SHUTDOWNTYPE_FAST). For an example
 *   of the required client interface please see the BootManager component who will
 *   be a client of the NSM. 		Removed Below Parameters:  		BusName:      Bus name
 *   of remote application.     	ObjName:      Object name of remote object that
 *   provides the shutdown interface.
 * author: Giridhar
 */
template <typename ... _AttributeExtensions>
void ConsumerProxy<_AttributeExtensions...>::RegisterShutdownClient(const uint32_t &_ShutdownMode, const uint32_t &_TimeoutMs, CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
    delegate_->RegisterShutdownClient(_ShutdownMode, _TimeoutMs, _internalCallStatus, _ErrorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConsumerProxy<_AttributeExtensions...>::RegisterShutdownClientAsync(const uint32_t &_ShutdownMode, const uint32_t &_TimeoutMs, RegisterShutdownClientAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->RegisterShutdownClientAsync(_ShutdownMode, _TimeoutMs, _callback, _info);
}
/**
 * description: UnRegisterShutdownClient:     	ShutdownMode: Shutdown mode for which client
 *   wants to unregister (NSM_SHUTDOWNTYPE_NORMAL, NSM_SHUTDOWNTYPE_FAST).    
 *   	ErrorCode:    Return value passed to the caller, based upon NsmErrorStatus_e.
 *            	The method is used by other applications to unregister themselves as
 *   shutdown client.  		Removed Below Parameters:  		BusName:      Bus name of
 *   remote application.     	ObjName:      Object name of remote object that
 *   provides the shutdown interface.
 * author: Giridhar
 */
template <typename ... _AttributeExtensions>
void ConsumerProxy<_AttributeExtensions...>::UnRegisterShutdownClient(const uint32_t &_ShutdownMode, CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
    delegate_->UnRegisterShutdownClient(_ShutdownMode, _internalCallStatus, _ErrorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConsumerProxy<_AttributeExtensions...>::UnRegisterShutdownClientAsync(const uint32_t &_ShutdownMode, UnRegisterShutdownClientAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->UnRegisterShutdownClientAsync(_ShutdownMode, _callback, _info);
}
/**
 * description: RegisterSession:     	SessionName:  The SessionName will be based upon either
 *   the pre-defined platform session names (see NSM content page) or using a newly
 *   added product defined SessionName.     	SessionOwner: This is the name of the
 *   application that is registering the new session (this must be the applications
 *   systemd unit filename).     	SeatID:       This parameter will be based upon
 *   the enum NsmSeatId_e     	SessionState: This parameter will be based upon the
 *   NsmSessionState_e but it will not be bounded by the values in that
 *   enumeration. The listed values are the default values that are mandatory for
 *   platform sessions, but product sessions may have additional session states.   
 *    	ErrorCode:    Return value passed to the caller, based upon
 *   NsmErrorStatus_e.          	The method is used by other applications to
 *   register a new session whose state should be observed and distributed by the
 *   NSM.
 * author: Giridhar
 */
template <typename ... _AttributeExtensions>
void ConsumerProxy<_AttributeExtensions...>::RegisterSession(const std::string &_SessionName, const std::string &_SessionOwner, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState &_SessionState, CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
    if (!_SeatID.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    if (!_SessionState.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->RegisterSession(_SessionName, _SessionOwner, _SeatID, _SessionState, _internalCallStatus, _ErrorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConsumerProxy<_AttributeExtensions...>::RegisterSessionAsync(const std::string &_SessionName, const std::string &_SessionOwner, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState &_SessionState, RegisterSessionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_SeatID.validate()) {
        ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus ErrorCode = ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus::NsmErrorStatus_NotSet;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, ErrorCode);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    if (!_SessionState.validate()) {
        ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus ErrorCode = ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus::NsmErrorStatus_NotSet;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, ErrorCode);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->RegisterSessionAsync(_SessionName, _SessionOwner, _SeatID, _SessionState, _callback, _info);
}
/**
 * description: UnRegisterSession:     	SessionName:  The SessionName will be based upon either
 *   the pre-defined platform session names (see NSM content page) or using a newly
 *   added product defined SessionName.     	SessionOwner: This is the name of the
 *   application that originally registered the session. It will be validated that
 *   this value matches the stored value from the registration.     	SeatID:      
 *   This parameter will be based upon the enum NsmSeat_e.     	ErrorCode:   
 *   Return value passed to the caller, based upon NsmErrorStatus_e.          	The
 *   method is used by other applications to remove a new session from the session
 *   list hosted by NSM.
 * author: Giridhar
 */
template <typename ... _AttributeExtensions>
void ConsumerProxy<_AttributeExtensions...>::UnRegisterSession(const std::string &_SessionName, const std::string &_SessionOwner, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
    if (!_SeatID.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->UnRegisterSession(_SessionName, _SessionOwner, _SeatID, _internalCallStatus, _ErrorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConsumerProxy<_AttributeExtensions...>::UnRegisterSessionAsync(const std::string &_SessionName, const std::string &_SessionOwner, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, UnRegisterSessionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_SeatID.validate()) {
        ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus ErrorCode = ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus::NsmErrorStatus_NotSet;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, ErrorCode);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->UnRegisterSessionAsync(_SessionName, _SessionOwner, _SeatID, _callback, _info);
}
/**
 * description: GetAppHealthCount:     	Count: Return value passed to the caller. Number of
 *   applications that crashed or terminated accidentally.     	The method returns
 *   the number of applications that crashed or terminated accidentally, within the
 *   current life cycle. It can be used to observe the system state.
 * author: Giridhar
 */
template <typename ... _AttributeExtensions>
void ConsumerProxy<_AttributeExtensions...>::GetAppHealthCount(CommonAPI::CallStatus &_internalCallStatus, uint32_t &_Count, const CommonAPI::CallInfo *_info) {
    delegate_->GetAppHealthCount(_internalCallStatus, _Count, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConsumerProxy<_AttributeExtensions...>::GetAppHealthCountAsync(GetAppHealthCountAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetAppHealthCountAsync(_callback, _info);
}
/**
 * description: GetInterfaceVersion:     	Version: Unsigned integer that represents the version
 *   number of the Node State Manager.     	     	The method returns the version
 *   number of the Node State Manager. The number is organized in four bytes:      
 *      	Version: VVV.RRR.PPP.BBB          	<literallayout>     		VVV => Version 
 *   [1..255]     		RRR => Release  [0..255]     		PPP => Patch    [0..255]    
 *   		BBB => Build    [0..255]     	</literallayout>
 * author: Giridhar
 */
template <typename ... _AttributeExtensions>
void ConsumerProxy<_AttributeExtensions...>::GetInterfaceVersion(CommonAPI::CallStatus &_internalCallStatus, uint32_t &_Version, const CommonAPI::CallInfo *_info) {
    delegate_->GetInterfaceVersion(_internalCallStatus, _Version, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConsumerProxy<_AttributeExtensions...>::GetInterfaceVersionAsync(GetInterfaceVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetInterfaceVersionAsync(_callback, _info);
}
/**
 * description: LifecycleRequestComplete:         Status:    The result of the call to
 *   "LifecycleRequest". NsmErrorStatus_Ok: Request successfully processed.
 *   NsmErrorStatus_Error: An error occured while processing the
 *   "LifecycleRequest".         ErrorCode: Return value passed to the caller,
 *   based upon NsmErrorStatus_e.                  The function has to be called by
 *   a "asynchrounous" lifecycle client, when he processed the "LifecycleRequest". 
 *     		Removed below parameters:    		RequestId: The request Id of the called
 *   life cycle client. The value has been passed when "LifecycleRequest" was
 *   called.
 * author: Giridhar
 */
template <typename ... _AttributeExtensions>
void ConsumerProxy<_AttributeExtensions...>::LifecycleRequestComplete(const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_Status, CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
    if (!_Status.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->LifecycleRequestComplete(_Status, _internalCallStatus, _ErrorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ConsumerProxy<_AttributeExtensions...>::LifecycleRequestCompleteAsync(const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_Status, LifecycleRequestCompleteAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_Status.validate()) {
        ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus ErrorCode = ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus::NsmErrorStatus_NotSet;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, ErrorCode);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->LifecycleRequestCompleteAsync(_Status, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &ConsumerProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool ConsumerProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool ConsumerProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& ConsumerProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& ConsumerProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace NodeStateManager
} // namespace genivi
} // namespace org
} // namespace v2

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v2::org::genivi::NodeStateManager::ConsumerProxy,
    _AttributeExtension> {
    typedef typename ::v2::org::genivi::NodeStateManager::ConsumerProxy<
            ::v2::org::genivi::NodeStateManager::ConsumerExtensions::RestartReasonAttributeExtension<_AttributeExtension>, 
            ::v2::org::genivi::NodeStateManager::ConsumerExtensions::ShutdownReasonAttributeExtension<_AttributeExtension>, 
            ::v2::org::genivi::NodeStateManager::ConsumerExtensions::WakeUpReasonAttributeExtension<_AttributeExtension>, 
            ::v2::org::genivi::NodeStateManager::ConsumerExtensions::BootModeAttributeExtension<_AttributeExtension>, 
            ::v2::org::genivi::NodeStateManager::ConsumerExtensions::VehiclePowerModeAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v2_1 = v2;

#endif // V2_ORG_GENIVI_NODESTATEMANAGER_Consumer_PROXY_HPP_

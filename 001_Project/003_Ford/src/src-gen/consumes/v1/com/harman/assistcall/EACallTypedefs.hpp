/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V1_COM_HARMAN_ASSISTCALL_EA_Call_Typedefs_HPP_
#define V1_COM_HARMAN_ASSISTCALL_EA_Call_Typedefs_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace assistcall {

struct EACallTypedefs {
    
    struct eEAEventStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            EA_NO_EVENT = 0,
            EA_EVENT_DETECTED = 1,
            EA_CONNECTING = 2,
            EA_CALLING = 3,
            EA_PSAP_PROMPT_PALY = 4,
            EA_FEATURE_OFF = 5,
            EA_CALL_CANCELED = 6,
            EA_NO_PHONE = 7,
            EA_UNSUCCESSFUL = 8,
            EA_INCOMPLETE = 9,
            EA_SUCESSFUL = 10
        };
        
        eEAEventStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::EA_NO_EVENT)) {}
        eEAEventStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::EA_NO_EVENT):
                case static_cast<int32_t>(Literal::EA_EVENT_DETECTED):
                case static_cast<int32_t>(Literal::EA_CONNECTING):
                case static_cast<int32_t>(Literal::EA_CALLING):
                case static_cast<int32_t>(Literal::EA_PSAP_PROMPT_PALY):
                case static_cast<int32_t>(Literal::EA_FEATURE_OFF):
                case static_cast<int32_t>(Literal::EA_CALL_CANCELED):
                case static_cast<int32_t>(Literal::EA_NO_PHONE):
                case static_cast<int32_t>(Literal::EA_UNSUCCESSFUL):
                case static_cast<int32_t>(Literal::EA_INCOMPLETE):
                case static_cast<int32_t>(Literal::EA_SUCESSFUL):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eEAEventStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eEAEventStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eEAEventStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eEAEventStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eEAEventStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eEAEventStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eErrorCode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SUCCESS = 0,
            FAILURE = 1,
            INVALID_REQUEST = 2
        };
        
        eErrorCode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SUCCESS)) {}
        eErrorCode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SUCCESS):
                case static_cast<int32_t>(Literal::FAILURE):
                case static_cast<int32_t>(Literal::INVALID_REQUEST):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eErrorCode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eErrorCode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eErrorCode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eErrorCode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eErrorCode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eErrorCode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eTMessageType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            TM_EA_ON_MYKEY_ON = 0,
            TM_EA_TURNED_OFF = 1,
            TM_EA_REQUIRE_CONNECTED_PHONE = 2,
            TM_ATTEMPTING_TO_CONNECT_PHONE = 3,
            TM_CALLING_EMERGENCY_SERVICE = 4,
            TM_CALL_CONNECTED_WAIT_FOR_OPERATOR = 5,
            TM_ATTEMPTING_REDIAL_NUMBER = 6,
            TM_LINE_OPEN = 7,
            TM_CALL_CONNECTED_TO_OPERATOR = 8,
            TM_CALL_ENDED_EACALL_COMPLETE = 9,
            TM_MESSAGE_1 = 10,
            TM_MESSAGE_2 = 11
        };
        
        eTMessageType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::TM_EA_ON_MYKEY_ON)) {}
        eTMessageType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::TM_EA_ON_MYKEY_ON):
                case static_cast<int32_t>(Literal::TM_EA_TURNED_OFF):
                case static_cast<int32_t>(Literal::TM_EA_REQUIRE_CONNECTED_PHONE):
                case static_cast<int32_t>(Literal::TM_ATTEMPTING_TO_CONNECT_PHONE):
                case static_cast<int32_t>(Literal::TM_CALLING_EMERGENCY_SERVICE):
                case static_cast<int32_t>(Literal::TM_CALL_CONNECTED_WAIT_FOR_OPERATOR):
                case static_cast<int32_t>(Literal::TM_ATTEMPTING_REDIAL_NUMBER):
                case static_cast<int32_t>(Literal::TM_LINE_OPEN):
                case static_cast<int32_t>(Literal::TM_CALL_CONNECTED_TO_OPERATOR):
                case static_cast<int32_t>(Literal::TM_CALL_ENDED_EACALL_COMPLETE):
                case static_cast<int32_t>(Literal::TM_MESSAGE_1):
                case static_cast<int32_t>(Literal::TM_MESSAGE_2):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eTMessageType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eTMessageType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eTMessageType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eTMessageType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eTMessageType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eTMessageType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ePMessageType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            PM_EA_REQUIRE_CONNECTED_PHONE = 0,
            PM_EA_NOT_OPERATIONAL = 1,
            PM_EA_OFF_UNABLE_TO_CALL = 2,
            PM_NO_PHONE_FOUND_UNABLE_TO_CALL = 3,
            PM_ATTEMPT_TO_PLACE_CALL = 4,
            PM_EA_CALL_CANCELED = 5,
            PM_PRIVACYMODE = 6,
            PM_EA_NOT_AVAILABLE = 7,
            PM_UNABLE_TO_CALL = 8,
            PM_MESSAGE_1 = 9,
            PM_MESSAGE_2 = 10
        };
        
        ePMessageType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::PM_EA_REQUIRE_CONNECTED_PHONE)) {}
        ePMessageType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::PM_EA_REQUIRE_CONNECTED_PHONE):
                case static_cast<int32_t>(Literal::PM_EA_NOT_OPERATIONAL):
                case static_cast<int32_t>(Literal::PM_EA_OFF_UNABLE_TO_CALL):
                case static_cast<int32_t>(Literal::PM_NO_PHONE_FOUND_UNABLE_TO_CALL):
                case static_cast<int32_t>(Literal::PM_ATTEMPT_TO_PLACE_CALL):
                case static_cast<int32_t>(Literal::PM_EA_CALL_CANCELED):
                case static_cast<int32_t>(Literal::PM_PRIVACYMODE):
                case static_cast<int32_t>(Literal::PM_EA_NOT_AVAILABLE):
                case static_cast<int32_t>(Literal::PM_UNABLE_TO_CALL):
                case static_cast<int32_t>(Literal::PM_MESSAGE_1):
                case static_cast<int32_t>(Literal::PM_MESSAGE_2):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ePMessageType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ePMessageType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ePMessageType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ePMessageType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ePMessageType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ePMessageType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eKeyType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            EA_KEYTYPE_NA = 0,
            EA_KEYTYPE_PEPS = 1,
            EA_KEYTYPE_VEHICLE = 2
        };
        
        eKeyType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::EA_KEYTYPE_NA)) {}
        eKeyType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::EA_KEYTYPE_NA):
                case static_cast<int32_t>(Literal::EA_KEYTYPE_PEPS):
                case static_cast<int32_t>(Literal::EA_KEYTYPE_VEHICLE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eKeyType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eKeyType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eKeyType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eKeyType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eKeyType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eKeyType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eEAOperationStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            EA_OPSTATE_UNKNOWN = 0,
            EA_OPSTATE_ACTIVE = 1,
            EA_OPSTATE_NOT_ACTIVE = 2
        };
        
        eEAOperationStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::EA_OPSTATE_UNKNOWN)) {}
        eEAOperationStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::EA_OPSTATE_UNKNOWN):
                case static_cast<int32_t>(Literal::EA_OPSTATE_ACTIVE):
                case static_cast<int32_t>(Literal::EA_OPSTATE_NOT_ACTIVE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eEAOperationStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eEAOperationStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eEAOperationStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eEAOperationStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eEAOperationStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eEAOperationStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Structure Type for GPS Data
     */
    struct GPSData : CommonAPI::Struct<double, double> {
    	
    	GPSData() {
    	}
    	GPSData(const double &_latitude, const double &_longitude)
    	{
    		std::get<0>(values_) = _latitude;
    		std::get<1>(values_) = _longitude;
    	}
    	/**
    	 * description: GPS Data : Lattitude
    	 */
    	inline const double &getLatitude() const { return std::get<0>(values_); }
    	inline void setLatitude(const double &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: GPS Data : Longitude
    	 */
    	inline const double &getLongitude() const { return std::get<1>(values_); }
    	inline void setLongitude(const double &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const GPSData& _other) const {
                return (getLatitude() == _other.getLatitude() && getLongitude() == _other.getLongitude());
        }
    	inline bool operator!=(const GPSData &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Structure Type for GPS Lat Lon Data
     */
    struct GPSLatLonData : CommonAPI::Struct<double, double, bool> {
    	
    	GPSLatLonData() {
    		std::get<2>(values_) = false;
    	}
    	GPSLatLonData(const double &_GPS_latitude, const double &_GPS_longitude, const bool &_GPS_DataValidity)
    	{
    		std::get<0>(values_) = _GPS_latitude;
    		std::get<1>(values_) = _GPS_longitude;
    		std::get<2>(values_) = _GPS_DataValidity;
    	}
    	/**
    	 * description: GPS Data : Lattitude
    	 */
    	inline const double &getGPS_latitude() const { return std::get<0>(values_); }
    	inline void setGPS_latitude(const double &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: GPS Data : Longitude
    	 */
    	inline const double &getGPS_longitude() const { return std::get<1>(values_); }
    	inline void setGPS_longitude(const double &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: GPS Data : Validity
    	 */
    	inline const bool &getGPS_DataValidity() const { return std::get<2>(values_); }
    	inline void setGPS_DataValidity(const bool _value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const GPSLatLonData& _other) const {
                return (getGPS_latitude() == _other.getGPS_latitude() && getGPS_longitude() == _other.getGPS_longitude() && getGPS_DataValidity() == _other.getGPS_DataValidity());
        }
    	inline bool operator!=(const GPSLatLonData &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.assistcall.EACallTypedefs";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct EACallTypedefs

} // namespace assistcall
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for eEAEventStatus
    template<>
    struct hash<::v1::com::harman::assistcall::EACallTypedefs::eEAEventStatus> {
        inline size_t operator()(const ::v1::com::harman::assistcall::EACallTypedefs::eEAEventStatus& eEAEventStatus) const {
            return static_cast<int32_t>(eEAEventStatus);
        }
    };
    //Hash for eErrorCode
    template<>
    struct hash<::v1::com::harman::assistcall::EACallTypedefs::eErrorCode> {
        inline size_t operator()(const ::v1::com::harman::assistcall::EACallTypedefs::eErrorCode& eErrorCode) const {
            return static_cast<int32_t>(eErrorCode);
        }
    };
    //Hash for eTMessageType
    template<>
    struct hash<::v1::com::harman::assistcall::EACallTypedefs::eTMessageType> {
        inline size_t operator()(const ::v1::com::harman::assistcall::EACallTypedefs::eTMessageType& eTMessageType) const {
            return static_cast<int32_t>(eTMessageType);
        }
    };
    //Hash for ePMessageType
    template<>
    struct hash<::v1::com::harman::assistcall::EACallTypedefs::ePMessageType> {
        inline size_t operator()(const ::v1::com::harman::assistcall::EACallTypedefs::ePMessageType& ePMessageType) const {
            return static_cast<int32_t>(ePMessageType);
        }
    };
    //Hash for eKeyType
    template<>
    struct hash<::v1::com::harman::assistcall::EACallTypedefs::eKeyType> {
        inline size_t operator()(const ::v1::com::harman::assistcall::EACallTypedefs::eKeyType& eKeyType) const {
            return static_cast<int32_t>(eKeyType);
        }
    };
    //Hash for eEAOperationStatus
    template<>
    struct hash<::v1::com::harman::assistcall::EACallTypedefs::eEAOperationStatus> {
        inline size_t operator()(const ::v1::com::harman::assistcall::EACallTypedefs::eEAOperationStatus& eEAOperationStatus) const {
            return static_cast<int32_t>(eEAOperationStatus);
        }
    };
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_ASSISTCALL_EA_Call_Typedefs_HPP_

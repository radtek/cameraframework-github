/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
/**
 * description: This is a Emergency Assitance Module  interface that is used by HMI and other
 *   module to 	   to get the EA supported features.
 * author: KHegde
 */
#ifndef V1_COM_HARMAN_ASSISTCALL_EA_Call_PROXY_BASE_HPP_
#define V1_COM_HARMAN_ASSISTCALL_EA_Call_PROXY_BASE_HPP_

#include <v1/com/harman/assistcall/EACall.hpp>


#include <v1/com/harman/assistcall/EACallTypedefs.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace assistcall {

class EACallProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<std::string> EAFeatureNameAttribute;
    typedef CommonAPI::ObservableAttribute<bool> EAUserSettingStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> EAEventFlagAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> EAOperationalStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> EAFeatureAvailabilityAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::assistcall::EACallTypedefs::eEAEventStatus> EAEventStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::assistcall::EACallTypedefs::GPSData> GpsDataAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::assistcall::EACallTypedefs::eKeyType> EaKeyTypeAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::assistcall::EACallTypedefs::eEAOperationStatus> EAOperationalStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::assistcall::EACallTypedefs::GPSLatLonData> GpsLatLonDataAttribute;
    typedef CommonAPI::Event<
        ::v1::com::harman::assistcall::EACallTypedefs::eTMessageType
    > NotifyTMessageIDEvent;
    typedef CommonAPI::Event<
        ::v1::com::harman::assistcall::EACallTypedefs::ePMessageType
    > NotifyPMessageIDEvent;
    typedef CommonAPI::Event<
        ::v1::com::harman::assistcall::EACallTypedefs::eTMessageType
    > NotifyToTerminateTMEvent;
    typedef CommonAPI::Event<
        uint8_t, uint8_t
    > NotifyEACallCancelTimerEvent;
    typedef CommonAPI::Event<
        std::string
    > NotifyCancelTTSPlayEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::assistcall::EACallTypedefs::eErrorCode&)> CancelRequestAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::assistcall::EACallTypedefs::eErrorCode&)> CancelRequestConfirmAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::assistcall::EACallTypedefs::eErrorCode&)> HmiRequestStartEACallAsyncCallback;

    /**
     * description: EAFeatureName:          EAFeatureName: Type='STRING' Description='String value
     *   "911 Asssit" for US and for the           the rest of world  this is
     *   "Emergency Assistance"                                        This  attribute
     *   is used by HMI to display the  feature name the screen.
     * author: KHegde
     */
    virtual EAFeatureNameAttribute& getEAFeatureNameAttribute() = 0;
    /**
     * description: EAUserSettingState:          EAUserSettingState: Type='BOOL' Description='This
     *   is boolean  type for                         EA user setting status  '        
     *                                  This  attribute is set by HMI client 
     *   application to indicate the user setting of the          EA feature ON /OFF
     * author: KHegde
     */
    virtual EAUserSettingStateAttribute& getEAUserSettingStateAttribute() = 0;
    /**
     * description: EAEventFlag:          EAEventFlag: Type='BOOL' Description='This is boolean 
     *   type for                         EA Event  status'                            
     *              This read only attribute  can be used by client application to get 
     *   EA Event status            ( EA Event ON / EA Event OFF ) .
     * author: KHegde
     */
    virtual EAEventFlagAttribute& getEAEventFlagAttribute() = 0;
    /**
     * description: EAOperationalState:          EAOperationalState: Type='BOOL' Description='This
     *   is boolean  type for                         EA operational status'           
     *                               This read only attribute  can be used by client
     *   application to get  EA operation status            ( EA Operational / EA Not
     *   operational ) .
     * author: KHegde
     */
    virtual EAOperationalStateAttribute& getEAOperationalStateAttribute() = 0;
    /**
     * description: EAFeatureAvailabilty:          EAFeatureAvailabilty: Type='BOOL'
     *   Description='This is boolean  type for                         EA Feature
     *   availabilty'                                        This read only attribute 
     *   can be used by client application to get  Enable or Dsiable EA Menu.
     * author: KHegde
     */
    virtual EAFeatureAvailabilityAttribute& getEAFeatureAvailabilityAttribute() = 0;
    /**
     * description: EAEventStatus:          EAEventStatus: Type='eEAEventStatus' Description='This
     *   is enum type for                         Event Staus of the Emergency
     *   Assistance Behaviour'                                        This read only
     *   attribute  can be used by client application to get the systeminfo           
     *   deatils
     * author: KHegde
     */
    virtual EAEventStatusAttribute& getEAEventStatusAttribute() = 0;
    /**
     * description: GPSData:          SystemInfo: Type='tsGPSData' Description='This is structure
     *   type for the GPS Data'                                        This read only
     *   attribute  can be used by client application to get the GPS Lattitude and
     *   Longitude
     * author: KHegde
     */
    virtual GpsDataAttribute& getGpsDataAttribute() = 0;
    /**
     * description: eaKeyType:          eaKeyType: Type='eKeyType' Description='This is enum type
     *   for key system'                                        This read only
     *   attribute  can be used by HMI client to get the info            type of key
     *   system in the car.
     * author: KHegde
     */
    virtual EaKeyTypeAttribute& getEaKeyTypeAttribute() = 0;
    /**
     * description: EAOperationalStatus:          EAOperationalState: Type='eEAOperationStatus'
     *   Description='This is enum  type for                         EA operational
     *   status'                                        This read only attribute  can
     *   be used by client application to get  EA operation status            (EA
     *   operational Default Unknown /EA Operational / EA Not operational ) .
     * author: KHegde
     */
    virtual EAOperationalStatusAttribute& getEAOperationalStatusAttribute() = 0;
    /**
     * description: GPSLatLonData:          SystemInfo: Type='GPSLatLonData' Description='This is
     *   structure type for the GPS Lat /Lon  Data'                                    
     *      This read only attribute  can be used by client application to get the GPS
     *   Lattitude and Longitude
     * author: KHegde
     */
    virtual GpsLatLonDataAttribute& getGpsLatLonDataAttribute() = 0;

    /**
     * description: notifyTMessageID:          PmessageID: Type='eTMessageType' ; Description='This
     *   is the                          transient  message id to be used by HMI
     *   client'                           This signal can be used by HMI client to be
     *   notified about           HMI Transient  Message ID during the EA event
     *   behaviour
     * author: KHegde
     */
    virtual NotifyTMessageIDEvent& getNotifyTMessageIDEvent() = 0;
    /**
     * description: notifyPMessageID:          PmessageID: Type='ePMessageType' ; Description='This
     *   is the                          pop up message id to be used by HMI client'   
     *                          This signal can be used by HMI client to be notified
     *   about           HMI pop up Message ID during the EA event behaviour
     * author: KHegde
     */
    virtual NotifyPMessageIDEvent& getNotifyPMessageIDEvent() = 0;
    /**
     * description: notifyToTerminateTM :          TmessageID: Type='eTMessageType' ;
     *   Description='This is the                          transient  message id to be
     *   used by HMI client to terminate if  it is displayed.'                         
     *    This signal is a broadcast notify from EA to HMI  to terminate            HMI
     *   TM Message displayed . TM Message shall be a previous request from EA.
     * author: KHegde
     */
    virtual NotifyToTerminateTMEvent& getNotifyToTerminateTMEvent() = 0;
    /**
     * description: notifyEACallCancelTimer:          rTimeInSeconds: Type='UInt8' ;
     *   Description='This is the                            remaining time of
     *   cancellation timer pop up screen'          totalTimeInSeconds: Type='UInt8' ;
     *   Description='This is the                            total time of cancellation
     *   Timer pop up screen'
     * author: KHegde
     */
    virtual NotifyEACallCancelTimerEvent& getNotifyEACallCancelTimerEvent() = 0;
    /**
     * description: notifyTTSPlayTermination:          domain : Type = 'String' ;Description =
     *   'This is to identify the           currently playing prompt channel for which
     *   cancel request has           been sent to TTS'
     * author: KHegde
     */
    virtual NotifyCancelTTSPlayEvent& getNotifyCancelTTSPlayEvent() = 0;

    /**
     * description: cancelRequestConfirm:          errorCode: Type='eErrorCode' Description='This
     *   is the                          return value of the method call '             
     *                This method can be used by HMI client to cancel           EA
     *   event behaviour
     * author: KHegde
     */
    virtual void cancelRequest(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::assistcall::EACallTypedefs::eErrorCode &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> cancelRequestAsync(CancelRequestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: cancelRequestConfirm:          errorCode: Type='eErrorCode' Description='This
     *   is the                          return value of the method call '             
     *                This method can be used by HMI client to confirm the user        
     *      request for the cancel EA event behaviour
     * author: KHegde
     */
    virtual void cancelRequestConfirm(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::assistcall::EACallTypedefs::eErrorCode &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> cancelRequestConfirmAsync(CancelRequestConfirmAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: hmiRequestStartEACall:          errorCode: Type='eErrorCode' Description='This
     *   is the                          return value of the method call '             
     *                This method can be used by HMI to start the EA call when user
     *   selects "NO" in             cancel confirmation pop up.
     * author: KHegde
     */
    virtual void hmiRequestStartEACall(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::assistcall::EACallTypedefs::eErrorCode &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> hmiRequestStartEACallAsync(HmiRequestStartEACallAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace assistcall
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_ASSISTCALL_EA_Call_PROXY_BASE_HPP_

/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_ORG_HARMAN_FORD_enginedata_types_HPP_
#define V0_ORG_HARMAN_FORD_enginedata_types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace ford {

struct enginedata_types {
    
    struct GboxOil_Te_Actl_UB_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fresh_data = 1,
            En_Unchanged_data = 0
        };
        
        GboxOil_Te_Actl_UB_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fresh_data)) {}
        GboxOil_Te_Actl_UB_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fresh_data):
                case static_cast<int32_t>(Literal::En_Unchanged_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const GboxOil_Te_Actl_UB_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const GboxOil_Te_Actl_UB_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const GboxOil_Te_Actl_UB_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const GboxOil_Te_Actl_UB_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const GboxOil_Te_Actl_UB_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const GboxOil_Te_Actl_UB_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VehOverGnd_V_Est_UB_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fresh_data = 1,
            En_Unchanged_data = 0
        };
        
        VehOverGnd_V_Est_UB_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fresh_data)) {}
        VehOverGnd_V_Est_UB_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fresh_data):
                case static_cast<int32_t>(Literal::En_Unchanged_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VehOverGnd_V_Est_UB_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VehOverGnd_V_Est_UB_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VehOverGnd_V_Est_UB_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VehOverGnd_V_Est_UB_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VehOverGnd_V_Est_UB_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VehOverGnd_V_Est_UB_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VehOverGnd_V_Est_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Invalid = 65535,
            En_Unknown = 65534
        };
        
        VehOverGnd_V_Est_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Invalid)) {}
        VehOverGnd_V_Est_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Unknown):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VehOverGnd_V_Est_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VehOverGnd_V_Est_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VehOverGnd_V_Est_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VehOverGnd_V_Est_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VehOverGnd_V_Est_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VehOverGnd_V_Est_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PrkBrkStatus_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_GeneralFault_MaintenceMode = 7,
            En_ECD_by_Brake_ECU_Active = 6,
            En_EPB_Limphome_Active = 5,
            En_Rear_Caliper_Open = 4,
            En_RWU_By_EPB_Active = 3,
            En_Rear_Caliper_Transition = 2,
            En_Rear_Caliper_Closed = 1,
            En_Not_Used = 0
        };
        
        PrkBrkStatus_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_GeneralFault_MaintenceMode)) {}
        PrkBrkStatus_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_GeneralFault_MaintenceMode):
                case static_cast<int32_t>(Literal::En_ECD_by_Brake_ECU_Active):
                case static_cast<int32_t>(Literal::En_EPB_Limphome_Active):
                case static_cast<int32_t>(Literal::En_Rear_Caliper_Open):
                case static_cast<int32_t>(Literal::En_RWU_By_EPB_Active):
                case static_cast<int32_t>(Literal::En_Rear_Caliper_Transition):
                case static_cast<int32_t>(Literal::En_Rear_Caliper_Closed):
                case static_cast<int32_t>(Literal::En_Not_Used):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PrkBrkStatus_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PrkBrkStatus_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PrkBrkStatus_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PrkBrkStatus_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PrkBrkStatus_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PrkBrkStatus_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct PrkBrkStatus_struct : CommonAPI::Struct<PrkBrkStatus_enum, uint8_t> {
    	
    	PrkBrkStatus_struct() {
    	}
    	PrkBrkStatus_struct(const PrkBrkStatus_enum &_prkBrkStatus_enum, const uint8_t &_status)
    	{
    		std::get<0>(values_) = _prkBrkStatus_enum;
    		std::get<1>(values_) = _status;
    	}
    	inline const PrkBrkStatus_enum &getPrkBrkStatus_enum() const { return std::get<0>(values_); }
    	inline void setPrkBrkStatus_enum(const PrkBrkStatus_enum &_value) { std::get<0>(values_) = _value; }
    	inline const uint8_t &getStatus() const { return std::get<1>(values_); }
    	inline void setStatus(const uint8_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const PrkBrkStatus_struct& _other) const {
                return (getPrkBrkStatus_enum() == _other.getPrkBrkStatus_enum() && getStatus() == _other.getStatus());
        }
    	inline bool operator!=(const PrkBrkStatus_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct AbsActv_B_Actl_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Yes = 1,
            En_No = 0
        };
        
        AbsActv_B_Actl_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Yes)) {}
        AbsActv_B_Actl_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Yes):
                case static_cast<int32_t>(Literal::En_No):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AbsActv_B_Actl_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AbsActv_B_Actl_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AbsActv_B_Actl_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AbsActv_B_Actl_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AbsActv_B_Actl_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AbsActv_B_Actl_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct FactoryReset_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Not_used_2 = 2,
            En_Not_used_3 = 3,
            En_FactoryDefaultsRestored = 1,
            En_Null = 0
        };
        
        FactoryReset_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Not_used_2)) {}
        FactoryReset_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Not_used_2):
                case static_cast<int32_t>(Literal::En_Not_used_3):
                case static_cast<int32_t>(Literal::En_FactoryDefaultsRestored):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const FactoryReset_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const FactoryReset_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const FactoryReset_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const FactoryReset_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const FactoryReset_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const FactoryReset_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct DrStatTgate_B_Actl_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Ajar = 1,
            En_Closed = 0
        };
        
        DrStatTgate_B_Actl_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Ajar)) {}
        DrStatTgate_B_Actl_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Ajar):
                case static_cast<int32_t>(Literal::En_Closed):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DrStatTgate_B_Actl_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DrStatTgate_B_Actl_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DrStatTgate_B_Actl_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DrStatTgate_B_Actl_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DrStatTgate_B_Actl_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DrStatTgate_B_Actl_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Ignition_Status_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Invalid = 15,
            En_Start = 8,
            En_Run = 4,
            En_Accessory = 2,
            En_Off = 1,
            En_Unknown = 0
        };
        
        Ignition_Status_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Invalid)) {}
        Ignition_Status_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Start):
                case static_cast<int32_t>(Literal::En_Run):
                case static_cast<int32_t>(Literal::En_Accessory):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_Unknown):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Ignition_Status_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Ignition_Status_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Ignition_Status_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Ignition_Status_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Ignition_Status_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Ignition_Status_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct IgnKeyType_D_Actl_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Invalid = 15,
            En_Unknown = 14,
            En_Key_Not_Prgrm_Read_Failure = 3,
            En_Key_In_Ign_My_Key = 2,
            En_Key_In_Ign_Standard_Key = 1,
            En_Key_Read_In_Progress = 0
        };
        
        IgnKeyType_D_Actl_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Invalid)) {}
        IgnKeyType_D_Actl_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Unknown):
                case static_cast<int32_t>(Literal::En_Key_Not_Prgrm_Read_Failure):
                case static_cast<int32_t>(Literal::En_Key_In_Ign_My_Key):
                case static_cast<int32_t>(Literal::En_Key_In_Ign_Standard_Key):
                case static_cast<int32_t>(Literal::En_Key_Read_In_Progress):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const IgnKeyType_D_Actl_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const IgnKeyType_D_Actl_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const IgnKeyType_D_Actl_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const IgnKeyType_D_Actl_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const IgnKeyType_D_Actl_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const IgnKeyType_D_Actl_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct DrStatRl_B_Actl_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Ajar = 1,
            En_Closed = 0
        };
        
        DrStatRl_B_Actl_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Ajar)) {}
        DrStatRl_B_Actl_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Ajar):
                case static_cast<int32_t>(Literal::En_Closed):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DrStatRl_B_Actl_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DrStatRl_B_Actl_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DrStatRl_B_Actl_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DrStatRl_B_Actl_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DrStatRl_B_Actl_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DrStatRl_B_Actl_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct DrStatRr_B_Actl_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Ajar = 1,
            En_Closed = 0
        };
        
        DrStatRr_B_Actl_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Ajar)) {}
        DrStatRr_B_Actl_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Ajar):
                case static_cast<int32_t>(Literal::En_Closed):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DrStatRr_B_Actl_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DrStatRr_B_Actl_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DrStatRr_B_Actl_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DrStatRr_B_Actl_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DrStatRr_B_Actl_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DrStatRr_B_Actl_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct LifeCycMde_D_Actl_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Transport = 3,
            En_NotUsed = 2,
            En_Factory = 1,
            En_Normal = 0
        };
        
        LifeCycMde_D_Actl_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Transport)) {}
        LifeCycMde_D_Actl_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Transport):
                case static_cast<int32_t>(Literal::En_NotUsed):
                case static_cast<int32_t>(Literal::En_Factory):
                case static_cast<int32_t>(Literal::En_Normal):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const LifeCycMde_D_Actl_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const LifeCycMde_D_Actl_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const LifeCycMde_D_Actl_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const LifeCycMde_D_Actl_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const LifeCycMde_D_Actl_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const LifeCycMde_D_Actl_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PrkBrkActv_B_Actl_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Active = 1,
            En_Inactive = 0
        };
        
        PrkBrkActv_B_Actl_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Active)) {}
        PrkBrkActv_B_Actl_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PrkBrkActv_B_Actl_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PrkBrkActv_B_Actl_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PrkBrkActv_B_Actl_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PrkBrkActv_B_Actl_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PrkBrkActv_B_Actl_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PrkBrkActv_B_Actl_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct PrkBrkActv_B_Actl_struct : CommonAPI::Struct<PrkBrkActv_B_Actl_enum, uint8_t> {
    	
    	PrkBrkActv_B_Actl_struct() {
    	}
    	PrkBrkActv_B_Actl_struct(const PrkBrkActv_B_Actl_enum &_prkBrkActv_B_Actl_enum, const uint8_t &_status)
    	{
    		std::get<0>(values_) = _prkBrkActv_B_Actl_enum;
    		std::get<1>(values_) = _status;
    	}
    	inline const PrkBrkActv_B_Actl_enum &getPrkBrkActv_B_Actl_enum() const { return std::get<0>(values_); }
    	inline void setPrkBrkActv_B_Actl_enum(const PrkBrkActv_B_Actl_enum &_value) { std::get<0>(values_) = _value; }
    	inline const uint8_t &getStatus() const { return std::get<1>(values_); }
    	inline void setStatus(const uint8_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const PrkBrkActv_B_Actl_struct& _other) const {
                return (getPrkBrkActv_B_Actl_enum() == _other.getPrkBrkActv_B_Actl_enum() && getStatus() == _other.getStatus());
        }
    	inline bool operator!=(const PrkBrkActv_B_Actl_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct Delay_Accy_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_On = 1,
            En_Off = 0
        };
        
        Delay_Accy_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_On)) {}
        Delay_Accy_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_On):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Delay_Accy_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Delay_Accy_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Delay_Accy_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Delay_Accy_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Delay_Accy_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Delay_Accy_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct DrStatDrv_B_Actl_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Ajar = 1,
            En_Closed = 0
        };
        
        DrStatDrv_B_Actl_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Ajar)) {}
        DrStatDrv_B_Actl_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Ajar):
                case static_cast<int32_t>(Literal::En_Closed):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DrStatDrv_B_Actl_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DrStatDrv_B_Actl_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DrStatDrv_B_Actl_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DrStatDrv_B_Actl_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DrStatDrv_B_Actl_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DrStatDrv_B_Actl_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PwPckTq_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_PwPckOn_TqAvailable = 3,
            En_StartInPrgrss_TqNotAvail = 2,
            En_PwPckOn_TqNotAvailable = 1,
            En_PwPckOff_TqNotAvailable = 0
        };
        
        PwPckTq_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_PwPckOn_TqAvailable)) {}
        PwPckTq_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_PwPckOn_TqAvailable):
                case static_cast<int32_t>(Literal::En_StartInPrgrss_TqNotAvail):
                case static_cast<int32_t>(Literal::En_PwPckOn_TqNotAvailable):
                case static_cast<int32_t>(Literal::En_PwPckOff_TqNotAvailable):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PwPckTq_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PwPckTq_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PwPckTq_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PwPckTq_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PwPckTq_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PwPckTq_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Eng_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed = 3,
            En_EngAutoStopped = 2,
            En_EngOn = 1,
            En_EngOff = 0
        };
        
        Eng_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed)) {}
        Eng_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed):
                case static_cast<int32_t>(Literal::En_EngAutoStopped):
                case static_cast<int32_t>(Literal::En_EngOn):
                case static_cast<int32_t>(Literal::En_EngOff):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Eng_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Eng_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Eng_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Eng_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Eng_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Eng_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct TrnAinTq_D_Qf_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_OK = 3,
            En_Not_Within_Specifications = 2,
            En_No_Data_Exists = 1,
            En_Fault = 0
        };
        
        TrnAinTq_D_Qf_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_OK)) {}
        TrnAinTq_D_Qf_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_OK):
                case static_cast<int32_t>(Literal::En_Not_Within_Specifications):
                case static_cast<int32_t>(Literal::En_No_Data_Exists):
                case static_cast<int32_t>(Literal::En_Fault):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TrnAinTq_D_Qf_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TrnAinTq_D_Qf_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TrnAinTq_D_Qf_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TrnAinTq_D_Qf_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TrnAinTq_D_Qf_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TrnAinTq_D_Qf_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PtDrvMde_D_Stat_UB_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fresh_data = 1,
            En_Unchanged_data = 0
        };
        
        PtDrvMde_D_Stat_UB_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fresh_data)) {}
        PtDrvMde_D_Stat_UB_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fresh_data):
                case static_cast<int32_t>(Literal::En_Unchanged_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PtDrvMde_D_Stat_UB_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PtDrvMde_D_Stat_UB_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PtDrvMde_D_Stat_UB_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PtDrvMde_D_Stat_UB_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PtDrvMde_D_Stat_UB_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PtDrvMde_D_Stat_UB_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PtDrvMde_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Faulty = 15,
            En_NotUsed8 = 14,
            En_NotUsed7 = 13,
            En_NotUsed6 = 12,
            En_NotUsed5 = 11,
            En_NotUsed4 = 10,
            En_NotUsed3 = 9,
            En_NotUsed2 = 8,
            En_Drag = 7,
            En_Rock = 6,
            En_Baja = 5,
            En_Sand = 4,
            En_TowHaulGradeAssist = 3,
            En_SnowWet = 2,
            En_Sport = 1,
            En_Normal = 0
        };
        
        PtDrvMde_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Faulty)) {}
        PtDrvMde_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Faulty):
                case static_cast<int32_t>(Literal::En_NotUsed8):
                case static_cast<int32_t>(Literal::En_NotUsed7):
                case static_cast<int32_t>(Literal::En_NotUsed6):
                case static_cast<int32_t>(Literal::En_NotUsed5):
                case static_cast<int32_t>(Literal::En_NotUsed4):
                case static_cast<int32_t>(Literal::En_NotUsed3):
                case static_cast<int32_t>(Literal::En_NotUsed2):
                case static_cast<int32_t>(Literal::En_Drag):
                case static_cast<int32_t>(Literal::En_Rock):
                case static_cast<int32_t>(Literal::En_Baja):
                case static_cast<int32_t>(Literal::En_Sand):
                case static_cast<int32_t>(Literal::En_TowHaulGradeAssist):
                case static_cast<int32_t>(Literal::En_SnowWet):
                case static_cast<int32_t>(Literal::En_Sport):
                case static_cast<int32_t>(Literal::En_Normal):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PtDrvMde_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PtDrvMde_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PtDrvMde_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PtDrvMde_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PtDrvMde_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PtDrvMde_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct TrnAout_W_ActlUnfilt_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Faulty = 32767,
            En_NoDataExists = 32766
        };
        
        TrnAout_W_ActlUnfilt_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Faulty)) {}
        TrnAout_W_ActlUnfilt_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Faulty):
                case static_cast<int32_t>(Literal::En_NoDataExists):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TrnAout_W_ActlUnfilt_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TrnAout_W_ActlUnfilt_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TrnAout_W_ActlUnfilt_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TrnAout_W_ActlUnfilt_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TrnAout_W_ActlUnfilt_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TrnAout_W_ActlUnfilt_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct BpedDrvAppl_D_Actl_UB_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fresh_data = 1,
            En_Unchanged_data = 0
        };
        
        BpedDrvAppl_D_Actl_UB_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fresh_data)) {}
        BpedDrvAppl_D_Actl_UB_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fresh_data):
                case static_cast<int32_t>(Literal::En_Unchanged_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const BpedDrvAppl_D_Actl_UB_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const BpedDrvAppl_D_Actl_UB_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const BpedDrvAppl_D_Actl_UB_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const BpedDrvAppl_D_Actl_UB_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const BpedDrvAppl_D_Actl_UB_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const BpedDrvAppl_D_Actl_UB_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct BpedDrvAppl_D_Actl_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_not_allowed = 3,
            En_driver_braking = 2,
            En_driver_not_braking = 1,
            En_not_allow = 0
        };
        
        BpedDrvAppl_D_Actl_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_not_allowed)) {}
        BpedDrvAppl_D_Actl_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_not_allowed):
                case static_cast<int32_t>(Literal::En_driver_braking):
                case static_cast<int32_t>(Literal::En_driver_not_braking):
                case static_cast<int32_t>(Literal::En_not_allow):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const BpedDrvAppl_D_Actl_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const BpedDrvAppl_D_Actl_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const BpedDrvAppl_D_Actl_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const BpedDrvAppl_D_Actl_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const BpedDrvAppl_D_Actl_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const BpedDrvAppl_D_Actl_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ApedPosPcActl_D_Qf_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_OK = 3,
            En_Not_Within_Specifications = 2,
            En_No_Data_Exists = 1,
            En_Fault = 0
        };
        
        ApedPosPcActl_D_Qf_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_OK)) {}
        ApedPosPcActl_D_Qf_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_OK):
                case static_cast<int32_t>(Literal::En_Not_Within_Specifications):
                case static_cast<int32_t>(Literal::En_No_Data_Exists):
                case static_cast<int32_t>(Literal::En_Fault):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ApedPosPcActl_D_Qf_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ApedPosPcActl_D_Qf_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ApedPosPcActl_D_Qf_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ApedPosPcActl_D_Qf_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ApedPosPcActl_D_Qf_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ApedPosPcActl_D_Qf_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct EngAoutTqActl_D_Qf_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_OK = 3,
            En_Not_Within_Specifications = 2,
            En_No_Data_Exists = 1,
            En_Fault = 0
        };
        
        EngAoutTqActl_D_Qf_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_OK)) {}
        EngAoutTqActl_D_Qf_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_OK):
                case static_cast<int32_t>(Literal::En_Not_Within_Specifications):
                case static_cast<int32_t>(Literal::En_No_Data_Exists):
                case static_cast<int32_t>(Literal::En_Fault):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EngAoutTqActl_D_Qf_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EngAoutTqActl_D_Qf_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EngAoutTqActl_D_Qf_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EngAoutTqActl_D_Qf_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EngAoutTqActl_D_Qf_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EngAoutTqActl_D_Qf_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Disp_VehUntTripCoUsrSel_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Inactive = 3,
            En_Imperial = 1,
            En_Metric = 0
        };
        
        Disp_VehUntTripCoUsrSel_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Inactive)) {}
        Disp_VehUntTripCoUsrSel_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_Imperial):
                case static_cast<int32_t>(Literal::En_Metric):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Disp_VehUntTripCoUsrSel_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Disp_VehUntTripCoUsrSel_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Disp_VehUntTripCoUsrSel_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Disp_VehUntTripCoUsrSel_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Disp_VehUntTripCoUsrSel_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Disp_VehUntTripCoUsrSel_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Disp_VehUnitTempUsrSel_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Inactive = 3,
            En_Fahrenheit = 1,
            En_Celsius = 0
        };
        
        Disp_VehUnitTempUsrSel_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Inactive)) {}
        Disp_VehUnitTempUsrSel_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_Fahrenheit):
                case static_cast<int32_t>(Literal::En_Celsius):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Disp_VehUnitTempUsrSel_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Disp_VehUnitTempUsrSel_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Disp_VehUnitTempUsrSel_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Disp_VehUnitTempUsrSel_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Disp_VehUnitTempUsrSel_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Disp_VehUnitTempUsrSel_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VehPtch_An_Dsply_UB_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fresh_data = 1,
            En_Unchanged_data = 0
        };
        
        VehPtch_An_Dsply_UB_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fresh_data)) {}
        VehPtch_An_Dsply_UB_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fresh_data):
                case static_cast<int32_t>(Literal::En_Unchanged_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VehPtch_An_Dsply_UB_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VehPtch_An_Dsply_UB_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VehPtch_An_Dsply_UB_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VehPtch_An_Dsply_UB_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VehPtch_An_Dsply_UB_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VehPtch_An_Dsply_UB_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VehPtch_An_Dsply_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Faulty = 127,
            En_NoDataExists = 126
        };
        
        VehPtch_An_Dsply_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Faulty)) {}
        VehPtch_An_Dsply_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Faulty):
                case static_cast<int32_t>(Literal::En_NoDataExists):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VehPtch_An_Dsply_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VehPtch_An_Dsply_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VehPtch_An_Dsply_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VehPtch_An_Dsply_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VehPtch_An_Dsply_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VehPtch_An_Dsply_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VehRol_An_Dsply_UB_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fresh_data = 1,
            En_Unchanged_data = 0
        };
        
        VehRol_An_Dsply_UB_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fresh_data)) {}
        VehRol_An_Dsply_UB_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fresh_data):
                case static_cast<int32_t>(Literal::En_Unchanged_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VehRol_An_Dsply_UB_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VehRol_An_Dsply_UB_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VehRol_An_Dsply_UB_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VehRol_An_Dsply_UB_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VehRol_An_Dsply_UB_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VehRol_An_Dsply_UB_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VehRol_An_Dsply_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Faulty = 127,
            En_NoDataExists = 126
        };
        
        VehRol_An_Dsply_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Faulty)) {}
        VehRol_An_Dsply_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Faulty):
                case static_cast<int32_t>(Literal::En_NoDataExists):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VehRol_An_Dsply_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VehRol_An_Dsply_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VehRol_An_Dsply_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VehRol_An_Dsply_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VehRol_An_Dsply_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VehRol_An_Dsply_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct TrnIpcDsplyGear_D_Actl_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_No_Gear_Selected = 15,
            En__14th_Gear = 14,
            En__13th_Gear = 13,
            En__12th_Gear = 12,
            En__11th_Gear = 11,
            En__10th_Gear = 10,
            En__9th_Gear = 9,
            En__8th_Gear = 8,
            En__7th_Gear = 7,
            En__6th_Gear = 6,
            En__5th_Gear = 5,
            En__4th_Gear = 4,
            En__3rd_Gear = 3,
            En__2nd_Gear = 2,
            En__1st_Gear = 1,
            En_Neutral = 0
        };
        
        TrnIpcDsplyGear_D_Actl_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_No_Gear_Selected)) {}
        TrnIpcDsplyGear_D_Actl_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_No_Gear_Selected):
                case static_cast<int32_t>(Literal::En__14th_Gear):
                case static_cast<int32_t>(Literal::En__13th_Gear):
                case static_cast<int32_t>(Literal::En__12th_Gear):
                case static_cast<int32_t>(Literal::En__11th_Gear):
                case static_cast<int32_t>(Literal::En__10th_Gear):
                case static_cast<int32_t>(Literal::En__9th_Gear):
                case static_cast<int32_t>(Literal::En__8th_Gear):
                case static_cast<int32_t>(Literal::En__7th_Gear):
                case static_cast<int32_t>(Literal::En__6th_Gear):
                case static_cast<int32_t>(Literal::En__5th_Gear):
                case static_cast<int32_t>(Literal::En__4th_Gear):
                case static_cast<int32_t>(Literal::En__3rd_Gear):
                case static_cast<int32_t>(Literal::En__2nd_Gear):
                case static_cast<int32_t>(Literal::En__1st_Gear):
                case static_cast<int32_t>(Literal::En_Neutral):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TrnIpcDsplyGear_D_Actl_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TrnIpcDsplyGear_D_Actl_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TrnIpcDsplyGear_D_Actl_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TrnIpcDsplyGear_D_Actl_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TrnIpcDsplyGear_D_Actl_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TrnIpcDsplyGear_D_Actl_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Mc_VehUnitTempUsrSel_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Temperature_deg_c = 0,
            En_Temperature_deg_f = 1
        };
        
        Mc_VehUnitTempUsrSel_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Temperature_deg_c)) {}
        Mc_VehUnitTempUsrSel_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Temperature_deg_c):
                case static_cast<int32_t>(Literal::En_Temperature_deg_f):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Mc_VehUnitTempUsrSel_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Mc_VehUnitTempUsrSel_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Mc_VehUnitTempUsrSel_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Mc_VehUnitTempUsrSel_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Mc_VehUnitTempUsrSel_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Mc_VehUnitTempUsrSel_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Mc_VehUntTrpCoUsrSel_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_TripComputer_metric = 0,
            En_TripComputer_imperial = 1
        };
        
        Mc_VehUntTrpCoUsrSel_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_TripComputer_metric)) {}
        Mc_VehUntTrpCoUsrSel_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_TripComputer_metric):
                case static_cast<int32_t>(Literal::En_TripComputer_imperial):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Mc_VehUntTrpCoUsrSel_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Mc_VehUntTrpCoUsrSel_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Mc_VehUntTrpCoUsrSel_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Mc_VehUntTrpCoUsrSel_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Mc_VehUntTrpCoUsrSel_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Mc_VehUntTrpCoUsrSel_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Tire_Press_ILR_Data_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Not_Supported = 65535,
            En_Invalid = 65534,
            En_Unknown = 65533
        };
        
        Tire_Press_ILR_Data_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Not_Supported)) {}
        Tire_Press_ILR_Data_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Not_Supported):
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Unknown):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Tire_Press_ILR_Data_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Tire_Press_ILR_Data_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Tire_Press_ILR_Data_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Tire_Press_ILR_Data_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Tire_Press_ILR_Data_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Tire_Press_ILR_Data_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Tire_Press_IRR_Data_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Not_Supported = 65535,
            En_Invalid = 65534,
            En_Unknown = 65533
        };
        
        Tire_Press_IRR_Data_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Not_Supported)) {}
        Tire_Press_IRR_Data_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Not_Supported):
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Unknown):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Tire_Press_IRR_Data_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Tire_Press_IRR_Data_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Tire_Press_IRR_Data_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Tire_Press_IRR_Data_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Tire_Press_IRR_Data_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Tire_Press_IRR_Data_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct Tire_Pressure_Data_DRW_HS3_struct : CommonAPI::Struct<Tire_Press_ILR_Data_enum, Tire_Press_IRR_Data_enum> {
    	
    	Tire_Pressure_Data_DRW_HS3_struct() {
    	}
    	Tire_Pressure_Data_DRW_HS3_struct(const Tire_Press_ILR_Data_enum &_tire_Press_ILR_Data_enum, const Tire_Press_IRR_Data_enum &_tire_Press_IRR_Data_enum)
    	{
    		std::get<0>(values_) = _tire_Press_ILR_Data_enum;
    		std::get<1>(values_) = _tire_Press_IRR_Data_enum;
    	}
    	inline const Tire_Press_ILR_Data_enum &getTire_Press_ILR_Data_enum() const { return std::get<0>(values_); }
    	inline void setTire_Press_ILR_Data_enum(const Tire_Press_ILR_Data_enum &_value) { std::get<0>(values_) = _value; }
    	inline const Tire_Press_IRR_Data_enum &getTire_Press_IRR_Data_enum() const { return std::get<1>(values_); }
    	inline void setTire_Press_IRR_Data_enum(const Tire_Press_IRR_Data_enum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const Tire_Pressure_Data_DRW_HS3_struct& _other) const {
                return (getTire_Press_ILR_Data_enum() == _other.getTire_Press_ILR_Data_enum() && getTire_Press_IRR_Data_enum() == _other.getTire_Press_IRR_Data_enum());
        }
    	inline bool operator!=(const Tire_Pressure_Data_DRW_HS3_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct Tire_Press_Telltale_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Not_Used = 3,
            En_On = 1,
            En_Off = 0,
            En_Flash = 2
        };
        
        Tire_Press_Telltale_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Not_Used)) {}
        Tire_Press_Telltale_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Not_Used):
                case static_cast<int32_t>(Literal::En_On):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_Flash):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Tire_Press_Telltale_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Tire_Press_Telltale_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Tire_Press_Telltale_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Tire_Press_Telltale_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Tire_Press_Telltale_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Tire_Press_Telltale_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Tire_Press_System_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Tires_not_trained = 14,
            En_Training_Complete = 13,
            En_Train_InsideLeftRear_tire = 12,
            En_Train_OutsideLeftRear_tire = 11,
            En_Train_LeftRear_tire = 10,
            En_Train_InsideRtRear__tire = 9,
            En_Train_OutsideRtRear_tire = 8,
            En_Train_RightRear_tire = 7,
            En_Train_RightFront_tire = 6,
            En_Train_LeftFront_tire = 5,
            En_Systm_Activ_Composite_Stat = 4,
            En_Low_Composite_Stat = 3,
            En_Sensr_Fault_Composite_Stat = 2,
            En_Systm_Fault_Composite_Stat = 1,
            En_Unknown_Composite_Stat = 0
        };
        
        Tire_Press_System_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Tires_not_trained)) {}
        Tire_Press_System_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Tires_not_trained):
                case static_cast<int32_t>(Literal::En_Training_Complete):
                case static_cast<int32_t>(Literal::En_Train_InsideLeftRear_tire):
                case static_cast<int32_t>(Literal::En_Train_OutsideLeftRear_tire):
                case static_cast<int32_t>(Literal::En_Train_LeftRear_tire):
                case static_cast<int32_t>(Literal::En_Train_InsideRtRear__tire):
                case static_cast<int32_t>(Literal::En_Train_OutsideRtRear_tire):
                case static_cast<int32_t>(Literal::En_Train_RightRear_tire):
                case static_cast<int32_t>(Literal::En_Train_RightFront_tire):
                case static_cast<int32_t>(Literal::En_Train_LeftFront_tire):
                case static_cast<int32_t>(Literal::En_Systm_Activ_Composite_Stat):
                case static_cast<int32_t>(Literal::En_Low_Composite_Stat):
                case static_cast<int32_t>(Literal::En_Sensr_Fault_Composite_Stat):
                case static_cast<int32_t>(Literal::En_Systm_Fault_Composite_Stat):
                case static_cast<int32_t>(Literal::En_Unknown_Composite_Stat):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Tire_Press_System_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Tire_Press_System_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Tire_Press_System_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Tire_Press_System_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Tire_Press_System_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Tire_Press_System_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Tire_Press_RF_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Alert = 4,
            En_Not_Supported = 15,
            En_Fault = 3,
            En_Low = 2,
            En_Normal = 1,
            En_Unknown = 0
        };
        
        Tire_Press_RF_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Alert)) {}
        Tire_Press_RF_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Alert):
                case static_cast<int32_t>(Literal::En_Not_Supported):
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_Low):
                case static_cast<int32_t>(Literal::En_Normal):
                case static_cast<int32_t>(Literal::En_Unknown):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Tire_Press_RF_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Tire_Press_RF_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Tire_Press_RF_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Tire_Press_RF_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Tire_Press_RF_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Tire_Press_RF_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Tire_Press_LF_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Alert = 4,
            En_Not_Supported = 15,
            En_Fault = 3,
            En_Low = 2,
            En_Normal = 1,
            En_Unknown = 0
        };
        
        Tire_Press_LF_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Alert)) {}
        Tire_Press_LF_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Alert):
                case static_cast<int32_t>(Literal::En_Not_Supported):
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_Low):
                case static_cast<int32_t>(Literal::En_Normal):
                case static_cast<int32_t>(Literal::En_Unknown):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Tire_Press_LF_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Tire_Press_LF_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Tire_Press_LF_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Tire_Press_LF_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Tire_Press_LF_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Tire_Press_LF_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Tire_Press_LR_OLR_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Alert = 4,
            En_Not_Supported = 15,
            En_Fault = 3,
            En_Low = 2,
            En_Normal = 1,
            En_Unknown = 0
        };
        
        Tire_Press_LR_OLR_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Alert)) {}
        Tire_Press_LR_OLR_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Alert):
                case static_cast<int32_t>(Literal::En_Not_Supported):
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_Low):
                case static_cast<int32_t>(Literal::En_Normal):
                case static_cast<int32_t>(Literal::En_Unknown):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Tire_Press_LR_OLR_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Tire_Press_LR_OLR_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Tire_Press_LR_OLR_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Tire_Press_LR_OLR_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Tire_Press_LR_OLR_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Tire_Press_LR_OLR_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Tire_Press_RR_ORR_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Alert = 4,
            En_Not_Supported = 15,
            En_Fault = 3,
            En_Low = 2,
            En_Normal = 1,
            En_Unknown = 0
        };
        
        Tire_Press_RR_ORR_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Alert)) {}
        Tire_Press_RR_ORR_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Alert):
                case static_cast<int32_t>(Literal::En_Not_Supported):
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_Low):
                case static_cast<int32_t>(Literal::En_Normal):
                case static_cast<int32_t>(Literal::En_Unknown):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Tire_Press_RR_ORR_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Tire_Press_RR_ORR_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Tire_Press_RR_ORR_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Tire_Press_RR_ORR_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Tire_Press_RR_ORR_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Tire_Press_RR_ORR_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Tire_Press_ILR_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Alert = 4,
            En_Not_Supported = 15,
            En_Fault = 3,
            En_Low = 2,
            En_Normal = 1,
            En_Unknown = 0
        };
        
        Tire_Press_ILR_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Alert)) {}
        Tire_Press_ILR_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Alert):
                case static_cast<int32_t>(Literal::En_Not_Supported):
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_Low):
                case static_cast<int32_t>(Literal::En_Normal):
                case static_cast<int32_t>(Literal::En_Unknown):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Tire_Press_ILR_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Tire_Press_ILR_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Tire_Press_ILR_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Tire_Press_ILR_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Tire_Press_ILR_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Tire_Press_ILR_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Tire_Press_IRR_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Alert = 4,
            En_Not_Supported = 15,
            En_Fault = 3,
            En_Low = 2,
            En_Normal = 1,
            En_Unknown = 0
        };
        
        Tire_Press_IRR_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Alert)) {}
        Tire_Press_IRR_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Alert):
                case static_cast<int32_t>(Literal::En_Not_Supported):
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_Low):
                case static_cast<int32_t>(Literal::En_Normal):
                case static_cast<int32_t>(Literal::En_Unknown):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Tire_Press_IRR_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Tire_Press_IRR_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Tire_Press_IRR_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Tire_Press_IRR_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Tire_Press_IRR_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Tire_Press_IRR_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct Tire_Pressure_Status_struct : CommonAPI::Struct<Tire_Press_Telltale_enum, Tire_Press_System_Stat_enum, Tire_Press_RF_Stat_enum, Tire_Press_LF_Stat_enum, Tire_Press_LR_OLR_Stat_enum, Tire_Press_RR_ORR_Stat_enum, Tire_Press_ILR_Stat_enum, Tire_Press_IRR_Stat_enum, uint8_t, uint8_t> {
    	
    	Tire_Pressure_Status_struct() {
    	}
    	Tire_Pressure_Status_struct(const Tire_Press_Telltale_enum &_tire_Press_Telltale_enum, const Tire_Press_System_Stat_enum &_tire_Press_System_Stat_enum, const Tire_Press_RF_Stat_enum &_tire_Press_RF_Stat_enum, const Tire_Press_LF_Stat_enum &_tire_Press_LF_Stat_enum, const Tire_Press_LR_OLR_Stat_enum &_tire_Press_LR_OLR_Stat_enum, const Tire_Press_RR_ORR_Stat_enum &_tire_Press_RR_ORR_Stat_enum, const Tire_Press_ILR_Stat_enum &_tire_Press_ILR_Stat_enum, const Tire_Press_IRR_Stat_enum &_tire_Press_IRR_Stat_enum, const uint8_t &_Tire_Press_Placrd_Frnt, const uint8_t &_Tire_Press_Placrd_Rear)
    	{
    		std::get<0>(values_) = _tire_Press_Telltale_enum;
    		std::get<1>(values_) = _tire_Press_System_Stat_enum;
    		std::get<2>(values_) = _tire_Press_RF_Stat_enum;
    		std::get<3>(values_) = _tire_Press_LF_Stat_enum;
    		std::get<4>(values_) = _tire_Press_LR_OLR_Stat_enum;
    		std::get<5>(values_) = _tire_Press_RR_ORR_Stat_enum;
    		std::get<6>(values_) = _tire_Press_ILR_Stat_enum;
    		std::get<7>(values_) = _tire_Press_IRR_Stat_enum;
    		std::get<8>(values_) = _Tire_Press_Placrd_Frnt;
    		std::get<9>(values_) = _Tire_Press_Placrd_Rear;
    	}
    	inline const Tire_Press_Telltale_enum &getTire_Press_Telltale_enum() const { return std::get<0>(values_); }
    	inline void setTire_Press_Telltale_enum(const Tire_Press_Telltale_enum &_value) { std::get<0>(values_) = _value; }
    	inline const Tire_Press_System_Stat_enum &getTire_Press_System_Stat_enum() const { return std::get<1>(values_); }
    	inline void setTire_Press_System_Stat_enum(const Tire_Press_System_Stat_enum &_value) { std::get<1>(values_) = _value; }
    	inline const Tire_Press_RF_Stat_enum &getTire_Press_RF_Stat_enum() const { return std::get<2>(values_); }
    	inline void setTire_Press_RF_Stat_enum(const Tire_Press_RF_Stat_enum &_value) { std::get<2>(values_) = _value; }
    	inline const Tire_Press_LF_Stat_enum &getTire_Press_LF_Stat_enum() const { return std::get<3>(values_); }
    	inline void setTire_Press_LF_Stat_enum(const Tire_Press_LF_Stat_enum &_value) { std::get<3>(values_) = _value; }
    	inline const Tire_Press_LR_OLR_Stat_enum &getTire_Press_LR_OLR_Stat_enum() const { return std::get<4>(values_); }
    	inline void setTire_Press_LR_OLR_Stat_enum(const Tire_Press_LR_OLR_Stat_enum &_value) { std::get<4>(values_) = _value; }
    	inline const Tire_Press_RR_ORR_Stat_enum &getTire_Press_RR_ORR_Stat_enum() const { return std::get<5>(values_); }
    	inline void setTire_Press_RR_ORR_Stat_enum(const Tire_Press_RR_ORR_Stat_enum &_value) { std::get<5>(values_) = _value; }
    	inline const Tire_Press_ILR_Stat_enum &getTire_Press_ILR_Stat_enum() const { return std::get<6>(values_); }
    	inline void setTire_Press_ILR_Stat_enum(const Tire_Press_ILR_Stat_enum &_value) { std::get<6>(values_) = _value; }
    	inline const Tire_Press_IRR_Stat_enum &getTire_Press_IRR_Stat_enum() const { return std::get<7>(values_); }
    	inline void setTire_Press_IRR_Stat_enum(const Tire_Press_IRR_Stat_enum &_value) { std::get<7>(values_) = _value; }
    	inline const uint8_t &getTire_Press_Placrd_Frnt() const { return std::get<8>(values_); }
    	inline void setTire_Press_Placrd_Frnt(const uint8_t &_value) { std::get<8>(values_) = _value; }
    	inline const uint8_t &getTire_Press_Placrd_Rear() const { return std::get<9>(values_); }
    	inline void setTire_Press_Placrd_Rear(const uint8_t &_value) { std::get<9>(values_) = _value; }
    	inline bool operator==(const Tire_Pressure_Status_struct& _other) const {
                return (getTire_Press_Telltale_enum() == _other.getTire_Press_Telltale_enum() && getTire_Press_System_Stat_enum() == _other.getTire_Press_System_Stat_enum() && getTire_Press_RF_Stat_enum() == _other.getTire_Press_RF_Stat_enum() && getTire_Press_LF_Stat_enum() == _other.getTire_Press_LF_Stat_enum() && getTire_Press_LR_OLR_Stat_enum() == _other.getTire_Press_LR_OLR_Stat_enum() && getTire_Press_RR_ORR_Stat_enum() == _other.getTire_Press_RR_ORR_Stat_enum() && getTire_Press_ILR_Stat_enum() == _other.getTire_Press_ILR_Stat_enum() && getTire_Press_IRR_Stat_enum() == _other.getTire_Press_IRR_Stat_enum() && getTire_Press_Placrd_Frnt() == _other.getTire_Press_Placrd_Frnt() && getTire_Press_Placrd_Rear() == _other.getTire_Press_Placrd_Rear());
        }
    	inline bool operator!=(const Tire_Pressure_Status_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct Tire_Press_LF_Data_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Not_Supported = 65535,
            En_Invalid = 65534,
            En_Unknown = 65533
        };
        
        Tire_Press_LF_Data_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Not_Supported)) {}
        Tire_Press_LF_Data_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Not_Supported):
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Unknown):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Tire_Press_LF_Data_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Tire_Press_LF_Data_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Tire_Press_LF_Data_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Tire_Press_LF_Data_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Tire_Press_LF_Data_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Tire_Press_LF_Data_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Tire_Press_RF_Data_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Not_Supported = 65535,
            En_Invalid = 65534,
            En_Unknown = 65533
        };
        
        Tire_Press_RF_Data_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Not_Supported)) {}
        Tire_Press_RF_Data_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Not_Supported):
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Unknown):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Tire_Press_RF_Data_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Tire_Press_RF_Data_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Tire_Press_RF_Data_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Tire_Press_RF_Data_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Tire_Press_RF_Data_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Tire_Press_RF_Data_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Tire_Press_RR_ORR_Data_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Not_Supported = 65535,
            En_Invalid = 65534,
            En_Unknown = 65533
        };
        
        Tire_Press_RR_ORR_Data_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Not_Supported)) {}
        Tire_Press_RR_ORR_Data_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Not_Supported):
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Unknown):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Tire_Press_RR_ORR_Data_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Tire_Press_RR_ORR_Data_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Tire_Press_RR_ORR_Data_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Tire_Press_RR_ORR_Data_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Tire_Press_RR_ORR_Data_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Tire_Press_RR_ORR_Data_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Tire_Press_LR_OLR_Data_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Not_Supported = 65535,
            En_Invalid = 65534,
            En_Unknown = 65533
        };
        
        Tire_Press_LR_OLR_Data_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Not_Supported)) {}
        Tire_Press_LR_OLR_Data_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Not_Supported):
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Unknown):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Tire_Press_LR_OLR_Data_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Tire_Press_LR_OLR_Data_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Tire_Press_LR_OLR_Data_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Tire_Press_LR_OLR_Data_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Tire_Press_LR_OLR_Data_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Tire_Press_LR_OLR_Data_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct Tire_Pressure_Data_HS3_struct : CommonAPI::Struct<Tire_Press_LF_Data_enum, Tire_Press_RF_Data_enum, Tire_Press_RR_ORR_Data_enum, Tire_Press_LR_OLR_Data_enum> {
    	
    	Tire_Pressure_Data_HS3_struct() {
    	}
    	Tire_Pressure_Data_HS3_struct(const Tire_Press_LF_Data_enum &_tire_Press_LF_Data_enum, const Tire_Press_RF_Data_enum &_tire_Press_RF_Data_enum, const Tire_Press_RR_ORR_Data_enum &_tire_Press_RR_ORR_Data_enum, const Tire_Press_LR_OLR_Data_enum &_tire_Press_LR_OLR_Data_enum)
    	{
    		std::get<0>(values_) = _tire_Press_LF_Data_enum;
    		std::get<1>(values_) = _tire_Press_RF_Data_enum;
    		std::get<2>(values_) = _tire_Press_RR_ORR_Data_enum;
    		std::get<3>(values_) = _tire_Press_LR_OLR_Data_enum;
    	}
    	inline const Tire_Press_LF_Data_enum &getTire_Press_LF_Data_enum() const { return std::get<0>(values_); }
    	inline void setTire_Press_LF_Data_enum(const Tire_Press_LF_Data_enum &_value) { std::get<0>(values_) = _value; }
    	inline const Tire_Press_RF_Data_enum &getTire_Press_RF_Data_enum() const { return std::get<1>(values_); }
    	inline void setTire_Press_RF_Data_enum(const Tire_Press_RF_Data_enum &_value) { std::get<1>(values_) = _value; }
    	inline const Tire_Press_RR_ORR_Data_enum &getTire_Press_RR_ORR_Data_enum() const { return std::get<2>(values_); }
    	inline void setTire_Press_RR_ORR_Data_enum(const Tire_Press_RR_ORR_Data_enum &_value) { std::get<2>(values_) = _value; }
    	inline const Tire_Press_LR_OLR_Data_enum &getTire_Press_LR_OLR_Data_enum() const { return std::get<3>(values_); }
    	inline void setTire_Press_LR_OLR_Data_enum(const Tire_Press_LR_OLR_Data_enum &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const Tire_Pressure_Data_HS3_struct& _other) const {
                return (getTire_Press_LF_Data_enum() == _other.getTire_Press_LF_Data_enum() && getTire_Press_RF_Data_enum() == _other.getTire_Press_RF_Data_enum() && getTire_Press_RR_ORR_Data_enum() == _other.getTire_Press_RR_ORR_Data_enum() && getTire_Press_LR_OLR_Data_enum() == _other.getTire_Press_LR_OLR_Data_enum());
        }
    	inline bool operator!=(const Tire_Pressure_Data_HS3_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct Body_Info_sig_5_struct : CommonAPI::Struct<uint8_t, GboxOil_Te_Actl_UB_enum> {
    	
    	Body_Info_sig_5_struct() {
    	}
    	Body_Info_sig_5_struct(const uint8_t &_GboxOil_Te_Actl, const GboxOil_Te_Actl_UB_enum &_gboxOil_Te_Actl_UB_enum)
    	{
    		std::get<0>(values_) = _GboxOil_Te_Actl;
    		std::get<1>(values_) = _gboxOil_Te_Actl_UB_enum;
    	}
    	inline const uint8_t &getGboxOil_Te_Actl() const { return std::get<0>(values_); }
    	inline void setGboxOil_Te_Actl(const uint8_t &_value) { std::get<0>(values_) = _value; }
    	inline const GboxOil_Te_Actl_UB_enum &getGboxOil_Te_Actl_UB_enum() const { return std::get<1>(values_); }
    	inline void setGboxOil_Te_Actl_UB_enum(const GboxOil_Te_Actl_UB_enum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const Body_Info_sig_5_struct& _other) const {
                return (getGboxOil_Te_Actl() == _other.getGboxOil_Te_Actl() && getGboxOil_Te_Actl_UB_enum() == _other.getGboxOil_Te_Actl_UB_enum());
        }
    	inline bool operator!=(const Body_Info_sig_5_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct BrakeSnData_2_sig_0_struct : CommonAPI::Struct<VehOverGnd_V_Est_enum, VehOverGnd_V_Est_UB_enum> {
    	
    	BrakeSnData_2_sig_0_struct() {
    	}
    	BrakeSnData_2_sig_0_struct(const VehOverGnd_V_Est_enum &_vehOverGnd_V_Est_enum, const VehOverGnd_V_Est_UB_enum &_vehOverGnd_V_Est_UB_enum)
    	{
    		std::get<0>(values_) = _vehOverGnd_V_Est_enum;
    		std::get<1>(values_) = _vehOverGnd_V_Est_UB_enum;
    	}
    	inline const VehOverGnd_V_Est_enum &getVehOverGnd_V_Est_enum() const { return std::get<0>(values_); }
    	inline void setVehOverGnd_V_Est_enum(const VehOverGnd_V_Est_enum &_value) { std::get<0>(values_) = _value; }
    	inline const VehOverGnd_V_Est_UB_enum &getVehOverGnd_V_Est_UB_enum() const { return std::get<1>(values_); }
    	inline void setVehOverGnd_V_Est_UB_enum(const VehOverGnd_V_Est_UB_enum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const BrakeSnData_2_sig_0_struct& _other) const {
                return (getVehOverGnd_V_Est_enum() == _other.getVehOverGnd_V_Est_enum() && getVehOverGnd_V_Est_UB_enum() == _other.getVehOverGnd_V_Est_UB_enum());
        }
    	inline bool operator!=(const BrakeSnData_2_sig_0_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct EngineData_12_HS3_sig_2_struct : CommonAPI::Struct<PtDrvMde_D_Stat_enum, PtDrvMde_D_Stat_UB_enum> {
    	
    	EngineData_12_HS3_sig_2_struct() {
    	}
    	EngineData_12_HS3_sig_2_struct(const PtDrvMde_D_Stat_enum &_ptDrvMde_D_Stat_enum, const PtDrvMde_D_Stat_UB_enum &_ptDrvMde_D_Stat_UB_enum)
    	{
    		std::get<0>(values_) = _ptDrvMde_D_Stat_enum;
    		std::get<1>(values_) = _ptDrvMde_D_Stat_UB_enum;
    	}
    	inline const PtDrvMde_D_Stat_enum &getPtDrvMde_D_Stat_enum() const { return std::get<0>(values_); }
    	inline void setPtDrvMde_D_Stat_enum(const PtDrvMde_D_Stat_enum &_value) { std::get<0>(values_) = _value; }
    	inline const PtDrvMde_D_Stat_UB_enum &getPtDrvMde_D_Stat_UB_enum() const { return std::get<1>(values_); }
    	inline void setPtDrvMde_D_Stat_UB_enum(const PtDrvMde_D_Stat_UB_enum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const EngineData_12_HS3_sig_2_struct& _other) const {
                return (getPtDrvMde_D_Stat_enum() == _other.getPtDrvMde_D_Stat_enum() && getPtDrvMde_D_Stat_UB_enum() == _other.getPtDrvMde_D_Stat_UB_enum());
        }
    	inline bool operator!=(const EngineData_12_HS3_sig_2_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct GWM_Send_Signals_sig_0_struct : CommonAPI::Struct<BpedDrvAppl_D_Actl_enum, BpedDrvAppl_D_Actl_UB_enum> {
    	
    	GWM_Send_Signals_sig_0_struct() {
    	}
    	GWM_Send_Signals_sig_0_struct(const BpedDrvAppl_D_Actl_enum &_bpedDrvAppl_D_Actl_enum, const BpedDrvAppl_D_Actl_UB_enum &_bpedDrvAppl_D_Actl_UB_enum)
    	{
    		std::get<0>(values_) = _bpedDrvAppl_D_Actl_enum;
    		std::get<1>(values_) = _bpedDrvAppl_D_Actl_UB_enum;
    	}
    	inline const BpedDrvAppl_D_Actl_enum &getBpedDrvAppl_D_Actl_enum() const { return std::get<0>(values_); }
    	inline void setBpedDrvAppl_D_Actl_enum(const BpedDrvAppl_D_Actl_enum &_value) { std::get<0>(values_) = _value; }
    	inline const BpedDrvAppl_D_Actl_UB_enum &getBpedDrvAppl_D_Actl_UB_enum() const { return std::get<1>(values_); }
    	inline void setBpedDrvAppl_D_Actl_UB_enum(const BpedDrvAppl_D_Actl_UB_enum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const GWM_Send_Signals_sig_0_struct& _other) const {
                return (getBpedDrvAppl_D_Actl_enum() == _other.getBpedDrvAppl_D_Actl_enum() && getBpedDrvAppl_D_Actl_UB_enum() == _other.getBpedDrvAppl_D_Actl_UB_enum());
        }
    	inline bool operator!=(const GWM_Send_Signals_sig_0_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct TrailerBrakeData_sig_0_struct : CommonAPI::Struct<VehPtch_An_Dsply_enum, VehPtch_An_Dsply_UB_enum> {
    	
    	TrailerBrakeData_sig_0_struct() {
    	}
    	TrailerBrakeData_sig_0_struct(const VehPtch_An_Dsply_enum &_vehPtch_An_Dsply_enum, const VehPtch_An_Dsply_UB_enum &_vehPtch_An_Dsply_UB_enum)
    	{
    		std::get<0>(values_) = _vehPtch_An_Dsply_enum;
    		std::get<1>(values_) = _vehPtch_An_Dsply_UB_enum;
    	}
    	inline const VehPtch_An_Dsply_enum &getVehPtch_An_Dsply_enum() const { return std::get<0>(values_); }
    	inline void setVehPtch_An_Dsply_enum(const VehPtch_An_Dsply_enum &_value) { std::get<0>(values_) = _value; }
    	inline const VehPtch_An_Dsply_UB_enum &getVehPtch_An_Dsply_UB_enum() const { return std::get<1>(values_); }
    	inline void setVehPtch_An_Dsply_UB_enum(const VehPtch_An_Dsply_UB_enum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const TrailerBrakeData_sig_0_struct& _other) const {
                return (getVehPtch_An_Dsply_enum() == _other.getVehPtch_An_Dsply_enum() && getVehPtch_An_Dsply_UB_enum() == _other.getVehPtch_An_Dsply_UB_enum());
        }
    	inline bool operator!=(const TrailerBrakeData_sig_0_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct TrailerBrakeData_sig_1_struct : CommonAPI::Struct<VehRol_An_Dsply_enum, VehRol_An_Dsply_UB_enum> {
    	
    	TrailerBrakeData_sig_1_struct() {
    	}
    	TrailerBrakeData_sig_1_struct(const VehRol_An_Dsply_enum &_vehRol_An_Dsply_enum, const VehRol_An_Dsply_UB_enum &_vehRol_An_Dsply_UB_enum)
    	{
    		std::get<0>(values_) = _vehRol_An_Dsply_enum;
    		std::get<1>(values_) = _vehRol_An_Dsply_UB_enum;
    	}
    	inline const VehRol_An_Dsply_enum &getVehRol_An_Dsply_enum() const { return std::get<0>(values_); }
    	inline void setVehRol_An_Dsply_enum(const VehRol_An_Dsply_enum &_value) { std::get<0>(values_) = _value; }
    	inline const VehRol_An_Dsply_UB_enum &getVehRol_An_Dsply_UB_enum() const { return std::get<1>(values_); }
    	inline void setVehRol_An_Dsply_UB_enum(const VehRol_An_Dsply_UB_enum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const TrailerBrakeData_sig_1_struct& _other) const {
                return (getVehRol_An_Dsply_enum() == _other.getVehRol_An_Dsply_enum() && getVehRol_An_Dsply_UB_enum() == _other.getVehRol_An_Dsply_UB_enum());
        }
    	inline bool operator!=(const TrailerBrakeData_sig_1_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.harman.ford.enginedata_types";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct enginedata_types

} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for GboxOil_Te_Actl_UB_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::GboxOil_Te_Actl_UB_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::GboxOil_Te_Actl_UB_enum& gboxOil_Te_Actl_UB_enum) const {
            return static_cast<int32_t>(gboxOil_Te_Actl_UB_enum);
        }
    };
    //Hash for VehOverGnd_V_Est_UB_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::VehOverGnd_V_Est_UB_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::VehOverGnd_V_Est_UB_enum& vehOverGnd_V_Est_UB_enum) const {
            return static_cast<int32_t>(vehOverGnd_V_Est_UB_enum);
        }
    };
    //Hash for VehOverGnd_V_Est_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::VehOverGnd_V_Est_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::VehOverGnd_V_Est_enum& vehOverGnd_V_Est_enum) const {
            return static_cast<int32_t>(vehOverGnd_V_Est_enum);
        }
    };
    //Hash for PrkBrkStatus_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::PrkBrkStatus_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::PrkBrkStatus_enum& prkBrkStatus_enum) const {
            return static_cast<int32_t>(prkBrkStatus_enum);
        }
    };
    //Hash for AbsActv_B_Actl_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::AbsActv_B_Actl_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::AbsActv_B_Actl_enum& absActv_B_Actl_enum) const {
            return static_cast<int32_t>(absActv_B_Actl_enum);
        }
    };
    //Hash for FactoryReset_St_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::FactoryReset_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::FactoryReset_St_enum& factoryReset_St_enum) const {
            return static_cast<int32_t>(factoryReset_St_enum);
        }
    };
    //Hash for DrStatTgate_B_Actl_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::DrStatTgate_B_Actl_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::DrStatTgate_B_Actl_enum& drStatTgate_B_Actl_enum) const {
            return static_cast<int32_t>(drStatTgate_B_Actl_enum);
        }
    };
    //Hash for Ignition_Status_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::Ignition_Status_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::Ignition_Status_enum& ignition_Status_enum) const {
            return static_cast<int32_t>(ignition_Status_enum);
        }
    };
    //Hash for IgnKeyType_D_Actl_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::IgnKeyType_D_Actl_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::IgnKeyType_D_Actl_enum& ignKeyType_D_Actl_enum) const {
            return static_cast<int32_t>(ignKeyType_D_Actl_enum);
        }
    };
    //Hash for DrStatRl_B_Actl_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::DrStatRl_B_Actl_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::DrStatRl_B_Actl_enum& drStatRl_B_Actl_enum) const {
            return static_cast<int32_t>(drStatRl_B_Actl_enum);
        }
    };
    //Hash for DrStatRr_B_Actl_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::DrStatRr_B_Actl_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::DrStatRr_B_Actl_enum& drStatRr_B_Actl_enum) const {
            return static_cast<int32_t>(drStatRr_B_Actl_enum);
        }
    };
    //Hash for LifeCycMde_D_Actl_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::LifeCycMde_D_Actl_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::LifeCycMde_D_Actl_enum& lifeCycMde_D_Actl_enum) const {
            return static_cast<int32_t>(lifeCycMde_D_Actl_enum);
        }
    };
    //Hash for PrkBrkActv_B_Actl_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::PrkBrkActv_B_Actl_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::PrkBrkActv_B_Actl_enum& prkBrkActv_B_Actl_enum) const {
            return static_cast<int32_t>(prkBrkActv_B_Actl_enum);
        }
    };
    //Hash for Delay_Accy_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::Delay_Accy_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::Delay_Accy_enum& delay_Accy_enum) const {
            return static_cast<int32_t>(delay_Accy_enum);
        }
    };
    //Hash for DrStatDrv_B_Actl_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::DrStatDrv_B_Actl_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::DrStatDrv_B_Actl_enum& drStatDrv_B_Actl_enum) const {
            return static_cast<int32_t>(drStatDrv_B_Actl_enum);
        }
    };
    //Hash for PwPckTq_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::PwPckTq_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::PwPckTq_D_Stat_enum& pwPckTq_D_Stat_enum) const {
            return static_cast<int32_t>(pwPckTq_D_Stat_enum);
        }
    };
    //Hash for Eng_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::Eng_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::Eng_D_Stat_enum& eng_D_Stat_enum) const {
            return static_cast<int32_t>(eng_D_Stat_enum);
        }
    };
    //Hash for TrnAinTq_D_Qf_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::TrnAinTq_D_Qf_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::TrnAinTq_D_Qf_enum& trnAinTq_D_Qf_enum) const {
            return static_cast<int32_t>(trnAinTq_D_Qf_enum);
        }
    };
    //Hash for PtDrvMde_D_Stat_UB_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::PtDrvMde_D_Stat_UB_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::PtDrvMde_D_Stat_UB_enum& ptDrvMde_D_Stat_UB_enum) const {
            return static_cast<int32_t>(ptDrvMde_D_Stat_UB_enum);
        }
    };
    //Hash for PtDrvMde_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::PtDrvMde_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::PtDrvMde_D_Stat_enum& ptDrvMde_D_Stat_enum) const {
            return static_cast<int32_t>(ptDrvMde_D_Stat_enum);
        }
    };
    //Hash for TrnAout_W_ActlUnfilt_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::TrnAout_W_ActlUnfilt_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::TrnAout_W_ActlUnfilt_enum& trnAout_W_ActlUnfilt_enum) const {
            return static_cast<int32_t>(trnAout_W_ActlUnfilt_enum);
        }
    };
    //Hash for BpedDrvAppl_D_Actl_UB_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::BpedDrvAppl_D_Actl_UB_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::BpedDrvAppl_D_Actl_UB_enum& bpedDrvAppl_D_Actl_UB_enum) const {
            return static_cast<int32_t>(bpedDrvAppl_D_Actl_UB_enum);
        }
    };
    //Hash for BpedDrvAppl_D_Actl_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::BpedDrvAppl_D_Actl_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::BpedDrvAppl_D_Actl_enum& bpedDrvAppl_D_Actl_enum) const {
            return static_cast<int32_t>(bpedDrvAppl_D_Actl_enum);
        }
    };
    //Hash for ApedPosPcActl_D_Qf_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::ApedPosPcActl_D_Qf_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::ApedPosPcActl_D_Qf_enum& apedPosPcActl_D_Qf_enum) const {
            return static_cast<int32_t>(apedPosPcActl_D_Qf_enum);
        }
    };
    //Hash for EngAoutTqActl_D_Qf_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::EngAoutTqActl_D_Qf_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::EngAoutTqActl_D_Qf_enum& engAoutTqActl_D_Qf_enum) const {
            return static_cast<int32_t>(engAoutTqActl_D_Qf_enum);
        }
    };
    //Hash for Disp_VehUntTripCoUsrSel_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::Disp_VehUntTripCoUsrSel_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::Disp_VehUntTripCoUsrSel_enum& disp_VehUntTripCoUsrSel_enum) const {
            return static_cast<int32_t>(disp_VehUntTripCoUsrSel_enum);
        }
    };
    //Hash for Disp_VehUnitTempUsrSel_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::Disp_VehUnitTempUsrSel_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::Disp_VehUnitTempUsrSel_enum& disp_VehUnitTempUsrSel_enum) const {
            return static_cast<int32_t>(disp_VehUnitTempUsrSel_enum);
        }
    };
    //Hash for VehPtch_An_Dsply_UB_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::VehPtch_An_Dsply_UB_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::VehPtch_An_Dsply_UB_enum& vehPtch_An_Dsply_UB_enum) const {
            return static_cast<int32_t>(vehPtch_An_Dsply_UB_enum);
        }
    };
    //Hash for VehPtch_An_Dsply_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::VehPtch_An_Dsply_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::VehPtch_An_Dsply_enum& vehPtch_An_Dsply_enum) const {
            return static_cast<int32_t>(vehPtch_An_Dsply_enum);
        }
    };
    //Hash for VehRol_An_Dsply_UB_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::VehRol_An_Dsply_UB_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::VehRol_An_Dsply_UB_enum& vehRol_An_Dsply_UB_enum) const {
            return static_cast<int32_t>(vehRol_An_Dsply_UB_enum);
        }
    };
    //Hash for VehRol_An_Dsply_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::VehRol_An_Dsply_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::VehRol_An_Dsply_enum& vehRol_An_Dsply_enum) const {
            return static_cast<int32_t>(vehRol_An_Dsply_enum);
        }
    };
    //Hash for TrnIpcDsplyGear_D_Actl_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::TrnIpcDsplyGear_D_Actl_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::TrnIpcDsplyGear_D_Actl_enum& trnIpcDsplyGear_D_Actl_enum) const {
            return static_cast<int32_t>(trnIpcDsplyGear_D_Actl_enum);
        }
    };
    //Hash for Mc_VehUnitTempUsrSel_St_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::Mc_VehUnitTempUsrSel_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::Mc_VehUnitTempUsrSel_St_enum& mc_VehUnitTempUsrSel_St_enum) const {
            return static_cast<int32_t>(mc_VehUnitTempUsrSel_St_enum);
        }
    };
    //Hash for Mc_VehUntTrpCoUsrSel_St_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::Mc_VehUntTrpCoUsrSel_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::Mc_VehUntTrpCoUsrSel_St_enum& mc_VehUntTrpCoUsrSel_St_enum) const {
            return static_cast<int32_t>(mc_VehUntTrpCoUsrSel_St_enum);
        }
    };
    //Hash for Tire_Press_ILR_Data_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::Tire_Press_ILR_Data_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::Tire_Press_ILR_Data_enum& tire_Press_ILR_Data_enum) const {
            return static_cast<int32_t>(tire_Press_ILR_Data_enum);
        }
    };
    //Hash for Tire_Press_IRR_Data_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::Tire_Press_IRR_Data_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::Tire_Press_IRR_Data_enum& tire_Press_IRR_Data_enum) const {
            return static_cast<int32_t>(tire_Press_IRR_Data_enum);
        }
    };
    //Hash for Tire_Press_Telltale_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::Tire_Press_Telltale_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::Tire_Press_Telltale_enum& tire_Press_Telltale_enum) const {
            return static_cast<int32_t>(tire_Press_Telltale_enum);
        }
    };
    //Hash for Tire_Press_System_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::Tire_Press_System_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::Tire_Press_System_Stat_enum& tire_Press_System_Stat_enum) const {
            return static_cast<int32_t>(tire_Press_System_Stat_enum);
        }
    };
    //Hash for Tire_Press_RF_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::Tire_Press_RF_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::Tire_Press_RF_Stat_enum& tire_Press_RF_Stat_enum) const {
            return static_cast<int32_t>(tire_Press_RF_Stat_enum);
        }
    };
    //Hash for Tire_Press_LF_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::Tire_Press_LF_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::Tire_Press_LF_Stat_enum& tire_Press_LF_Stat_enum) const {
            return static_cast<int32_t>(tire_Press_LF_Stat_enum);
        }
    };
    //Hash for Tire_Press_LR_OLR_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::Tire_Press_LR_OLR_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::Tire_Press_LR_OLR_Stat_enum& tire_Press_LR_OLR_Stat_enum) const {
            return static_cast<int32_t>(tire_Press_LR_OLR_Stat_enum);
        }
    };
    //Hash for Tire_Press_RR_ORR_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::Tire_Press_RR_ORR_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::Tire_Press_RR_ORR_Stat_enum& tire_Press_RR_ORR_Stat_enum) const {
            return static_cast<int32_t>(tire_Press_RR_ORR_Stat_enum);
        }
    };
    //Hash for Tire_Press_ILR_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::Tire_Press_ILR_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::Tire_Press_ILR_Stat_enum& tire_Press_ILR_Stat_enum) const {
            return static_cast<int32_t>(tire_Press_ILR_Stat_enum);
        }
    };
    //Hash for Tire_Press_IRR_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::Tire_Press_IRR_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::Tire_Press_IRR_Stat_enum& tire_Press_IRR_Stat_enum) const {
            return static_cast<int32_t>(tire_Press_IRR_Stat_enum);
        }
    };
    //Hash for Tire_Press_LF_Data_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::Tire_Press_LF_Data_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::Tire_Press_LF_Data_enum& tire_Press_LF_Data_enum) const {
            return static_cast<int32_t>(tire_Press_LF_Data_enum);
        }
    };
    //Hash for Tire_Press_RF_Data_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::Tire_Press_RF_Data_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::Tire_Press_RF_Data_enum& tire_Press_RF_Data_enum) const {
            return static_cast<int32_t>(tire_Press_RF_Data_enum);
        }
    };
    //Hash for Tire_Press_RR_ORR_Data_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::Tire_Press_RR_ORR_Data_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::Tire_Press_RR_ORR_Data_enum& tire_Press_RR_ORR_Data_enum) const {
            return static_cast<int32_t>(tire_Press_RR_ORR_Data_enum);
        }
    };
    //Hash for Tire_Press_LR_OLR_Data_enum
    template<>
    struct hash<::v0::org::harman::ford::enginedata_types::Tire_Press_LR_OLR_Data_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::enginedata_types::Tire_Press_LR_OLR_Data_enum& tire_Press_LR_OLR_Data_enum) const {
            return static_cast<int32_t>(tire_Press_LR_OLR_Data_enum);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_FORD_enginedata_types_HPP_

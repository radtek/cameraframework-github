/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_ORG_HARMAN_FORD_enginedata_PROXY_HPP_
#define V0_ORG_HARMAN_FORD_enginedata_PROXY_HPP_

#include <v0/org/harman/ford/enginedataProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace ford {

template <typename ... _AttributeExtensions>
class enginedataProxy
    : virtual public enginedata, 
      virtual public enginedataProxyBase,
      virtual public _AttributeExtensions... {
public:
    enginedataProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~enginedataProxy();

    typedef enginedata InterfaceType;


    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute EngMnfld_P_Actl.
     */
    virtual EngMnfld_P_ActlAttribute& getEngMnfld_P_ActlAttribute() {
        return delegate_->getEngMnfld_P_ActlAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute EngOil_P_Actl.
     */
    virtual EngOil_P_ActlAttribute& getEngOil_P_ActlAttribute() {
        return delegate_->getEngOil_P_ActlAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute PrkBrkStatus.
     */
    virtual PrkBrkStatusAttribute& getPrkBrkStatusAttribute() {
        return delegate_->getPrkBrkStatusAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute absActv_B_Actl_enum.
     */
    virtual AbsActv_B_Actl_enumAttribute& getAbsActv_B_Actl_enumAttribute() {
        return delegate_->getAbsActv_B_Actl_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute factoryReset_St_enum.
     */
    virtual FactoryReset_St_enumAttribute& getFactoryReset_St_enumAttribute() {
        return delegate_->getFactoryReset_St_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute drStatTgate_B_Actl_enum.
     */
    virtual DrStatTgate_B_Actl_enumAttribute& getDrStatTgate_B_Actl_enumAttribute() {
        return delegate_->getDrStatTgate_B_Actl_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute ignition_Status_enum.
     */
    virtual Ignition_Status_enumAttribute& getIgnition_Status_enumAttribute() {
        return delegate_->getIgnition_Status_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute ignKeyType_D_Actl_enum.
     */
    virtual IgnKeyType_D_Actl_enumAttribute& getIgnKeyType_D_Actl_enumAttribute() {
        return delegate_->getIgnKeyType_D_Actl_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute drStatRl_B_Actl_enum.
     */
    virtual DrStatRl_B_Actl_enumAttribute& getDrStatRl_B_Actl_enumAttribute() {
        return delegate_->getDrStatRl_B_Actl_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute drStatRr_B_Actl_enum.
     */
    virtual DrStatRr_B_Actl_enumAttribute& getDrStatRr_B_Actl_enumAttribute() {
        return delegate_->getDrStatRr_B_Actl_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute lifeCycMde_D_Actl_enum.
     */
    virtual LifeCycMde_D_Actl_enumAttribute& getLifeCycMde_D_Actl_enumAttribute() {
        return delegate_->getLifeCycMde_D_Actl_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute PrkBrkActv_B_Actl.
     */
    virtual PrkBrkActv_B_ActlAttribute& getPrkBrkActv_B_ActlAttribute() {
        return delegate_->getPrkBrkActv_B_ActlAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute delay_Accy_enum.
     */
    virtual Delay_Accy_enumAttribute& getDelay_Accy_enumAttribute() {
        return delegate_->getDelay_Accy_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute drStatDrv_B_Actl_enum.
     */
    virtual DrStatDrv_B_Actl_enumAttribute& getDrStatDrv_B_Actl_enumAttribute() {
        return delegate_->getDrStatDrv_B_Actl_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute pwPckTq_D_Stat_enum.
     */
    virtual PwPckTq_D_Stat_enumAttribute& getPwPckTq_D_Stat_enumAttribute() {
        return delegate_->getPwPckTq_D_Stat_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute eng_D_Stat_enum.
     */
    virtual Eng_D_Stat_enumAttribute& getEng_D_Stat_enumAttribute() {
        return delegate_->getEng_D_Stat_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute trnAinTq_D_Qf_enum.
     */
    virtual TrnAinTq_D_Qf_enumAttribute& getTrnAinTq_D_Qf_enumAttribute() {
        return delegate_->getTrnAinTq_D_Qf_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute trnAout_W_ActlUnfilt_enum.
     */
    virtual TrnAout_W_ActlUnfilt_enumAttribute& getTrnAout_W_ActlUnfilt_enumAttribute() {
        return delegate_->getTrnAout_W_ActlUnfilt_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute apedPosPcActl_D_Qf_enum.
     */
    virtual ApedPosPcActl_D_Qf_enumAttribute& getApedPosPcActl_D_Qf_enumAttribute() {
        return delegate_->getApedPosPcActl_D_Qf_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute EngClnt_Te_Actl.
     */
    virtual EngClnt_Te_ActlAttribute& getEngClnt_Te_ActlAttribute() {
        return delegate_->getEngClnt_Te_ActlAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute EngOil_Te_Actl.
     */
    virtual EngOil_Te_ActlAttribute& getEngOil_Te_ActlAttribute() {
        return delegate_->getEngOil_Te_ActlAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute EngAout_Tq_Actl.
     */
    virtual EngAout_Tq_ActlAttribute& getEngAout_Tq_ActlAttribute() {
        return delegate_->getEngAout_Tq_ActlAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute engAoutTqActl_D_Qf_enum.
     */
    virtual EngAoutTqActl_D_Qf_enumAttribute& getEngAoutTqActl_D_Qf_enumAttribute() {
        return delegate_->getEngAoutTqActl_D_Qf_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute OdoCount.
     */
    virtual OdoCountAttribute& getOdoCountAttribute() {
        return delegate_->getOdoCountAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute VehicleGGCCData.
     */
    virtual VehicleGGCCDataAttribute& getVehicleGGCCDataAttribute() {
        return delegate_->getVehicleGGCCDataAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute disp_VehUntTripCoUsrSel_enum.
     */
    virtual Disp_VehUntTripCoUsrSel_enumAttribute& getDisp_VehUntTripCoUsrSel_enumAttribute() {
        return delegate_->getDisp_VehUntTripCoUsrSel_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute disp_VehUnitTempUsrSel_enum.
     */
    virtual Disp_VehUnitTempUsrSel_enumAttribute& getDisp_VehUnitTempUsrSel_enumAttribute() {
        return delegate_->getDisp_VehUnitTempUsrSel_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute trnIpcDsplyGear_D_Actl_enum.
     */
    virtual TrnIpcDsplyGear_D_Actl_enumAttribute& getTrnIpcDsplyGear_D_Actl_enumAttribute() {
        return delegate_->getTrnIpcDsplyGear_D_Actl_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute mc_VehUnitTempUsrSel_St_enum.
     */
    virtual Mc_VehUnitTempUsrSel_St_enumAttribute& getMc_VehUnitTempUsrSel_St_enumAttribute() {
        return delegate_->getMc_VehUnitTempUsrSel_St_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute mc_VehUntTrpCoUsrSel_St_enum.
     */
    virtual Mc_VehUntTrpCoUsrSel_St_enumAttribute& getMc_VehUntTrpCoUsrSel_St_enumAttribute() {
        return delegate_->getMc_VehUntTrpCoUsrSel_St_enumAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute Tire_Pressure_Data_DRW_HS3.
     */
    virtual Tire_Pressure_Data_DRW_HS3Attribute& getTire_Pressure_Data_DRW_HS3Attribute() {
        return delegate_->getTire_Pressure_Data_DRW_HS3Attribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute Tire_Pressure_Status.
     */
    virtual Tire_Pressure_StatusAttribute& getTire_Pressure_StatusAttribute() {
        return delegate_->getTire_Pressure_StatusAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute Tire_Pressure_Data_HS3.
     */
    virtual Tire_Pressure_Data_HS3Attribute& getTire_Pressure_Data_HS3Attribute() {
        return delegate_->getTire_Pressure_Data_HS3Attribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute body_Info_sig_5.
     */
    virtual Body_Info_sig_5Attribute& getBody_Info_sig_5Attribute() {
        return delegate_->getBody_Info_sig_5Attribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute brakeSnData_2_sig_0.
     */
    virtual BrakeSnData_2_sig_0Attribute& getBrakeSnData_2_sig_0Attribute() {
        return delegate_->getBrakeSnData_2_sig_0Attribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute engineData_12_HS3_sig_2.
     */
    virtual EngineData_12_HS3_sig_2Attribute& getEngineData_12_HS3_sig_2Attribute() {
        return delegate_->getEngineData_12_HS3_sig_2Attribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute gWM_Send_Signals_sig_0.
     */
    virtual GWM_Send_Signals_sig_0Attribute& getGWM_Send_Signals_sig_0Attribute() {
        return delegate_->getGWM_Send_Signals_sig_0Attribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute trailerBrakeData_sig_0.
     */
    virtual TrailerBrakeData_sig_0Attribute& getTrailerBrakeData_sig_0Attribute() {
        return delegate_->getTrailerBrakeData_sig_0Attribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute trailerBrakeData_sig_1.
     */
    virtual TrailerBrakeData_sig_1Attribute& getTrailerBrakeData_sig_1Attribute() {
        return delegate_->getTrailerBrakeData_sig_1Attribute();
    }




    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<enginedataProxyBase> delegate_;
};

typedef enginedataProxy<> enginedataProxyDefault;

namespace enginedataExtensions {
    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class EngMnfld_P_ActlAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::EngMnfld_P_ActlAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::EngMnfld_P_ActlAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        EngMnfld_P_ActlAttributeExtension() {}
    #endif
    
        EngMnfld_P_ActlAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getEngMnfld_P_ActlAttribute()) {
        }
    
        inline extension_type& getEngMnfld_P_ActlAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class EngOil_P_ActlAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::EngOil_P_ActlAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::EngOil_P_ActlAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        EngOil_P_ActlAttributeExtension() {}
    #endif
    
        EngOil_P_ActlAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getEngOil_P_ActlAttribute()) {
        }
    
        inline extension_type& getEngOil_P_ActlAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class PrkBrkStatusAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::PrkBrkStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::PrkBrkStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PrkBrkStatusAttributeExtension() {}
    #endif
    
        PrkBrkStatusAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getPrkBrkStatusAttribute()) {
        }
    
        inline extension_type& getPrkBrkStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class AbsActv_B_Actl_enumAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::AbsActv_B_Actl_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::AbsActv_B_Actl_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        AbsActv_B_Actl_enumAttributeExtension() {}
    #endif
    
        AbsActv_B_Actl_enumAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getAbsActv_B_Actl_enumAttribute()) {
        }
    
        inline extension_type& getAbsActv_B_Actl_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class FactoryReset_St_enumAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::FactoryReset_St_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::FactoryReset_St_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        FactoryReset_St_enumAttributeExtension() {}
    #endif
    
        FactoryReset_St_enumAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getFactoryReset_St_enumAttribute()) {
        }
    
        inline extension_type& getFactoryReset_St_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class DrStatTgate_B_Actl_enumAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::DrStatTgate_B_Actl_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::DrStatTgate_B_Actl_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DrStatTgate_B_Actl_enumAttributeExtension() {}
    #endif
    
        DrStatTgate_B_Actl_enumAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getDrStatTgate_B_Actl_enumAttribute()) {
        }
    
        inline extension_type& getDrStatTgate_B_Actl_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class Ignition_Status_enumAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::Ignition_Status_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::Ignition_Status_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Ignition_Status_enumAttributeExtension() {}
    #endif
    
        Ignition_Status_enumAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getIgnition_Status_enumAttribute()) {
        }
    
        inline extension_type& getIgnition_Status_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class IgnKeyType_D_Actl_enumAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::IgnKeyType_D_Actl_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::IgnKeyType_D_Actl_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        IgnKeyType_D_Actl_enumAttributeExtension() {}
    #endif
    
        IgnKeyType_D_Actl_enumAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getIgnKeyType_D_Actl_enumAttribute()) {
        }
    
        inline extension_type& getIgnKeyType_D_Actl_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class DrStatRl_B_Actl_enumAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::DrStatRl_B_Actl_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::DrStatRl_B_Actl_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DrStatRl_B_Actl_enumAttributeExtension() {}
    #endif
    
        DrStatRl_B_Actl_enumAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getDrStatRl_B_Actl_enumAttribute()) {
        }
    
        inline extension_type& getDrStatRl_B_Actl_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class DrStatRr_B_Actl_enumAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::DrStatRr_B_Actl_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::DrStatRr_B_Actl_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DrStatRr_B_Actl_enumAttributeExtension() {}
    #endif
    
        DrStatRr_B_Actl_enumAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getDrStatRr_B_Actl_enumAttribute()) {
        }
    
        inline extension_type& getDrStatRr_B_Actl_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class LifeCycMde_D_Actl_enumAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::LifeCycMde_D_Actl_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::LifeCycMde_D_Actl_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        LifeCycMde_D_Actl_enumAttributeExtension() {}
    #endif
    
        LifeCycMde_D_Actl_enumAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getLifeCycMde_D_Actl_enumAttribute()) {
        }
    
        inline extension_type& getLifeCycMde_D_Actl_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class PrkBrkActv_B_ActlAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::PrkBrkActv_B_ActlAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::PrkBrkActv_B_ActlAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PrkBrkActv_B_ActlAttributeExtension() {}
    #endif
    
        PrkBrkActv_B_ActlAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getPrkBrkActv_B_ActlAttribute()) {
        }
    
        inline extension_type& getPrkBrkActv_B_ActlAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class Delay_Accy_enumAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::Delay_Accy_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::Delay_Accy_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Delay_Accy_enumAttributeExtension() {}
    #endif
    
        Delay_Accy_enumAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getDelay_Accy_enumAttribute()) {
        }
    
        inline extension_type& getDelay_Accy_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class DrStatDrv_B_Actl_enumAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::DrStatDrv_B_Actl_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::DrStatDrv_B_Actl_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DrStatDrv_B_Actl_enumAttributeExtension() {}
    #endif
    
        DrStatDrv_B_Actl_enumAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getDrStatDrv_B_Actl_enumAttribute()) {
        }
    
        inline extension_type& getDrStatDrv_B_Actl_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class PwPckTq_D_Stat_enumAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::PwPckTq_D_Stat_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::PwPckTq_D_Stat_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PwPckTq_D_Stat_enumAttributeExtension() {}
    #endif
    
        PwPckTq_D_Stat_enumAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getPwPckTq_D_Stat_enumAttribute()) {
        }
    
        inline extension_type& getPwPckTq_D_Stat_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class Eng_D_Stat_enumAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::Eng_D_Stat_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::Eng_D_Stat_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Eng_D_Stat_enumAttributeExtension() {}
    #endif
    
        Eng_D_Stat_enumAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getEng_D_Stat_enumAttribute()) {
        }
    
        inline extension_type& getEng_D_Stat_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class TrnAinTq_D_Qf_enumAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::TrnAinTq_D_Qf_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::TrnAinTq_D_Qf_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        TrnAinTq_D_Qf_enumAttributeExtension() {}
    #endif
    
        TrnAinTq_D_Qf_enumAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getTrnAinTq_D_Qf_enumAttribute()) {
        }
    
        inline extension_type& getTrnAinTq_D_Qf_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class TrnAout_W_ActlUnfilt_enumAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::TrnAout_W_ActlUnfilt_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::TrnAout_W_ActlUnfilt_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        TrnAout_W_ActlUnfilt_enumAttributeExtension() {}
    #endif
    
        TrnAout_W_ActlUnfilt_enumAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getTrnAout_W_ActlUnfilt_enumAttribute()) {
        }
    
        inline extension_type& getTrnAout_W_ActlUnfilt_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class ApedPosPcActl_D_Qf_enumAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::ApedPosPcActl_D_Qf_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::ApedPosPcActl_D_Qf_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ApedPosPcActl_D_Qf_enumAttributeExtension() {}
    #endif
    
        ApedPosPcActl_D_Qf_enumAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getApedPosPcActl_D_Qf_enumAttribute()) {
        }
    
        inline extension_type& getApedPosPcActl_D_Qf_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class EngClnt_Te_ActlAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::EngClnt_Te_ActlAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::EngClnt_Te_ActlAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        EngClnt_Te_ActlAttributeExtension() {}
    #endif
    
        EngClnt_Te_ActlAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getEngClnt_Te_ActlAttribute()) {
        }
    
        inline extension_type& getEngClnt_Te_ActlAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class EngOil_Te_ActlAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::EngOil_Te_ActlAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::EngOil_Te_ActlAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        EngOil_Te_ActlAttributeExtension() {}
    #endif
    
        EngOil_Te_ActlAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getEngOil_Te_ActlAttribute()) {
        }
    
        inline extension_type& getEngOil_Te_ActlAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class EngAout_Tq_ActlAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::EngAout_Tq_ActlAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::EngAout_Tq_ActlAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        EngAout_Tq_ActlAttributeExtension() {}
    #endif
    
        EngAout_Tq_ActlAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getEngAout_Tq_ActlAttribute()) {
        }
    
        inline extension_type& getEngAout_Tq_ActlAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class EngAoutTqActl_D_Qf_enumAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::EngAoutTqActl_D_Qf_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::EngAoutTqActl_D_Qf_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        EngAoutTqActl_D_Qf_enumAttributeExtension() {}
    #endif
    
        EngAoutTqActl_D_Qf_enumAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getEngAoutTqActl_D_Qf_enumAttribute()) {
        }
    
        inline extension_type& getEngAoutTqActl_D_Qf_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class OdoCountAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::OdoCountAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::OdoCountAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        OdoCountAttributeExtension() {}
    #endif
    
        OdoCountAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getOdoCountAttribute()) {
        }
    
        inline extension_type& getOdoCountAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class VehicleGGCCDataAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::VehicleGGCCDataAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::VehicleGGCCDataAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        VehicleGGCCDataAttributeExtension() {}
    #endif
    
        VehicleGGCCDataAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getVehicleGGCCDataAttribute()) {
        }
    
        inline extension_type& getVehicleGGCCDataAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class Disp_VehUntTripCoUsrSel_enumAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::Disp_VehUntTripCoUsrSel_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::Disp_VehUntTripCoUsrSel_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Disp_VehUntTripCoUsrSel_enumAttributeExtension() {}
    #endif
    
        Disp_VehUntTripCoUsrSel_enumAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getDisp_VehUntTripCoUsrSel_enumAttribute()) {
        }
    
        inline extension_type& getDisp_VehUntTripCoUsrSel_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class Disp_VehUnitTempUsrSel_enumAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::Disp_VehUnitTempUsrSel_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::Disp_VehUnitTempUsrSel_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Disp_VehUnitTempUsrSel_enumAttributeExtension() {}
    #endif
    
        Disp_VehUnitTempUsrSel_enumAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getDisp_VehUnitTempUsrSel_enumAttribute()) {
        }
    
        inline extension_type& getDisp_VehUnitTempUsrSel_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class TrnIpcDsplyGear_D_Actl_enumAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::TrnIpcDsplyGear_D_Actl_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::TrnIpcDsplyGear_D_Actl_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        TrnIpcDsplyGear_D_Actl_enumAttributeExtension() {}
    #endif
    
        TrnIpcDsplyGear_D_Actl_enumAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getTrnIpcDsplyGear_D_Actl_enumAttribute()) {
        }
    
        inline extension_type& getTrnIpcDsplyGear_D_Actl_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class Mc_VehUnitTempUsrSel_St_enumAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::Mc_VehUnitTempUsrSel_St_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::Mc_VehUnitTempUsrSel_St_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Mc_VehUnitTempUsrSel_St_enumAttributeExtension() {}
    #endif
    
        Mc_VehUnitTempUsrSel_St_enumAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getMc_VehUnitTempUsrSel_St_enumAttribute()) {
        }
    
        inline extension_type& getMc_VehUnitTempUsrSel_St_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class Mc_VehUntTrpCoUsrSel_St_enumAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::Mc_VehUntTrpCoUsrSel_St_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::Mc_VehUntTrpCoUsrSel_St_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Mc_VehUntTrpCoUsrSel_St_enumAttributeExtension() {}
    #endif
    
        Mc_VehUntTrpCoUsrSel_St_enumAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getMc_VehUntTrpCoUsrSel_St_enumAttribute()) {
        }
    
        inline extension_type& getMc_VehUntTrpCoUsrSel_St_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class Tire_Pressure_Data_DRW_HS3AttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::Tire_Pressure_Data_DRW_HS3Attribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::Tire_Pressure_Data_DRW_HS3Attribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Tire_Pressure_Data_DRW_HS3AttributeExtension() {}
    #endif
    
        Tire_Pressure_Data_DRW_HS3AttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getTire_Pressure_Data_DRW_HS3Attribute()) {
        }
    
        inline extension_type& getTire_Pressure_Data_DRW_HS3AttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class Tire_Pressure_StatusAttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::Tire_Pressure_StatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::Tire_Pressure_StatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Tire_Pressure_StatusAttributeExtension() {}
    #endif
    
        Tire_Pressure_StatusAttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getTire_Pressure_StatusAttribute()) {
        }
    
        inline extension_type& getTire_Pressure_StatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class Tire_Pressure_Data_HS3AttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::Tire_Pressure_Data_HS3Attribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::Tire_Pressure_Data_HS3Attribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Tire_Pressure_Data_HS3AttributeExtension() {}
    #endif
    
        Tire_Pressure_Data_HS3AttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getTire_Pressure_Data_HS3Attribute()) {
        }
    
        inline extension_type& getTire_Pressure_Data_HS3AttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class Body_Info_sig_5AttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::Body_Info_sig_5Attribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::Body_Info_sig_5Attribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Body_Info_sig_5AttributeExtension() {}
    #endif
    
        Body_Info_sig_5AttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getBody_Info_sig_5Attribute()) {
        }
    
        inline extension_type& getBody_Info_sig_5AttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class BrakeSnData_2_sig_0AttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::BrakeSnData_2_sig_0Attribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::BrakeSnData_2_sig_0Attribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        BrakeSnData_2_sig_0AttributeExtension() {}
    #endif
    
        BrakeSnData_2_sig_0AttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getBrakeSnData_2_sig_0Attribute()) {
        }
    
        inline extension_type& getBrakeSnData_2_sig_0AttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class EngineData_12_HS3_sig_2AttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::EngineData_12_HS3_sig_2Attribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::EngineData_12_HS3_sig_2Attribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        EngineData_12_HS3_sig_2AttributeExtension() {}
    #endif
    
        EngineData_12_HS3_sig_2AttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getEngineData_12_HS3_sig_2Attribute()) {
        }
    
        inline extension_type& getEngineData_12_HS3_sig_2AttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class GWM_Send_Signals_sig_0AttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::GWM_Send_Signals_sig_0Attribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::GWM_Send_Signals_sig_0Attribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        GWM_Send_Signals_sig_0AttributeExtension() {}
    #endif
    
        GWM_Send_Signals_sig_0AttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getGWM_Send_Signals_sig_0Attribute()) {
        }
    
        inline extension_type& getGWM_Send_Signals_sig_0AttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TrailerBrakeData_sig_0AttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::TrailerBrakeData_sig_0Attribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::TrailerBrakeData_sig_0Attribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        TrailerBrakeData_sig_0AttributeExtension() {}
    #endif
    
        TrailerBrakeData_sig_0AttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getTrailerBrakeData_sig_0Attribute()) {
        }
    
        inline extension_type& getTrailerBrakeData_sig_0AttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TrailerBrakeData_sig_1AttributeExtension {
     public:
        typedef _ExtensionType<enginedataProxyBase::TrailerBrakeData_sig_1Attribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<enginedataProxyBase::TrailerBrakeData_sig_1Attribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        TrailerBrakeData_sig_1AttributeExtension() {}
    #endif
    
        TrailerBrakeData_sig_1AttributeExtension(enginedataProxyBase& proxy): attributeExtension_(proxy.getTrailerBrakeData_sig_1Attribute()) {
        }
    
        inline extension_type& getTrailerBrakeData_sig_1AttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace enginedataExtensions

//
// enginedataProxy Implementation
//
template <typename ... _AttributeExtensions>
enginedataProxy<_AttributeExtensions...>::enginedataProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<enginedataProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<enginedataProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
enginedataProxy<_AttributeExtensions...>::~enginedataProxy() {
}


template <typename ... _AttributeExtensions>
const CommonAPI::Address &enginedataProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool enginedataProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool enginedataProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& enginedataProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& enginedataProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0::org::harman::ford::enginedataProxy,
    _AttributeExtension> {
    typedef typename ::v0::org::harman::ford::enginedataProxy<
            ::v0::org::harman::ford::enginedataExtensions::EngMnfld_P_ActlAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::EngOil_P_ActlAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::PrkBrkStatusAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::AbsActv_B_Actl_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::FactoryReset_St_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::DrStatTgate_B_Actl_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::Ignition_Status_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::IgnKeyType_D_Actl_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::DrStatRl_B_Actl_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::DrStatRr_B_Actl_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::LifeCycMde_D_Actl_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::PrkBrkActv_B_ActlAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::Delay_Accy_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::DrStatDrv_B_Actl_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::PwPckTq_D_Stat_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::Eng_D_Stat_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::TrnAinTq_D_Qf_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::TrnAout_W_ActlUnfilt_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::ApedPosPcActl_D_Qf_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::EngClnt_Te_ActlAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::EngOil_Te_ActlAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::EngAout_Tq_ActlAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::EngAoutTqActl_D_Qf_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::OdoCountAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::VehicleGGCCDataAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::Disp_VehUntTripCoUsrSel_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::Disp_VehUnitTempUsrSel_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::TrnIpcDsplyGear_D_Actl_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::Mc_VehUnitTempUsrSel_St_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::Mc_VehUntTrpCoUsrSel_St_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::Tire_Pressure_Data_DRW_HS3AttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::Tire_Pressure_StatusAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::Tire_Pressure_Data_HS3AttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::Body_Info_sig_5AttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::BrakeSnData_2_sig_0AttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::EngineData_12_HS3_sig_2AttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::GWM_Send_Signals_sig_0AttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::TrailerBrakeData_sig_0AttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::enginedataExtensions::TrailerBrakeData_sig_1AttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_FORD_enginedata_PROXY_HPP_

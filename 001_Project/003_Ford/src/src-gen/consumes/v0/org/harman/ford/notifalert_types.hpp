/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_ORG_HARMAN_FORD_notifalert_types_HPP_
#define V0_ORG_HARMAN_FORD_notifalert_types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace ford {

struct notifalert_types {
    
    struct CCOI_PolicyClient_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed_4 = 15,
            En_NotUsed_3 = 14,
            En_NotUsed_2 = 13,
            En_NotUsed_1 = 12,
            En_DataStorageError = 11,
            En_StateMachineInconsistent = 10,
            En_UnrecoverableSyncError = 9,
            En_OnBoardSyncFailed = 8,
            En_OnBoardImplemented = 7,
            En_OnBoardSynchronized = 6,
            En_OnBoardSynchronizing = 5,
            En_OnBoardSyncNeeded = 4,
            En_OffBoardUpdatePending = 3,
            En_OnBoardUpdatePending = 2,
            En_Waiting = 1,
            En_Null = 0
        };
        
        CCOI_PolicyClient_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed_4)) {}
        CCOI_PolicyClient_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed_4):
                case static_cast<int32_t>(Literal::En_NotUsed_3):
                case static_cast<int32_t>(Literal::En_NotUsed_2):
                case static_cast<int32_t>(Literal::En_NotUsed_1):
                case static_cast<int32_t>(Literal::En_DataStorageError):
                case static_cast<int32_t>(Literal::En_StateMachineInconsistent):
                case static_cast<int32_t>(Literal::En_UnrecoverableSyncError):
                case static_cast<int32_t>(Literal::En_OnBoardSyncFailed):
                case static_cast<int32_t>(Literal::En_OnBoardImplemented):
                case static_cast<int32_t>(Literal::En_OnBoardSynchronized):
                case static_cast<int32_t>(Literal::En_OnBoardSynchronizing):
                case static_cast<int32_t>(Literal::En_OnBoardSyncNeeded):
                case static_cast<int32_t>(Literal::En_OffBoardUpdatePending):
                case static_cast<int32_t>(Literal::En_OnBoardUpdatePending):
                case static_cast<int32_t>(Literal::En_Waiting):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CCOI_PolicyClient_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CCOI_PolicyClient_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CCOI_PolicyClient_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CCOI_PolicyClient_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CCOI_PolicyClient_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CCOI_PolicyClient_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct AHU_Chime_Supported_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Not_Supported = 2,
            En_Supported = 1,
            En_Inactive = 0
        };
        
        AHU_Chime_Supported_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Not_Supported)) {}
        AHU_Chime_Supported_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Not_Supported):
                case static_cast<int32_t>(Literal::En_Supported):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AHU_Chime_Supported_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AHU_Chime_Supported_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AHU_Chime_Supported_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AHU_Chime_Supported_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AHU_Chime_Supported_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AHU_Chime_Supported_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CCOI_PolicyServer_St_UB_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fresh_data = 1,
            En_Unchanged_data = 0
        };
        
        CCOI_PolicyServer_St_UB_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fresh_data)) {}
        CCOI_PolicyServer_St_UB_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fresh_data):
                case static_cast<int32_t>(Literal::En_Unchanged_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CCOI_PolicyServer_St_UB_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CCOI_PolicyServer_St_UB_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CCOI_PolicyServer_St_UB_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CCOI_PolicyServer_St_UB_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CCOI_PolicyServer_St_UB_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CCOI_PolicyServer_St_UB_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CCOI_PolicyServer_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed_4 = 15,
            En_NotUsed_3 = 14,
            En_NotUsed_2 = 13,
            En_NotUsed_1 = 12,
            En_DataStorageError = 11,
            En_StateMachineInconsistent = 10,
            En_UnrecoverableSyncError = 9,
            En_OnBoardSyncFailed = 8,
            En_OnBoardImplemented = 7,
            En_OnBoardSynchronized = 6,
            En_OnBoardSynchronizing = 5,
            En_OnBoardSyncNeeded = 4,
            En_OffBoardUpdatePending = 3,
            En_OnBoardUpdatePending = 2,
            En_Waiting = 1,
            En_Null = 0
        };
        
        CCOI_PolicyServer_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed_4)) {}
        CCOI_PolicyServer_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed_4):
                case static_cast<int32_t>(Literal::En_NotUsed_3):
                case static_cast<int32_t>(Literal::En_NotUsed_2):
                case static_cast<int32_t>(Literal::En_NotUsed_1):
                case static_cast<int32_t>(Literal::En_DataStorageError):
                case static_cast<int32_t>(Literal::En_StateMachineInconsistent):
                case static_cast<int32_t>(Literal::En_UnrecoverableSyncError):
                case static_cast<int32_t>(Literal::En_OnBoardSyncFailed):
                case static_cast<int32_t>(Literal::En_OnBoardImplemented):
                case static_cast<int32_t>(Literal::En_OnBoardSynchronized):
                case static_cast<int32_t>(Literal::En_OnBoardSynchronizing):
                case static_cast<int32_t>(Literal::En_OnBoardSyncNeeded):
                case static_cast<int32_t>(Literal::En_OffBoardUpdatePending):
                case static_cast<int32_t>(Literal::En_OnBoardUpdatePending):
                case static_cast<int32_t>(Literal::En_Waiting):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CCOI_PolicyServer_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CCOI_PolicyServer_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CCOI_PolicyServer_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CCOI_PolicyServer_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CCOI_PolicyServer_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CCOI_PolicyServer_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CDWarnChime_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Chime_On = 1,
            En_Chime_Off = 0
        };
        
        CDWarnChime_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Chime_On)) {}
        CDWarnChime_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Chime_On):
                case static_cast<int32_t>(Literal::En_Chime_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CDWarnChime_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CDWarnChime_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CDWarnChime_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CDWarnChime_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CDWarnChime_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CDWarnChime_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CDWarnChime_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Chime_On = 1,
            En_Chime_Off = 0
        };
        
        CDWarnChime_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Chime_On)) {}
        CDWarnChime_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Chime_On):
                case static_cast<int32_t>(Literal::En_Chime_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CDWarnChime_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CDWarnChime_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CDWarnChime_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CDWarnChime_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CDWarnChime_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CDWarnChime_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Chime_Time_Criticality_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Low = 2,
            En_High = 1,
            En_Inactive = 0
        };
        
        Chime_Time_Criticality_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Low)) {}
        Chime_Time_Criticality_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Low):
                case static_cast<int32_t>(Literal::En_High):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Chime_Time_Criticality_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Chime_Time_Criticality_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Chime_Time_Criticality_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Chime_Time_Criticality_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Chime_Time_Criticality_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Chime_Time_Criticality_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Chime_Directionality_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_RearSpeakers = 3,
            En_FrontSpeakers = 2,
            En_ALL = 1,
            En_Inactive = 0
        };
        
        Chime_Directionality_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_RearSpeakers)) {}
        Chime_Directionality_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_RearSpeakers):
                case static_cast<int32_t>(Literal::En_FrontSpeakers):
                case static_cast<int32_t>(Literal::En_ALL):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Chime_Directionality_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Chime_Directionality_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Chime_Directionality_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Chime_Directionality_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Chime_Directionality_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Chime_Directionality_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Chime_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Chime_62 = 63,
            En_Chime_3 = 4,
            En_Chime_2 = 3,
            En_Chime_1 = 2,
            En_NoChime = 1,
            En_Inactive = 0
        };
        
        Chime_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Chime_62)) {}
        Chime_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Chime_62):
                case static_cast<int32_t>(Literal::En_Chime_3):
                case static_cast<int32_t>(Literal::En_Chime_2):
                case static_cast<int32_t>(Literal::En_Chime_1):
                case static_cast<int32_t>(Literal::En_NoChime):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Chime_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Chime_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Chime_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Chime_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Chime_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Chime_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Chime_Occurence_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Continuous = 15,
            En_14Repititions = 14,
            En_13Repititions = 13,
            En_12Repititions = 12,
            En_11Repititions = 11,
            En_10Repititions = 10,
            En_9Repititions = 9,
            En_8Repititions = 8,
            En_7Repititions = 7,
            En_6Repititions = 6,
            En_5Repititions = 5,
            En_4Repititions = 4,
            En_3Repititions = 3,
            En_2Repititions = 2,
            En_PlayOnce = 1,
            En_Inactive = 0
        };
        
        Chime_Occurence_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Continuous)) {}
        Chime_Occurence_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Continuous):
                case static_cast<int32_t>(Literal::En_14Repititions):
                case static_cast<int32_t>(Literal::En_13Repititions):
                case static_cast<int32_t>(Literal::En_12Repititions):
                case static_cast<int32_t>(Literal::En_11Repititions):
                case static_cast<int32_t>(Literal::En_10Repititions):
                case static_cast<int32_t>(Literal::En_9Repititions):
                case static_cast<int32_t>(Literal::En_8Repititions):
                case static_cast<int32_t>(Literal::En_7Repititions):
                case static_cast<int32_t>(Literal::En_6Repititions):
                case static_cast<int32_t>(Literal::En_5Repititions):
                case static_cast<int32_t>(Literal::En_4Repititions):
                case static_cast<int32_t>(Literal::En_3Repititions):
                case static_cast<int32_t>(Literal::En_2Repititions):
                case static_cast<int32_t>(Literal::En_PlayOnce):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Chime_Occurence_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Chime_Occurence_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Chime_Occurence_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Chime_Occurence_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Chime_Occurence_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Chime_Occurence_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct IPC_Chime_struct : CommonAPI::Struct<Chime_Time_Criticality_enum, Chime_Directionality_enum, Chime_enum, uint8_t, Chime_Occurence_enum, uint8_t> {
    	
    	IPC_Chime_struct() {
    	}
    	IPC_Chime_struct(const Chime_Time_Criticality_enum &_chime_Time_Criticality_enum, const Chime_Directionality_enum &_chime_Directionality_enum, const Chime_enum &_chime_enum, const uint8_t &_Chime_Vol_Level, const Chime_Occurence_enum &_chime_Occurence_enum, const uint8_t &_Off_Time_Btwn_Chime)
    	{
    		std::get<0>(values_) = _chime_Time_Criticality_enum;
    		std::get<1>(values_) = _chime_Directionality_enum;
    		std::get<2>(values_) = _chime_enum;
    		std::get<3>(values_) = _Chime_Vol_Level;
    		std::get<4>(values_) = _chime_Occurence_enum;
    		std::get<5>(values_) = _Off_Time_Btwn_Chime;
    	}
    	inline const Chime_Time_Criticality_enum &getChime_Time_Criticality_enum() const { return std::get<0>(values_); }
    	inline void setChime_Time_Criticality_enum(const Chime_Time_Criticality_enum &_value) { std::get<0>(values_) = _value; }
    	inline const Chime_Directionality_enum &getChime_Directionality_enum() const { return std::get<1>(values_); }
    	inline void setChime_Directionality_enum(const Chime_Directionality_enum &_value) { std::get<1>(values_) = _value; }
    	inline const Chime_enum &getChime_enum() const { return std::get<2>(values_); }
    	inline void setChime_enum(const Chime_enum &_value) { std::get<2>(values_) = _value; }
    	inline const uint8_t &getChime_Vol_Level() const { return std::get<3>(values_); }
    	inline void setChime_Vol_Level(const uint8_t &_value) { std::get<3>(values_) = _value; }
    	inline const Chime_Occurence_enum &getChime_Occurence_enum() const { return std::get<4>(values_); }
    	inline void setChime_Occurence_enum(const Chime_Occurence_enum &_value) { std::get<4>(values_) = _value; }
    	inline const uint8_t &getOff_Time_Btwn_Chime() const { return std::get<5>(values_); }
    	inline void setOff_Time_Btwn_Chime(const uint8_t &_value) { std::get<5>(values_) = _value; }
    	inline bool operator==(const IPC_Chime_struct& _other) const {
                return (getChime_Time_Criticality_enum() == _other.getChime_Time_Criticality_enum() && getChime_Directionality_enum() == _other.getChime_Directionality_enum() && getChime_enum() == _other.getChime_enum() && getChime_Vol_Level() == _other.getChime_Vol_Level() && getChime_Occurence_enum() == _other.getChime_Occurence_enum() && getOff_Time_Btwn_Chime() == _other.getOff_Time_Btwn_Chime());
        }
    	inline bool operator!=(const IPC_Chime_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct Chime_Time_Criticality2_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Low = 2,
            En_High = 1,
            En_Inactive = 0
        };
        
        Chime_Time_Criticality2_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Low)) {}
        Chime_Time_Criticality2_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Low):
                case static_cast<int32_t>(Literal::En_High):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Chime_Time_Criticality2_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Chime_Time_Criticality2_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Chime_Time_Criticality2_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Chime_Time_Criticality2_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Chime_Time_Criticality2_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Chime_Time_Criticality2_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Chime_Directionality2_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_RearSpeakers = 3,
            En_FrontSpeakers = 2,
            En_ALL = 1,
            En_Inactive = 0
        };
        
        Chime_Directionality2_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_RearSpeakers)) {}
        Chime_Directionality2_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_RearSpeakers):
                case static_cast<int32_t>(Literal::En_FrontSpeakers):
                case static_cast<int32_t>(Literal::En_ALL):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Chime_Directionality2_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Chime_Directionality2_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Chime_Directionality2_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Chime_Directionality2_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Chime_Directionality2_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Chime_Directionality2_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Chime2_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Chime_62 = 63,
            En_Chime_3 = 4,
            En_Chime_2 = 3,
            En_Chime_1 = 2,
            En_NoChime = 1,
            En_Inactive = 0
        };
        
        Chime2_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Chime_62)) {}
        Chime2_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Chime_62):
                case static_cast<int32_t>(Literal::En_Chime_3):
                case static_cast<int32_t>(Literal::En_Chime_2):
                case static_cast<int32_t>(Literal::En_Chime_1):
                case static_cast<int32_t>(Literal::En_NoChime):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Chime2_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Chime2_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Chime2_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Chime2_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Chime2_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Chime2_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Chime_Occurence2_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Continuous = 15,
            En_14Repititions = 14,
            En_13Repititions = 13,
            En_12Repititions = 12,
            En_11Repititions = 11,
            En_10Repititions = 10,
            En_9Repititions = 9,
            En_8Repititions = 8,
            En_7Repititions = 7,
            En_6Repititions = 6,
            En_5Repititions = 5,
            En_4Repititions = 4,
            En_3Repititions = 3,
            En_2Repititions = 2,
            En_PlayOnce = 1,
            En_Inactive = 0
        };
        
        Chime_Occurence2_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Continuous)) {}
        Chime_Occurence2_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Continuous):
                case static_cast<int32_t>(Literal::En_14Repititions):
                case static_cast<int32_t>(Literal::En_13Repititions):
                case static_cast<int32_t>(Literal::En_12Repititions):
                case static_cast<int32_t>(Literal::En_11Repititions):
                case static_cast<int32_t>(Literal::En_10Repititions):
                case static_cast<int32_t>(Literal::En_9Repititions):
                case static_cast<int32_t>(Literal::En_8Repititions):
                case static_cast<int32_t>(Literal::En_7Repititions):
                case static_cast<int32_t>(Literal::En_6Repititions):
                case static_cast<int32_t>(Literal::En_5Repititions):
                case static_cast<int32_t>(Literal::En_4Repititions):
                case static_cast<int32_t>(Literal::En_3Repititions):
                case static_cast<int32_t>(Literal::En_2Repititions):
                case static_cast<int32_t>(Literal::En_PlayOnce):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Chime_Occurence2_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Chime_Occurence2_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Chime_Occurence2_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Chime_Occurence2_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Chime_Occurence2_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Chime_Occurence2_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct IPC_Chime2_struct : CommonAPI::Struct<Chime_Time_Criticality2_enum, Chime_Directionality2_enum, Chime2_enum, uint8_t, Chime_Occurence2_enum, uint8_t> {
    	
    	IPC_Chime2_struct() {
    	}
    	IPC_Chime2_struct(const Chime_Time_Criticality2_enum &_chime_Time_Criticality2_enum, const Chime_Directionality2_enum &_chime_Directionality2_enum, const Chime2_enum &_chime2_enum, const uint8_t &_Chime_Vol_Level2, const Chime_Occurence2_enum &_chime_Occurence2_enum, const uint8_t &_Off_Time_Btwn_Chime2)
    	{
    		std::get<0>(values_) = _chime_Time_Criticality2_enum;
    		std::get<1>(values_) = _chime_Directionality2_enum;
    		std::get<2>(values_) = _chime2_enum;
    		std::get<3>(values_) = _Chime_Vol_Level2;
    		std::get<4>(values_) = _chime_Occurence2_enum;
    		std::get<5>(values_) = _Off_Time_Btwn_Chime2;
    	}
    	inline const Chime_Time_Criticality2_enum &getChime_Time_Criticality2_enum() const { return std::get<0>(values_); }
    	inline void setChime_Time_Criticality2_enum(const Chime_Time_Criticality2_enum &_value) { std::get<0>(values_) = _value; }
    	inline const Chime_Directionality2_enum &getChime_Directionality2_enum() const { return std::get<1>(values_); }
    	inline void setChime_Directionality2_enum(const Chime_Directionality2_enum &_value) { std::get<1>(values_) = _value; }
    	inline const Chime2_enum &getChime2_enum() const { return std::get<2>(values_); }
    	inline void setChime2_enum(const Chime2_enum &_value) { std::get<2>(values_) = _value; }
    	inline const uint8_t &getChime_Vol_Level2() const { return std::get<3>(values_); }
    	inline void setChime_Vol_Level2(const uint8_t &_value) { std::get<3>(values_) = _value; }
    	inline const Chime_Occurence2_enum &getChime_Occurence2_enum() const { return std::get<4>(values_); }
    	inline void setChime_Occurence2_enum(const Chime_Occurence2_enum &_value) { std::get<4>(values_) = _value; }
    	inline const uint8_t &getOff_Time_Btwn_Chime2() const { return std::get<5>(values_); }
    	inline void setOff_Time_Btwn_Chime2(const uint8_t &_value) { std::get<5>(values_) = _value; }
    	inline bool operator==(const IPC_Chime2_struct& _other) const {
                return (getChime_Time_Criticality2_enum() == _other.getChime_Time_Criticality2_enum() && getChime_Directionality2_enum() == _other.getChime_Directionality2_enum() && getChime2_enum() == _other.getChime2_enum() && getChime_Vol_Level2() == _other.getChime_Vol_Level2() && getChime_Occurence2_enum() == _other.getChime_Occurence2_enum() && getOff_Time_Btwn_Chime2() == _other.getOff_Time_Btwn_Chime2());
        }
    	inline bool operator!=(const IPC_Chime2_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct GWM_Send_Signals_8_HS3_sig_4_struct : CommonAPI::Struct<CCOI_PolicyServer_St_enum, CCOI_PolicyServer_St_UB_enum> {
    	
    	GWM_Send_Signals_8_HS3_sig_4_struct() {
    	}
    	GWM_Send_Signals_8_HS3_sig_4_struct(const CCOI_PolicyServer_St_enum &_cCOI_PolicyServer_St_enum, const CCOI_PolicyServer_St_UB_enum &_cCOI_PolicyServer_St_UB_enum)
    	{
    		std::get<0>(values_) = _cCOI_PolicyServer_St_enum;
    		std::get<1>(values_) = _cCOI_PolicyServer_St_UB_enum;
    	}
    	inline const CCOI_PolicyServer_St_enum &getCCOI_PolicyServer_St_enum() const { return std::get<0>(values_); }
    	inline void setCCOI_PolicyServer_St_enum(const CCOI_PolicyServer_St_enum &_value) { std::get<0>(values_) = _value; }
    	inline const CCOI_PolicyServer_St_UB_enum &getCCOI_PolicyServer_St_UB_enum() const { return std::get<1>(values_); }
    	inline void setCCOI_PolicyServer_St_UB_enum(const CCOI_PolicyServer_St_UB_enum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const GWM_Send_Signals_8_HS3_sig_4_struct& _other) const {
                return (getCCOI_PolicyServer_St_enum() == _other.getCCOI_PolicyServer_St_enum() && getCCOI_PolicyServer_St_UB_enum() == _other.getCCOI_PolicyServer_St_UB_enum());
        }
    	inline bool operator!=(const GWM_Send_Signals_8_HS3_sig_4_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.harman.ford.notifalert_types";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct notifalert_types

} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for CCOI_PolicyClient_St_enum
    template<>
    struct hash<::v0::org::harman::ford::notifalert_types::CCOI_PolicyClient_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::notifalert_types::CCOI_PolicyClient_St_enum& cCOI_PolicyClient_St_enum) const {
            return static_cast<int32_t>(cCOI_PolicyClient_St_enum);
        }
    };
    //Hash for AHU_Chime_Supported_enum
    template<>
    struct hash<::v0::org::harman::ford::notifalert_types::AHU_Chime_Supported_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::notifalert_types::AHU_Chime_Supported_enum& aHU_Chime_Supported_enum) const {
            return static_cast<int32_t>(aHU_Chime_Supported_enum);
        }
    };
    //Hash for CCOI_PolicyServer_St_UB_enum
    template<>
    struct hash<::v0::org::harman::ford::notifalert_types::CCOI_PolicyServer_St_UB_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::notifalert_types::CCOI_PolicyServer_St_UB_enum& cCOI_PolicyServer_St_UB_enum) const {
            return static_cast<int32_t>(cCOI_PolicyServer_St_UB_enum);
        }
    };
    //Hash for CCOI_PolicyServer_St_enum
    template<>
    struct hash<::v0::org::harman::ford::notifalert_types::CCOI_PolicyServer_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::notifalert_types::CCOI_PolicyServer_St_enum& cCOI_PolicyServer_St_enum) const {
            return static_cast<int32_t>(cCOI_PolicyServer_St_enum);
        }
    };
    //Hash for CDWarnChime_St_enum
    template<>
    struct hash<::v0::org::harman::ford::notifalert_types::CDWarnChime_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::notifalert_types::CDWarnChime_St_enum& cDWarnChime_St_enum) const {
            return static_cast<int32_t>(cDWarnChime_St_enum);
        }
    };
    //Hash for CDWarnChime_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::notifalert_types::CDWarnChime_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::notifalert_types::CDWarnChime_Rq_enum& cDWarnChime_Rq_enum) const {
            return static_cast<int32_t>(cDWarnChime_Rq_enum);
        }
    };
    //Hash for Chime_Time_Criticality_enum
    template<>
    struct hash<::v0::org::harman::ford::notifalert_types::Chime_Time_Criticality_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::notifalert_types::Chime_Time_Criticality_enum& chime_Time_Criticality_enum) const {
            return static_cast<int32_t>(chime_Time_Criticality_enum);
        }
    };
    //Hash for Chime_Directionality_enum
    template<>
    struct hash<::v0::org::harman::ford::notifalert_types::Chime_Directionality_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::notifalert_types::Chime_Directionality_enum& chime_Directionality_enum) const {
            return static_cast<int32_t>(chime_Directionality_enum);
        }
    };
    //Hash for Chime_enum
    template<>
    struct hash<::v0::org::harman::ford::notifalert_types::Chime_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::notifalert_types::Chime_enum& chime_enum) const {
            return static_cast<int32_t>(chime_enum);
        }
    };
    //Hash for Chime_Occurence_enum
    template<>
    struct hash<::v0::org::harman::ford::notifalert_types::Chime_Occurence_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::notifalert_types::Chime_Occurence_enum& chime_Occurence_enum) const {
            return static_cast<int32_t>(chime_Occurence_enum);
        }
    };
    //Hash for Chime_Time_Criticality2_enum
    template<>
    struct hash<::v0::org::harman::ford::notifalert_types::Chime_Time_Criticality2_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::notifalert_types::Chime_Time_Criticality2_enum& chime_Time_Criticality2_enum) const {
            return static_cast<int32_t>(chime_Time_Criticality2_enum);
        }
    };
    //Hash for Chime_Directionality2_enum
    template<>
    struct hash<::v0::org::harman::ford::notifalert_types::Chime_Directionality2_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::notifalert_types::Chime_Directionality2_enum& chime_Directionality2_enum) const {
            return static_cast<int32_t>(chime_Directionality2_enum);
        }
    };
    //Hash for Chime2_enum
    template<>
    struct hash<::v0::org::harman::ford::notifalert_types::Chime2_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::notifalert_types::Chime2_enum& chime2_enum) const {
            return static_cast<int32_t>(chime2_enum);
        }
    };
    //Hash for Chime_Occurence2_enum
    template<>
    struct hash<::v0::org::harman::ford::notifalert_types::Chime_Occurence2_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::notifalert_types::Chime_Occurence2_enum& chime_Occurence2_enum) const {
            return static_cast<int32_t>(chime_Occurence2_enum);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_FORD_notifalert_types_HPP_

/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_ORG_HARMAN_FORD_emergcall_types_HPP_
#define V0_ORG_HARMAN_FORD_emergcall_types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace ford {

struct emergcall_types {
    
    struct EmgcyCallMute_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed_4 = 7,
            En_NotUsed_3 = 6,
            En_NotUsed_2 = 5,
            En_NotUsed_1 = 4,
            En_ManualEmergencyCallMute = 3,
            En_AutomaticEmergencyCallMute = 2,
            En_EmergencyCallUnmute = 1,
            En_Null = 0
        };
        
        EmgcyCallMute_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed_4)) {}
        EmgcyCallMute_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed_4):
                case static_cast<int32_t>(Literal::En_NotUsed_3):
                case static_cast<int32_t>(Literal::En_NotUsed_2):
                case static_cast<int32_t>(Literal::En_NotUsed_1):
                case static_cast<int32_t>(Literal::En_ManualEmergencyCallMute):
                case static_cast<int32_t>(Literal::En_AutomaticEmergencyCallMute):
                case static_cast<int32_t>(Literal::En_EmergencyCallUnmute):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EmgcyCallMute_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EmgcyCallMute_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EmgcyCallMute_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EmgcyCallMute_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EmgcyCallMute_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EmgcyCallMute_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct EmgcyCallMute_D_Stat_struct : CommonAPI::Struct<EmgcyCallMute_D_Stat_enum, uint8_t> {
    	
    	EmgcyCallMute_D_Stat_struct() {
    	}
    	EmgcyCallMute_D_Stat_struct(const EmgcyCallMute_D_Stat_enum &_emgcyCallMute_D_Stat_enum, const uint8_t &_status)
    	{
    		std::get<0>(values_) = _emgcyCallMute_D_Stat_enum;
    		std::get<1>(values_) = _status;
    	}
    	inline const EmgcyCallMute_D_Stat_enum &getEmgcyCallMute_D_Stat_enum() const { return std::get<0>(values_); }
    	inline void setEmgcyCallMute_D_Stat_enum(const EmgcyCallMute_D_Stat_enum &_value) { std::get<0>(values_) = _value; }
    	inline const uint8_t &getStatus() const { return std::get<1>(values_); }
    	inline void setStatus(const uint8_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const EmgcyCallMute_D_Stat_struct& _other) const {
                return (getEmgcyCallMute_D_Stat_enum() == _other.getEmgcyCallMute_D_Stat_enum() && getStatus() == _other.getStatus());
        }
    	inline bool operator!=(const EmgcyCallMute_D_Stat_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct SpkrStdCntr_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Faulty = 3,
            En_Normal = 2,
            En_NotPresent = 1,
            En_Null = 0
        };
        
        SpkrStdCntr_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Faulty)) {}
        SpkrStdCntr_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Faulty):
                case static_cast<int32_t>(Literal::En_Normal):
                case static_cast<int32_t>(Literal::En_NotPresent):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SpkrStdCntr_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SpkrStdCntr_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SpkrStdCntr_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SpkrStdCntr_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SpkrStdCntr_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SpkrStdCntr_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct SpkrStdLeft_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Faulty = 3,
            En_Normal = 2,
            En_NotPresent = 1,
            En_Null = 0
        };
        
        SpkrStdLeft_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Faulty)) {}
        SpkrStdLeft_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Faulty):
                case static_cast<int32_t>(Literal::En_Normal):
                case static_cast<int32_t>(Literal::En_NotPresent):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SpkrStdLeft_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SpkrStdLeft_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SpkrStdLeft_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SpkrStdLeft_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SpkrStdLeft_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SpkrStdLeft_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct SpkrStdRight_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Faulty = 3,
            En_Normal = 2,
            En_NotPresent = 1,
            En_Null = 0
        };
        
        SpkrStdRight_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Faulty)) {}
        SpkrStdRight_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Faulty):
                case static_cast<int32_t>(Literal::En_Normal):
                case static_cast<int32_t>(Literal::En_NotPresent):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SpkrStdRight_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SpkrStdRight_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SpkrStdRight_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SpkrStdRight_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SpkrStdRight_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SpkrStdRight_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct EmgcyCall_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed_3 = 7,
            En_NotUsed_2 = 6,
            En_NotUsed_1 = 5,
            En_ManualEmergencyCall = 4,
            En_AutoEmergencyCall = 3,
            En_NoEvent = 2,
            En_EmergencyCallNotSupported = 1,
            En_Null = 0
        };
        
        EmgcyCall_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed_3)) {}
        EmgcyCall_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed_3):
                case static_cast<int32_t>(Literal::En_NotUsed_2):
                case static_cast<int32_t>(Literal::En_NotUsed_1):
                case static_cast<int32_t>(Literal::En_ManualEmergencyCall):
                case static_cast<int32_t>(Literal::En_AutoEmergencyCall):
                case static_cast<int32_t>(Literal::En_NoEvent):
                case static_cast<int32_t>(Literal::En_EmergencyCallNotSupported):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EmgcyCall_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EmgcyCall_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EmgcyCall_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EmgcyCall_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EmgcyCall_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EmgcyCall_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct EmgcyCall_D_Stat_struct : CommonAPI::Struct<EmgcyCall_D_Stat_enum, uint8_t> {
    	
    	EmgcyCall_D_Stat_struct() {
    	}
    	EmgcyCall_D_Stat_struct(const EmgcyCall_D_Stat_enum &_emgcyCall_D_Stat_enum, const uint8_t &_status)
    	{
    		std::get<0>(values_) = _emgcyCall_D_Stat_enum;
    		std::get<1>(values_) = _status;
    	}
    	inline const EmgcyCall_D_Stat_enum &getEmgcyCall_D_Stat_enum() const { return std::get<0>(values_); }
    	inline void setEmgcyCall_D_Stat_enum(const EmgcyCall_D_Stat_enum &_value) { std::get<0>(values_) = _value; }
    	inline const uint8_t &getStatus() const { return std::get<1>(values_); }
    	inline void setStatus(const uint8_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const EmgcyCall_D_Stat_struct& _other) const {
                return (getEmgcyCall_D_Stat_enum() == _other.getEmgcyCall_D_Stat_enum() && getStatus() == _other.getStatus());
        }
    	inline bool operator!=(const EmgcyCall_D_Stat_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct EmgcyCallHmi_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed_1 = 15,
            En_Standby = 14,
            En_Disabled = 13,
            En_Malfunction = 12,
            En_CallCompleted = 11,
            En_CallDisconnected = 10,
            En_CallNotPossible = 9,
            En_CallCancelled = 8,
            En_CallRetry = 7,
            En_CallConnected = 6,
            En_CallInProgress = 5,
            En_CallMsdTransfer = 4,
            En_CallDial = 3,
            En_CallCancelTimer = 2,
            En_NoEvent = 1,
            En_Null = 0
        };
        
        EmgcyCallHmi_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed_1)) {}
        EmgcyCallHmi_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed_1):
                case static_cast<int32_t>(Literal::En_Standby):
                case static_cast<int32_t>(Literal::En_Disabled):
                case static_cast<int32_t>(Literal::En_Malfunction):
                case static_cast<int32_t>(Literal::En_CallCompleted):
                case static_cast<int32_t>(Literal::En_CallDisconnected):
                case static_cast<int32_t>(Literal::En_CallNotPossible):
                case static_cast<int32_t>(Literal::En_CallCancelled):
                case static_cast<int32_t>(Literal::En_CallRetry):
                case static_cast<int32_t>(Literal::En_CallConnected):
                case static_cast<int32_t>(Literal::En_CallInProgress):
                case static_cast<int32_t>(Literal::En_CallMsdTransfer):
                case static_cast<int32_t>(Literal::En_CallDial):
                case static_cast<int32_t>(Literal::En_CallCancelTimer):
                case static_cast<int32_t>(Literal::En_NoEvent):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EmgcyCallHmi_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EmgcyCallHmi_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EmgcyCallHmi_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EmgcyCallHmi_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EmgcyCallHmi_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EmgcyCallHmi_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.harman.ford.emergcall_types";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct emergcall_types

} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for EmgcyCallMute_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::emergcall_types::EmgcyCallMute_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergcall_types::EmgcyCallMute_D_Stat_enum& emgcyCallMute_D_Stat_enum) const {
            return static_cast<int32_t>(emgcyCallMute_D_Stat_enum);
        }
    };
    //Hash for SpkrStdCntr_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::emergcall_types::SpkrStdCntr_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergcall_types::SpkrStdCntr_D_Stat_enum& spkrStdCntr_D_Stat_enum) const {
            return static_cast<int32_t>(spkrStdCntr_D_Stat_enum);
        }
    };
    //Hash for SpkrStdLeft_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::emergcall_types::SpkrStdLeft_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergcall_types::SpkrStdLeft_D_Stat_enum& spkrStdLeft_D_Stat_enum) const {
            return static_cast<int32_t>(spkrStdLeft_D_Stat_enum);
        }
    };
    //Hash for SpkrStdRight_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::emergcall_types::SpkrStdRight_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergcall_types::SpkrStdRight_D_Stat_enum& spkrStdRight_D_Stat_enum) const {
            return static_cast<int32_t>(spkrStdRight_D_Stat_enum);
        }
    };
    //Hash for EmgcyCall_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::emergcall_types::EmgcyCall_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergcall_types::EmgcyCall_D_Stat_enum& emgcyCall_D_Stat_enum) const {
            return static_cast<int32_t>(emgcyCall_D_Stat_enum);
        }
    };
    //Hash for EmgcyCallHmi_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::emergcall_types::EmgcyCallHmi_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergcall_types::EmgcyCallHmi_D_Stat_enum& emgcyCallHmi_D_Stat_enum) const {
            return static_cast<int32_t>(emgcyCallHmi_D_Stat_enum);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_FORD_emergcall_types_HPP_

/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_ORG_HARMAN_FORD_bt_connectivity_types_HPP_
#define V0_ORG_HARMAN_FORD_bt_connectivity_types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace ford {

struct bt_connectivity_types {
    
    struct BTInCallOptions_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_HoldModeoff = 6,
            En_InHoldMode = 5,
            En_InHandsFreeMode = 4,
            En_InPrivacyMode = 3,
            En_Joined = 2,
            En_Switched = 1,
            En_Inactive = 0
        };
        
        BTInCallOptions_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_HoldModeoff)) {}
        BTInCallOptions_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_HoldModeoff):
                case static_cast<int32_t>(Literal::En_InHoldMode):
                case static_cast<int32_t>(Literal::En_InHandsFreeMode):
                case static_cast<int32_t>(Literal::En_InPrivacyMode):
                case static_cast<int32_t>(Literal::En_Joined):
                case static_cast<int32_t>(Literal::En_Switched):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const BTInCallOptions_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const BTInCallOptions_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const BTInCallOptions_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const BTInCallOptions_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const BTInCallOptions_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const BTInCallOptions_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VRM_BTBatteryLevel_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Invalid = 0,
            En_Level0 = 1,
            En_Level1 = 2,
            En_Level2 = 3,
            En_Level3 = 4,
            En_Level4 = 5,
            En_Level5 = 6,
            En_NoLinkToBtPhone = 7,
            En_NotSupportedByBtPhone = 8
        };
        
        VRM_BTBatteryLevel_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Invalid)) {}
        VRM_BTBatteryLevel_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Level0):
                case static_cast<int32_t>(Literal::En_Level1):
                case static_cast<int32_t>(Literal::En_Level2):
                case static_cast<int32_t>(Literal::En_Level3):
                case static_cast<int32_t>(Literal::En_Level4):
                case static_cast<int32_t>(Literal::En_Level5):
                case static_cast<int32_t>(Literal::En_NoLinkToBtPhone):
                case static_cast<int32_t>(Literal::En_NotSupportedByBtPhone):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VRM_BTBatteryLevel_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VRM_BTBatteryLevel_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VRM_BTBatteryLevel_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VRM_BTBatteryLevel_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VRM_BTBatteryLevel_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VRM_BTBatteryLevel_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VRM_BTSignalStrength_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Invalid = 0,
            En_SignalStrength0 = 1,
            En_SignalStrength1 = 2,
            En_SignalStrength2 = 3,
            En_SignalStrength3 = 4,
            En_SignalStrength4 = 5,
            En_SignalStrength5 = 6,
            En_NoLinkToBtPhone = 7,
            En_NotSupportedByBtPhone = 8
        };
        
        VRM_BTSignalStrength_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Invalid)) {}
        VRM_BTSignalStrength_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_SignalStrength0):
                case static_cast<int32_t>(Literal::En_SignalStrength1):
                case static_cast<int32_t>(Literal::En_SignalStrength2):
                case static_cast<int32_t>(Literal::En_SignalStrength3):
                case static_cast<int32_t>(Literal::En_SignalStrength4):
                case static_cast<int32_t>(Literal::En_SignalStrength5):
                case static_cast<int32_t>(Literal::En_NoLinkToBtPhone):
                case static_cast<int32_t>(Literal::En_NotSupportedByBtPhone):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VRM_BTSignalStrength_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VRM_BTSignalStrength_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VRM_BTSignalStrength_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VRM_BTSignalStrength_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VRM_BTSignalStrength_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VRM_BTSignalStrength_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VRM_BTNetworkStatus_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Invalid = 0,
            En_NoNetwork = 1,
            En_InNetwork = 2,
            En_Roaming = 3,
            En_NoLinkToBtPhone = 4,
            En_NotSupportedByBtPhone = 5
        };
        
        VRM_BTNetworkStatus_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Invalid)) {}
        VRM_BTNetworkStatus_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_NoNetwork):
                case static_cast<int32_t>(Literal::En_InNetwork):
                case static_cast<int32_t>(Literal::En_Roaming):
                case static_cast<int32_t>(Literal::En_NoLinkToBtPhone):
                case static_cast<int32_t>(Literal::En_NotSupportedByBtPhone):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VRM_BTNetworkStatus_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VRM_BTNetworkStatus_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VRM_BTNetworkStatus_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VRM_BTNetworkStatus_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VRM_BTNetworkStatus_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VRM_BTNetworkStatus_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VRM_BlutoothStatus_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Invalid = 0,
            En_On = 1,
            En_Off = 2
        };
        
        VRM_BlutoothStatus_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Invalid)) {}
        VRM_BlutoothStatus_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_On):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VRM_BlutoothStatus_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VRM_BlutoothStatus_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VRM_BlutoothStatus_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VRM_BlutoothStatus_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VRM_BlutoothStatus_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VRM_BlutoothStatus_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VRM_BTPhoneSts_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Connected_Call_on_hold = 16,
            En_Conference_OtherCallOnHold = 15,
            En_Invalid = 0,
            En_Idle = 1,
            En_Dialing = 2,
            En_Connected = 3,
            En_CradlephNotReady = 4,
            En_NumUnobtainable = 5,
            En_IncomCall = 6,
            En_NoLinkToBt = 7,
            En_InitBtCon = 8,
            En_PhoneBusy = 9,
            En_PhoneVr = 10,
            En_NotSupported = 11,
            En_BtPhPriv = 12,
            En_ConfCall = 13,
            En_Conference_2ndIncCall = 14
        };
        
        VRM_BTPhoneSts_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Connected_Call_on_hold)) {}
        VRM_BTPhoneSts_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Connected_Call_on_hold):
                case static_cast<int32_t>(Literal::En_Conference_OtherCallOnHold):
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Idle):
                case static_cast<int32_t>(Literal::En_Dialing):
                case static_cast<int32_t>(Literal::En_Connected):
                case static_cast<int32_t>(Literal::En_CradlephNotReady):
                case static_cast<int32_t>(Literal::En_NumUnobtainable):
                case static_cast<int32_t>(Literal::En_IncomCall):
                case static_cast<int32_t>(Literal::En_NoLinkToBt):
                case static_cast<int32_t>(Literal::En_InitBtCon):
                case static_cast<int32_t>(Literal::En_PhoneBusy):
                case static_cast<int32_t>(Literal::En_PhoneVr):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_BtPhPriv):
                case static_cast<int32_t>(Literal::En_ConfCall):
                case static_cast<int32_t>(Literal::En_Conference_2ndIncCall):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VRM_BTPhoneSts_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VRM_BTPhoneSts_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VRM_BTPhoneSts_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VRM_BTPhoneSts_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VRM_BTPhoneSts_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VRM_BTPhoneSts_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ACU_AROperationType_Rsp_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Inactive = 0,
            En_Requestaudioresource = 1,
            En_Releaseaudioresource = 2,
            En_Releaseallaudioresouces = 3,
            En_Getresourceupdate = 4,
            En_Getallresourceupdates = 5
        };
        
        ACU_AROperationType_Rsp_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Inactive)) {}
        ACU_AROperationType_Rsp_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_Requestaudioresource):
                case static_cast<int32_t>(Literal::En_Releaseaudioresource):
                case static_cast<int32_t>(Literal::En_Releaseallaudioresouces):
                case static_cast<int32_t>(Literal::En_Getresourceupdate):
                case static_cast<int32_t>(Literal::En_Getallresourceupdates):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_AROperationType_Rsp_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_AROperationType_Rsp_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_AROperationType_Rsp_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_AROperationType_Rsp_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_AROperationType_Rsp_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_AROperationType_Rsp_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ACU_ARResponse_Rsp_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Inactive = 0,
            En_RequestAccepted = 1,
            En_RequestAcceptedWoCtrl = 2,
            En_RequestDenied = 3,
            En_RessourceUpdateStatus = 4
        };
        
        ACU_ARResponse_Rsp_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Inactive)) {}
        ACU_ARResponse_Rsp_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_RequestAccepted):
                case static_cast<int32_t>(Literal::En_RequestAcceptedWoCtrl):
                case static_cast<int32_t>(Literal::En_RequestDenied):
                case static_cast<int32_t>(Literal::En_RessourceUpdateStatus):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_ARResponse_Rsp_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_ARResponse_Rsp_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_ARResponse_Rsp_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_ARResponse_Rsp_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_ARResponse_Rsp_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_ARResponse_Rsp_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ACU_ARAudioSource_Rsp_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_iPod = 15,
            En_USB = 14,
            En_BTAudio = 13,
            En_AmfmRadio = 0,
            En_FrontDisc = 1,
            En_SDARS_DAB = 2,
            En_InDashCdChanger = 3,
            En_VoiceRecogniser = 4,
            En_TelematicUnit = 5,
            En_BluetoothPhone = 6,
            En_RearDisc = 7,
            En_APIM = 8,
            En_FrontAuxInput = 9,
            En_Navigation = 10,
            En_RearAux = 11,
            En_NotReq = 12
        };
        
        ACU_ARAudioSource_Rsp_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_iPod)) {}
        ACU_ARAudioSource_Rsp_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_iPod):
                case static_cast<int32_t>(Literal::En_USB):
                case static_cast<int32_t>(Literal::En_BTAudio):
                case static_cast<int32_t>(Literal::En_AmfmRadio):
                case static_cast<int32_t>(Literal::En_FrontDisc):
                case static_cast<int32_t>(Literal::En_SDARS_DAB):
                case static_cast<int32_t>(Literal::En_InDashCdChanger):
                case static_cast<int32_t>(Literal::En_VoiceRecogniser):
                case static_cast<int32_t>(Literal::En_TelematicUnit):
                case static_cast<int32_t>(Literal::En_BluetoothPhone):
                case static_cast<int32_t>(Literal::En_RearDisc):
                case static_cast<int32_t>(Literal::En_APIM):
                case static_cast<int32_t>(Literal::En_FrontAuxInput):
                case static_cast<int32_t>(Literal::En_Navigation):
                case static_cast<int32_t>(Literal::En_RearAux):
                case static_cast<int32_t>(Literal::En_NotReq):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_ARAudioSource_Rsp_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_ARAudioSource_Rsp_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_ARAudioSource_Rsp_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_ARAudioSource_Rsp_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_ARAudioSource_Rsp_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_ARAudioSource_Rsp_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ACU_ARReqstrSystem_Rsp_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_FrontRequester = 0,
            En_RearRequester = 1
        };
        
        ACU_ARReqstrSystem_Rsp_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_FrontRequester)) {}
        ACU_ARReqstrSystem_Rsp_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_FrontRequester):
                case static_cast<int32_t>(Literal::En_RearRequester):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_ARReqstrSystem_Rsp_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_ARReqstrSystem_Rsp_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_ARReqstrSystem_Rsp_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_ARReqstrSystem_Rsp_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_ARReqstrSystem_Rsp_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_ARReqstrSystem_Rsp_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ACU_RUReqstrSystem_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_FrontRequester = 0,
            En_RearRequester = 1
        };
        
        ACU_RUReqstrSystem_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_FrontRequester)) {}
        ACU_RUReqstrSystem_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_FrontRequester):
                case static_cast<int32_t>(Literal::En_RearRequester):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_RUReqstrSystem_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_RUReqstrSystem_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_RUReqstrSystem_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_RUReqstrSystem_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_RUReqstrSystem_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_RUReqstrSystem_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ACU_RUResReqstStatus_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NoResourceupdate = 0,
            En_Deallocated = 1,
            En_Allocated = 2,
            En_Stacked = 3,
            En_Granted = 4,
            En_GrantedNoControlOfAudioSrc = 5
        };
        
        ACU_RUResReqstStatus_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NoResourceupdate)) {}
        ACU_RUResReqstStatus_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NoResourceupdate):
                case static_cast<int32_t>(Literal::En_Deallocated):
                case static_cast<int32_t>(Literal::En_Allocated):
                case static_cast<int32_t>(Literal::En_Stacked):
                case static_cast<int32_t>(Literal::En_Granted):
                case static_cast<int32_t>(Literal::En_GrantedNoControlOfAudioSrc):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_RUResReqstStatus_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_RUResReqstStatus_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_RUResReqstStatus_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_RUResReqstStatus_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_RUResReqstStatus_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_RUResReqstStatus_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ACU_ARReqstrPriority_Rp_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_EmergencyServ = 0,
            En_TelService = 1,
            En_AutoAnswer = 2,
            En_Ta = 3,
            En_PttMutevoice = 4,
            En_NavUserVoiceCmd = 5,
            En_NavSysVoiceCmd = 6,
            En_Radio = 7,
            En_Disc = 8,
            En_Alarm = 9,
            En_Ptynews = 10,
            En_Aux_ExtSource = 11,
            En_BT_BTNavAndTelMute = 12,
            En_ManualAudioMute = 13,
            En_NotReq = 14
        };
        
        ACU_ARReqstrPriority_Rp_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_EmergencyServ)) {}
        ACU_ARReqstrPriority_Rp_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_EmergencyServ):
                case static_cast<int32_t>(Literal::En_TelService):
                case static_cast<int32_t>(Literal::En_AutoAnswer):
                case static_cast<int32_t>(Literal::En_Ta):
                case static_cast<int32_t>(Literal::En_PttMutevoice):
                case static_cast<int32_t>(Literal::En_NavUserVoiceCmd):
                case static_cast<int32_t>(Literal::En_NavSysVoiceCmd):
                case static_cast<int32_t>(Literal::En_Radio):
                case static_cast<int32_t>(Literal::En_Disc):
                case static_cast<int32_t>(Literal::En_Alarm):
                case static_cast<int32_t>(Literal::En_Ptynews):
                case static_cast<int32_t>(Literal::En_Aux_ExtSource):
                case static_cast<int32_t>(Literal::En_BT_BTNavAndTelMute):
                case static_cast<int32_t>(Literal::En_ManualAudioMute):
                case static_cast<int32_t>(Literal::En_NotReq):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_ARReqstrPriority_Rp_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_ARReqstrPriority_Rp_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_ARReqstrPriority_Rp_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_ARReqstrPriority_Rp_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_ARReqstrPriority_Rp_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_ARReqstrPriority_Rp_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ACU_RUReqstrPriority_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_EmergencyServ = 0,
            En_TelService = 1,
            En_AutoAnswer = 2,
            En_Ta = 3,
            En_PttMutevoice = 4,
            En_NavUserVoiceCmd = 5,
            En_NavSysVoiceCmd = 6,
            En_Radio = 7,
            En_Disc = 8,
            En_Alarm = 9,
            En_Ptynews = 10,
            En_Aux_ExtSource = 11,
            En_BT_BTNavAndTelMute = 12,
            En_ManualAudioMute = 13,
            En_NotReq = 14
        };
        
        ACU_RUReqstrPriority_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_EmergencyServ)) {}
        ACU_RUReqstrPriority_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_EmergencyServ):
                case static_cast<int32_t>(Literal::En_TelService):
                case static_cast<int32_t>(Literal::En_AutoAnswer):
                case static_cast<int32_t>(Literal::En_Ta):
                case static_cast<int32_t>(Literal::En_PttMutevoice):
                case static_cast<int32_t>(Literal::En_NavUserVoiceCmd):
                case static_cast<int32_t>(Literal::En_NavSysVoiceCmd):
                case static_cast<int32_t>(Literal::En_Radio):
                case static_cast<int32_t>(Literal::En_Disc):
                case static_cast<int32_t>(Literal::En_Alarm):
                case static_cast<int32_t>(Literal::En_Ptynews):
                case static_cast<int32_t>(Literal::En_Aux_ExtSource):
                case static_cast<int32_t>(Literal::En_BT_BTNavAndTelMute):
                case static_cast<int32_t>(Literal::En_ManualAudioMute):
                case static_cast<int32_t>(Literal::En_NotReq):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_RUReqstrPriority_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_RUReqstrPriority_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_RUReqstrPriority_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_RUReqstrPriority_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_RUReqstrPriority_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_RUReqstrPriority_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ACU_RUAudioSource_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_iPod = 15,
            En_USB = 14,
            En_BTAudio = 13,
            En_AmfmRadio = 0,
            En_FrontDisc = 1,
            En_SDARS_DAB = 2,
            En_InDashCdChanger = 3,
            En_VoiceRecogniser = 4,
            En_TelematicUnit = 5,
            En_BluetoothPhone = 6,
            En_RearDisc = 7,
            En_APIM = 8,
            En_FrontAuxInput = 9,
            En_Navigation = 10,
            En_RearAux = 11,
            En_NotReq = 12
        };
        
        ACU_RUAudioSource_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_iPod)) {}
        ACU_RUAudioSource_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_iPod):
                case static_cast<int32_t>(Literal::En_USB):
                case static_cast<int32_t>(Literal::En_BTAudio):
                case static_cast<int32_t>(Literal::En_AmfmRadio):
                case static_cast<int32_t>(Literal::En_FrontDisc):
                case static_cast<int32_t>(Literal::En_SDARS_DAB):
                case static_cast<int32_t>(Literal::En_InDashCdChanger):
                case static_cast<int32_t>(Literal::En_VoiceRecogniser):
                case static_cast<int32_t>(Literal::En_TelematicUnit):
                case static_cast<int32_t>(Literal::En_BluetoothPhone):
                case static_cast<int32_t>(Literal::En_RearDisc):
                case static_cast<int32_t>(Literal::En_APIM):
                case static_cast<int32_t>(Literal::En_FrontAuxInput):
                case static_cast<int32_t>(Literal::En_Navigation):
                case static_cast<int32_t>(Literal::En_RearAux):
                case static_cast<int32_t>(Literal::En_NotReq):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_RUAudioSource_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_RUAudioSource_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_RUAudioSource_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_RUAudioSource_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_RUAudioSource_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_RUAudioSource_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VRM_BTEndTelService_Rsp_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Error = 3,
            En_Inactive = 0,
            En_IntermediateResult = 1,
            En_FinalResult = 2
        };
        
        VRM_BTEndTelService_Rsp_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Error)) {}
        VRM_BTEndTelService_Rsp_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Error):
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_IntermediateResult):
                case static_cast<int32_t>(Literal::En_FinalResult):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VRM_BTEndTelService_Rsp_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VRM_BTEndTelService_Rsp_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VRM_BTEndTelService_Rsp_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VRM_BTEndTelService_Rsp_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VRM_BTEndTelService_Rsp_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VRM_BTEndTelService_Rsp_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VRM_BTIncomingCall_Rsp_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Inactive = 0,
            En_Accepted = 1,
            En_Declined = 2,
            En_Failed = 3
        };
        
        VRM_BTIncomingCall_Rsp_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Inactive)) {}
        VRM_BTIncomingCall_Rsp_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_Accepted):
                case static_cast<int32_t>(Literal::En_Declined):
                case static_cast<int32_t>(Literal::En_Failed):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VRM_BTIncomingCall_Rsp_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VRM_BTIncomingCall_Rsp_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VRM_BTIncomingCall_Rsp_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VRM_BTIncomingCall_Rsp_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VRM_BTIncomingCall_Rsp_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VRM_BTIncomingCall_Rsp_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Mc_PhMicrophoneMute_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Reserved = 3,
            En_MicrophoneUnmute = 2,
            En_MicrophoneMute = 1,
            En_Inactive = 0
        };
        
        Mc_PhMicrophoneMute_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Reserved)) {}
        Mc_PhMicrophoneMute_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Reserved):
                case static_cast<int32_t>(Literal::En_MicrophoneUnmute):
                case static_cast<int32_t>(Literal::En_MicrophoneMute):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Mc_PhMicrophoneMute_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Mc_PhMicrophoneMute_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Mc_PhMicrophoneMute_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Mc_PhMicrophoneMute_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Mc_PhMicrophoneMute_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Mc_PhMicrophoneMute_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Mc_BTInCallOptions_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_EndHoldCall = 6,
            En_HoldCall = 5,
            En_GotoHandsfreeMode = 4,
            En_GotoPrivacyMode = 3,
            En_JoinCalls = 2,
            En_SwitchCalls = 1,
            En_Inactive = 0
        };
        
        Mc_BTInCallOptions_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_EndHoldCall)) {}
        Mc_BTInCallOptions_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_EndHoldCall):
                case static_cast<int32_t>(Literal::En_HoldCall):
                case static_cast<int32_t>(Literal::En_GotoHandsfreeMode):
                case static_cast<int32_t>(Literal::En_GotoPrivacyMode):
                case static_cast<int32_t>(Literal::En_JoinCalls):
                case static_cast<int32_t>(Literal::En_SwitchCalls):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Mc_BTInCallOptions_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Mc_BTInCallOptions_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Mc_BTInCallOptions_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Mc_BTInCallOptions_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Mc_BTInCallOptions_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Mc_BTInCallOptions_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct HUD_BTIncomingCall_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_DeclineIncomingCall = 2,
            En_AcceptIncomingCall = 1,
            En_Inactive = 0
        };
        
        HUD_BTIncomingCall_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_DeclineIncomingCall)) {}
        HUD_BTIncomingCall_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_DeclineIncomingCall):
                case static_cast<int32_t>(Literal::En_AcceptIncomingCall):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const HUD_BTIncomingCall_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const HUD_BTIncomingCall_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const HUD_BTIncomingCall_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const HUD_BTIncomingCall_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const HUD_BTIncomingCall_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const HUD_BTIncomingCall_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct HUD_BTEndTelService_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_EndOngoingTelephonyCall = 1,
            En_Inactive = 0
        };
        
        HUD_BTEndTelService_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_EndOngoingTelephonyCall)) {}
        HUD_BTEndTelService_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_EndOngoingTelephonyCall):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const HUD_BTEndTelService_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const HUD_BTEndTelService_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const HUD_BTEndTelService_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const HUD_BTEndTelService_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const HUD_BTEndTelService_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const HUD_BTEndTelService_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct HUD_BTInCallOptions_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_EndHoldCall = 6,
            En_HoldCall = 5,
            En_GotoHandsfreeMode = 4,
            En_GotoPrivacyMode = 3,
            En_JoinCalls = 2,
            En_SwitchCalls = 1,
            En_Inactive = 0
        };
        
        HUD_BTInCallOptions_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_EndHoldCall)) {}
        HUD_BTInCallOptions_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_EndHoldCall):
                case static_cast<int32_t>(Literal::En_HoldCall):
                case static_cast<int32_t>(Literal::En_GotoHandsfreeMode):
                case static_cast<int32_t>(Literal::En_GotoPrivacyMode):
                case static_cast<int32_t>(Literal::En_JoinCalls):
                case static_cast<int32_t>(Literal::En_SwitchCalls):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const HUD_BTInCallOptions_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const HUD_BTInCallOptions_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const HUD_BTInCallOptions_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const HUD_BTInCallOptions_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const HUD_BTInCallOptions_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const HUD_BTInCallOptions_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct HUD_Send_Signals_2_struct : CommonAPI::Struct<HUD_BTIncomingCall_Rq_enum, HUD_BTEndTelService_Rq_enum, HUD_BTInCallOptions_Rq_enum> {
    	
    	HUD_Send_Signals_2_struct() {
    	}
    	HUD_Send_Signals_2_struct(const HUD_BTIncomingCall_Rq_enum &_hUD_BTIncomingCall_Rq_enum, const HUD_BTEndTelService_Rq_enum &_hUD_BTEndTelService_Rq_enum, const HUD_BTInCallOptions_Rq_enum &_hUD_BTInCallOptions_Rq_enum)
    	{
    		std::get<0>(values_) = _hUD_BTIncomingCall_Rq_enum;
    		std::get<1>(values_) = _hUD_BTEndTelService_Rq_enum;
    		std::get<2>(values_) = _hUD_BTInCallOptions_Rq_enum;
    	}
    	inline const HUD_BTIncomingCall_Rq_enum &getHUD_BTIncomingCall_Rq_enum() const { return std::get<0>(values_); }
    	inline void setHUD_BTIncomingCall_Rq_enum(const HUD_BTIncomingCall_Rq_enum &_value) { std::get<0>(values_) = _value; }
    	inline const HUD_BTEndTelService_Rq_enum &getHUD_BTEndTelService_Rq_enum() const { return std::get<1>(values_); }
    	inline void setHUD_BTEndTelService_Rq_enum(const HUD_BTEndTelService_Rq_enum &_value) { std::get<1>(values_) = _value; }
    	inline const HUD_BTInCallOptions_Rq_enum &getHUD_BTInCallOptions_Rq_enum() const { return std::get<2>(values_); }
    	inline void setHUD_BTInCallOptions_Rq_enum(const HUD_BTInCallOptions_Rq_enum &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const HUD_Send_Signals_2_struct& _other) const {
                return (getHUD_BTIncomingCall_Rq_enum() == _other.getHUD_BTIncomingCall_Rq_enum() && getHUD_BTEndTelService_Rq_enum() == _other.getHUD_BTEndTelService_Rq_enum() && getHUD_BTInCallOptions_Rq_enum() == _other.getHUD_BTInCallOptions_Rq_enum());
        }
    	inline bool operator!=(const HUD_Send_Signals_2_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct HEC_BTEndTelService_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_EndOngoingTelephonyCall = 1,
            En_Inactive = 0
        };
        
        HEC_BTEndTelService_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_EndOngoingTelephonyCall)) {}
        HEC_BTEndTelService_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_EndOngoingTelephonyCall):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const HEC_BTEndTelService_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const HEC_BTEndTelService_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const HEC_BTEndTelService_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const HEC_BTEndTelService_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const HEC_BTEndTelService_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const HEC_BTEndTelService_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct HEC_BTIncomingCall_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_DeclineIncomingCall = 2,
            En_AcceptIncomingCall = 1,
            En_Inactive = 0
        };
        
        HEC_BTIncomingCall_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_DeclineIncomingCall)) {}
        HEC_BTIncomingCall_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_DeclineIncomingCall):
                case static_cast<int32_t>(Literal::En_AcceptIncomingCall):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const HEC_BTIncomingCall_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const HEC_BTIncomingCall_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const HEC_BTIncomingCall_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const HEC_BTIncomingCall_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const HEC_BTIncomingCall_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const HEC_BTIncomingCall_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct HEC_DispDimm_struct : CommonAPI::Struct<HEC_BTEndTelService_Rq_enum, HEC_BTIncomingCall_Rq_enum> {
    	
    	HEC_DispDimm_struct() {
    	}
    	HEC_DispDimm_struct(const HEC_BTEndTelService_Rq_enum &_hEC_BTEndTelService_Rq_enum, const HEC_BTIncomingCall_Rq_enum &_hEC_BTIncomingCall_Rq_enum)
    	{
    		std::get<0>(values_) = _hEC_BTEndTelService_Rq_enum;
    		std::get<1>(values_) = _hEC_BTIncomingCall_Rq_enum;
    	}
    	inline const HEC_BTEndTelService_Rq_enum &getHEC_BTEndTelService_Rq_enum() const { return std::get<0>(values_); }
    	inline void setHEC_BTEndTelService_Rq_enum(const HEC_BTEndTelService_Rq_enum &_value) { std::get<0>(values_) = _value; }
    	inline const HEC_BTIncomingCall_Rq_enum &getHEC_BTIncomingCall_Rq_enum() const { return std::get<1>(values_); }
    	inline void setHEC_BTIncomingCall_Rq_enum(const HEC_BTIncomingCall_Rq_enum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const HEC_DispDimm_struct& _other) const {
                return (getHEC_BTEndTelService_Rq_enum() == _other.getHEC_BTEndTelService_Rq_enum() && getHEC_BTIncomingCall_Rq_enum() == _other.getHEC_BTIncomingCall_Rq_enum());
        }
    	inline bool operator!=(const HEC_DispDimm_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.harman.ford.bt_connectivity_types";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct bt_connectivity_types

} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for BTInCallOptions_St_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::BTInCallOptions_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::BTInCallOptions_St_enum& bTInCallOptions_St_enum) const {
            return static_cast<int32_t>(bTInCallOptions_St_enum);
        }
    };
    //Hash for VRM_BTBatteryLevel_St_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::VRM_BTBatteryLevel_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::VRM_BTBatteryLevel_St_enum& vRM_BTBatteryLevel_St_enum) const {
            return static_cast<int32_t>(vRM_BTBatteryLevel_St_enum);
        }
    };
    //Hash for VRM_BTSignalStrength_St_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::VRM_BTSignalStrength_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::VRM_BTSignalStrength_St_enum& vRM_BTSignalStrength_St_enum) const {
            return static_cast<int32_t>(vRM_BTSignalStrength_St_enum);
        }
    };
    //Hash for VRM_BTNetworkStatus_St_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::VRM_BTNetworkStatus_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::VRM_BTNetworkStatus_St_enum& vRM_BTNetworkStatus_St_enum) const {
            return static_cast<int32_t>(vRM_BTNetworkStatus_St_enum);
        }
    };
    //Hash for VRM_BlutoothStatus_St_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::VRM_BlutoothStatus_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::VRM_BlutoothStatus_St_enum& vRM_BlutoothStatus_St_enum) const {
            return static_cast<int32_t>(vRM_BlutoothStatus_St_enum);
        }
    };
    //Hash for VRM_BTPhoneSts_St_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::VRM_BTPhoneSts_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::VRM_BTPhoneSts_St_enum& vRM_BTPhoneSts_St_enum) const {
            return static_cast<int32_t>(vRM_BTPhoneSts_St_enum);
        }
    };
    //Hash for ACU_AROperationType_Rsp_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::ACU_AROperationType_Rsp_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::ACU_AROperationType_Rsp_enum& aCU_AROperationType_Rsp_enum) const {
            return static_cast<int32_t>(aCU_AROperationType_Rsp_enum);
        }
    };
    //Hash for ACU_ARResponse_Rsp_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::ACU_ARResponse_Rsp_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::ACU_ARResponse_Rsp_enum& aCU_ARResponse_Rsp_enum) const {
            return static_cast<int32_t>(aCU_ARResponse_Rsp_enum);
        }
    };
    //Hash for ACU_ARAudioSource_Rsp_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::ACU_ARAudioSource_Rsp_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::ACU_ARAudioSource_Rsp_enum& aCU_ARAudioSource_Rsp_enum) const {
            return static_cast<int32_t>(aCU_ARAudioSource_Rsp_enum);
        }
    };
    //Hash for ACU_ARReqstrSystem_Rsp_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::ACU_ARReqstrSystem_Rsp_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::ACU_ARReqstrSystem_Rsp_enum& aCU_ARReqstrSystem_Rsp_enum) const {
            return static_cast<int32_t>(aCU_ARReqstrSystem_Rsp_enum);
        }
    };
    //Hash for ACU_RUReqstrSystem_St_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::ACU_RUReqstrSystem_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::ACU_RUReqstrSystem_St_enum& aCU_RUReqstrSystem_St_enum) const {
            return static_cast<int32_t>(aCU_RUReqstrSystem_St_enum);
        }
    };
    //Hash for ACU_RUResReqstStatus_St_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::ACU_RUResReqstStatus_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::ACU_RUResReqstStatus_St_enum& aCU_RUResReqstStatus_St_enum) const {
            return static_cast<int32_t>(aCU_RUResReqstStatus_St_enum);
        }
    };
    //Hash for ACU_ARReqstrPriority_Rp_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::ACU_ARReqstrPriority_Rp_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::ACU_ARReqstrPriority_Rp_enum& aCU_ARReqstrPriority_Rp_enum) const {
            return static_cast<int32_t>(aCU_ARReqstrPriority_Rp_enum);
        }
    };
    //Hash for ACU_RUReqstrPriority_St_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::ACU_RUReqstrPriority_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::ACU_RUReqstrPriority_St_enum& aCU_RUReqstrPriority_St_enum) const {
            return static_cast<int32_t>(aCU_RUReqstrPriority_St_enum);
        }
    };
    //Hash for ACU_RUAudioSource_St_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::ACU_RUAudioSource_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::ACU_RUAudioSource_St_enum& aCU_RUAudioSource_St_enum) const {
            return static_cast<int32_t>(aCU_RUAudioSource_St_enum);
        }
    };
    //Hash for VRM_BTEndTelService_Rsp_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::VRM_BTEndTelService_Rsp_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::VRM_BTEndTelService_Rsp_enum& vRM_BTEndTelService_Rsp_enum) const {
            return static_cast<int32_t>(vRM_BTEndTelService_Rsp_enum);
        }
    };
    //Hash for VRM_BTIncomingCall_Rsp_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::VRM_BTIncomingCall_Rsp_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::VRM_BTIncomingCall_Rsp_enum& vRM_BTIncomingCall_Rsp_enum) const {
            return static_cast<int32_t>(vRM_BTIncomingCall_Rsp_enum);
        }
    };
    //Hash for Mc_PhMicrophoneMute_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::Mc_PhMicrophoneMute_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::Mc_PhMicrophoneMute_Rq_enum& mc_PhMicrophoneMute_Rq_enum) const {
            return static_cast<int32_t>(mc_PhMicrophoneMute_Rq_enum);
        }
    };
    //Hash for Mc_BTInCallOptions_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::Mc_BTInCallOptions_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::Mc_BTInCallOptions_Rq_enum& mc_BTInCallOptions_Rq_enum) const {
            return static_cast<int32_t>(mc_BTInCallOptions_Rq_enum);
        }
    };
    //Hash for HUD_BTIncomingCall_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::HUD_BTIncomingCall_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::HUD_BTIncomingCall_Rq_enum& hUD_BTIncomingCall_Rq_enum) const {
            return static_cast<int32_t>(hUD_BTIncomingCall_Rq_enum);
        }
    };
    //Hash for HUD_BTEndTelService_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::HUD_BTEndTelService_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::HUD_BTEndTelService_Rq_enum& hUD_BTEndTelService_Rq_enum) const {
            return static_cast<int32_t>(hUD_BTEndTelService_Rq_enum);
        }
    };
    //Hash for HUD_BTInCallOptions_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::HUD_BTInCallOptions_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::HUD_BTInCallOptions_Rq_enum& hUD_BTInCallOptions_Rq_enum) const {
            return static_cast<int32_t>(hUD_BTInCallOptions_Rq_enum);
        }
    };
    //Hash for HEC_BTEndTelService_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::HEC_BTEndTelService_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::HEC_BTEndTelService_Rq_enum& hEC_BTEndTelService_Rq_enum) const {
            return static_cast<int32_t>(hEC_BTEndTelService_Rq_enum);
        }
    };
    //Hash for HEC_BTIncomingCall_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::bt_connectivity_types::HEC_BTIncomingCall_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::bt_connectivity_types::HEC_BTIncomingCall_Rq_enum& hEC_BTIncomingCall_Rq_enum) const {
            return static_cast<int32_t>(hEC_BTIncomingCall_Rq_enum);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_FORD_bt_connectivity_types_HPP_

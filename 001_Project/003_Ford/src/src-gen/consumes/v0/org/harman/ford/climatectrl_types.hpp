/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_ORG_HARMAN_FORD_climatectrl_types_HPP_
#define V0_ORG_HARMAN_FORD_climatectrl_types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace ford {

struct climatectrl_types {
    
    struct Voice_Blower_Limit_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Request = 1,
            En_No_Request = 0
        };
        
        Voice_Blower_Limit_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Request)) {}
        Voice_Blower_Limit_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Request):
                case static_cast<int32_t>(Literal::En_No_Request):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Voice_Blower_Limit_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Voice_Blower_Limit_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Voice_Blower_Limit_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Voice_Blower_Limit_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Voice_Blower_Limit_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Voice_Blower_Limit_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct EATC_LHS_Units_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fahrenheit = 2,
            En_Celsius = 1,
            En_Off = 0
        };
        
        EATC_LHS_Units_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fahrenheit)) {}
        EATC_LHS_Units_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fahrenheit):
                case static_cast<int32_t>(Literal::En_Celsius):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EATC_LHS_Units_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EATC_LHS_Units_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EATC_LHS_Units_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EATC_LHS_Units_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EATC_LHS_Units_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EATC_LHS_Units_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct RHS_Temp_Display_Digit3_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En__5 = 2,
            En__0 = 1,
            En_OFF = 0
        };
        
        RHS_Temp_Display_Digit3_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En__5)) {}
        RHS_Temp_Display_Digit3_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En__5):
                case static_cast<int32_t>(Literal::En__0):
                case static_cast<int32_t>(Literal::En_OFF):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const RHS_Temp_Display_Digit3_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const RHS_Temp_Display_Digit3_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const RHS_Temp_Display_Digit3_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const RHS_Temp_Display_Digit3_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const RHS_Temp_Display_Digit3_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const RHS_Temp_Display_Digit3_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CC_Fr_Stat_User_Adj_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unused4 = 7,
            En_Unused3 = 6,
            En_Unused2 = 5,
            En_Unused1 = 4,
            En_Fr_Blwr_Spd_Selection = 3,
            En_FRHS_SetPt_Selection = 2,
            En_FLHS_SetPt_Selection = 1,
            En_None = 0
        };
        
        CC_Fr_Stat_User_Adj_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unused4)) {}
        CC_Fr_Stat_User_Adj_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unused4):
                case static_cast<int32_t>(Literal::En_Unused3):
                case static_cast<int32_t>(Literal::En_Unused2):
                case static_cast<int32_t>(Literal::En_Unused1):
                case static_cast<int32_t>(Literal::En_Fr_Blwr_Spd_Selection):
                case static_cast<int32_t>(Literal::En_FRHS_SetPt_Selection):
                case static_cast<int32_t>(Literal::En_FLHS_SetPt_Selection):
                case static_cast<int32_t>(Literal::En_None):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CC_Fr_Stat_User_Adj_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CC_Fr_Stat_User_Adj_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CC_Fr_Stat_User_Adj_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CC_Fr_Stat_User_Adj_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CC_Fr_Stat_User_Adj_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CC_Fr_Stat_User_Adj_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CC_Diagnostics_Active_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Yes = 1,
            En_No = 0
        };
        
        CC_Diagnostics_Active_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Yes)) {}
        CC_Diagnostics_Active_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Yes):
                case static_cast<int32_t>(Literal::En_No):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CC_Diagnostics_Active_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CC_Diagnostics_Active_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CC_Diagnostics_Active_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CC_Diagnostics_Active_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CC_Diagnostics_Active_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CC_Diagnostics_Active_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct LHS_Temp_Display_Digit3_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En__5 = 2,
            En__0 = 1,
            En_OFF = 0
        };
        
        LHS_Temp_Display_Digit3_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En__5)) {}
        LHS_Temp_Display_Digit3_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En__5):
                case static_cast<int32_t>(Literal::En__0):
                case static_cast<int32_t>(Literal::En_OFF):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const LHS_Temp_Display_Digit3_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const LHS_Temp_Display_Digit3_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const LHS_Temp_Display_Digit3_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const LHS_Temp_Display_Digit3_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const LHS_Temp_Display_Digit3_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const LHS_Temp_Display_Digit3_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Front_Blower_Indicate_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Display_Blank = 15,
            En_14_Indicators_On = 14,
            En_13_Indicators_On = 13,
            En_12_Indicators_On = 12,
            En_11_Indicators_On = 11,
            En_10_Indicators_On = 10,
            En_9_Indicators_On = 9,
            En_8_Indicators_On = 8,
            En_7_Indicators_On = 7,
            En_6_Indicators_On = 6,
            En_5_Indicators_On = 5,
            En_4_Indicators_On = 4,
            En_3_Indicators_On = 3,
            En_2_Indicators_On = 2,
            En_1_Indicator_On = 1,
            En_Indicators_Off = 0
        };
        
        Front_Blower_Indicate_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Display_Blank)) {}
        Front_Blower_Indicate_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Display_Blank):
                case static_cast<int32_t>(Literal::En_14_Indicators_On):
                case static_cast<int32_t>(Literal::En_13_Indicators_On):
                case static_cast<int32_t>(Literal::En_12_Indicators_On):
                case static_cast<int32_t>(Literal::En_11_Indicators_On):
                case static_cast<int32_t>(Literal::En_10_Indicators_On):
                case static_cast<int32_t>(Literal::En_9_Indicators_On):
                case static_cast<int32_t>(Literal::En_8_Indicators_On):
                case static_cast<int32_t>(Literal::En_7_Indicators_On):
                case static_cast<int32_t>(Literal::En_6_Indicators_On):
                case static_cast<int32_t>(Literal::En_5_Indicators_On):
                case static_cast<int32_t>(Literal::En_4_Indicators_On):
                case static_cast<int32_t>(Literal::En_3_Indicators_On):
                case static_cast<int32_t>(Literal::En_2_Indicators_On):
                case static_cast<int32_t>(Literal::En_1_Indicator_On):
                case static_cast<int32_t>(Literal::En_Indicators_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Front_Blower_Indicate_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Front_Blower_Indicate_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Front_Blower_Indicate_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Front_Blower_Indicate_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Front_Blower_Indicate_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Front_Blower_Indicate_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct EATC_RHS_Units_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fahrenheit = 2,
            En_Celsius = 1,
            En_Off = 0
        };
        
        EATC_RHS_Units_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fahrenheit)) {}
        EATC_RHS_Units_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fahrenheit):
                case static_cast<int32_t>(Literal::En_Celsius):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EATC_RHS_Units_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EATC_RHS_Units_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EATC_RHS_Units_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EATC_RHS_Units_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EATC_RHS_Units_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EATC_RHS_Units_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct Clmt_Button_Stat2_HS3_struct : CommonAPI::Struct<EATC_LHS_Units_enum, RHS_Temp_Display_Digit3_enum, CC_Fr_Stat_User_Adj_enum, CC_Diagnostics_Active_enum, LHS_Temp_Display_Digit3_enum, Front_Blower_Indicate_enum, EATC_RHS_Units_enum, uint8_t, uint8_t, uint8_t, uint8_t> {
    	
    	Clmt_Button_Stat2_HS3_struct() {
    	}
    	Clmt_Button_Stat2_HS3_struct(const EATC_LHS_Units_enum &_eATC_LHS_Units_enum, const RHS_Temp_Display_Digit3_enum &_rHS_Temp_Display_Digit3_enum, const CC_Fr_Stat_User_Adj_enum &_cC_Fr_Stat_User_Adj_enum, const CC_Diagnostics_Active_enum &_cC_Diagnostics_Active_enum, const LHS_Temp_Display_Digit3_enum &_lHS_Temp_Display_Digit3_enum, const Front_Blower_Indicate_enum &_front_Blower_Indicate_enum, const EATC_RHS_Units_enum &_eATC_RHS_Units_enum, const uint8_t &_LHS_Temp_Display_Digit1, const uint8_t &_LHS_Temp_Display_Digit2, const uint8_t &_RHS_Temp_Display_Digit1, const uint8_t &_RHS_Temp_Display_Digit2)
    	{
    		std::get<0>(values_) = _eATC_LHS_Units_enum;
    		std::get<1>(values_) = _rHS_Temp_Display_Digit3_enum;
    		std::get<2>(values_) = _cC_Fr_Stat_User_Adj_enum;
    		std::get<3>(values_) = _cC_Diagnostics_Active_enum;
    		std::get<4>(values_) = _lHS_Temp_Display_Digit3_enum;
    		std::get<5>(values_) = _front_Blower_Indicate_enum;
    		std::get<6>(values_) = _eATC_RHS_Units_enum;
    		std::get<7>(values_) = _LHS_Temp_Display_Digit1;
    		std::get<8>(values_) = _LHS_Temp_Display_Digit2;
    		std::get<9>(values_) = _RHS_Temp_Display_Digit1;
    		std::get<10>(values_) = _RHS_Temp_Display_Digit2;
    	}
    	inline const EATC_LHS_Units_enum &getEATC_LHS_Units_enum() const { return std::get<0>(values_); }
    	inline void setEATC_LHS_Units_enum(const EATC_LHS_Units_enum &_value) { std::get<0>(values_) = _value; }
    	inline const RHS_Temp_Display_Digit3_enum &getRHS_Temp_Display_Digit3_enum() const { return std::get<1>(values_); }
    	inline void setRHS_Temp_Display_Digit3_enum(const RHS_Temp_Display_Digit3_enum &_value) { std::get<1>(values_) = _value; }
    	inline const CC_Fr_Stat_User_Adj_enum &getCC_Fr_Stat_User_Adj_enum() const { return std::get<2>(values_); }
    	inline void setCC_Fr_Stat_User_Adj_enum(const CC_Fr_Stat_User_Adj_enum &_value) { std::get<2>(values_) = _value; }
    	inline const CC_Diagnostics_Active_enum &getCC_Diagnostics_Active_enum() const { return std::get<3>(values_); }
    	inline void setCC_Diagnostics_Active_enum(const CC_Diagnostics_Active_enum &_value) { std::get<3>(values_) = _value; }
    	inline const LHS_Temp_Display_Digit3_enum &getLHS_Temp_Display_Digit3_enum() const { return std::get<4>(values_); }
    	inline void setLHS_Temp_Display_Digit3_enum(const LHS_Temp_Display_Digit3_enum &_value) { std::get<4>(values_) = _value; }
    	inline const Front_Blower_Indicate_enum &getFront_Blower_Indicate_enum() const { return std::get<5>(values_); }
    	inline void setFront_Blower_Indicate_enum(const Front_Blower_Indicate_enum &_value) { std::get<5>(values_) = _value; }
    	inline const EATC_RHS_Units_enum &getEATC_RHS_Units_enum() const { return std::get<6>(values_); }
    	inline void setEATC_RHS_Units_enum(const EATC_RHS_Units_enum &_value) { std::get<6>(values_) = _value; }
    	inline const uint8_t &getLHS_Temp_Display_Digit1() const { return std::get<7>(values_); }
    	inline void setLHS_Temp_Display_Digit1(const uint8_t &_value) { std::get<7>(values_) = _value; }
    	inline const uint8_t &getLHS_Temp_Display_Digit2() const { return std::get<8>(values_); }
    	inline void setLHS_Temp_Display_Digit2(const uint8_t &_value) { std::get<8>(values_) = _value; }
    	inline const uint8_t &getRHS_Temp_Display_Digit1() const { return std::get<9>(values_); }
    	inline void setRHS_Temp_Display_Digit1(const uint8_t &_value) { std::get<9>(values_) = _value; }
    	inline const uint8_t &getRHS_Temp_Display_Digit2() const { return std::get<10>(values_); }
    	inline void setRHS_Temp_Display_Digit2(const uint8_t &_value) { std::get<10>(values_) = _value; }
    	inline bool operator==(const Clmt_Button_Stat2_HS3_struct& _other) const {
                return (getEATC_LHS_Units_enum() == _other.getEATC_LHS_Units_enum() && getRHS_Temp_Display_Digit3_enum() == _other.getRHS_Temp_Display_Digit3_enum() && getCC_Fr_Stat_User_Adj_enum() == _other.getCC_Fr_Stat_User_Adj_enum() && getCC_Diagnostics_Active_enum() == _other.getCC_Diagnostics_Active_enum() && getLHS_Temp_Display_Digit3_enum() == _other.getLHS_Temp_Display_Digit3_enum() && getFront_Blower_Indicate_enum() == _other.getFront_Blower_Indicate_enum() && getEATC_RHS_Units_enum() == _other.getEATC_RHS_Units_enum() && getLHS_Temp_Display_Digit1() == _other.getLHS_Temp_Display_Digit1() && getLHS_Temp_Display_Digit2() == _other.getLHS_Temp_Display_Digit2() && getRHS_Temp_Display_Digit1() == _other.getRHS_Temp_Display_Digit1() && getRHS_Temp_Display_Digit2() == _other.getRHS_Temp_Display_Digit2());
        }
    	inline bool operator!=(const Clmt_Button_Stat2_HS3_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct LHS_Cond_Seat_Status_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unused = 7,
            En_Level_3_Heating = 6,
            En_Level_2_Heating = 5,
            En_Level_1_Heating = 4,
            En_Level_3_Cooling = 3,
            En_Level_2_Cooling = 2,
            En_Level_1_Cooling = 1,
            En_Off = 0
        };
        
        LHS_Cond_Seat_Status_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unused)) {}
        LHS_Cond_Seat_Status_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unused):
                case static_cast<int32_t>(Literal::En_Level_3_Heating):
                case static_cast<int32_t>(Literal::En_Level_2_Heating):
                case static_cast<int32_t>(Literal::En_Level_1_Heating):
                case static_cast<int32_t>(Literal::En_Level_3_Cooling):
                case static_cast<int32_t>(Literal::En_Level_2_Cooling):
                case static_cast<int32_t>(Literal::En_Level_1_Cooling):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const LHS_Cond_Seat_Status_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const LHS_Cond_Seat_Status_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const LHS_Cond_Seat_Status_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const LHS_Cond_Seat_Status_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const LHS_Cond_Seat_Status_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const LHS_Cond_Seat_Status_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CC_Fr_Btn_User_Adj_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_UFC_Interrupted = 19,
            En_UFC_Complete = 18,
            En_UFC_Active = 17,
            En_Htd_WS_Selection = 16,
            En_FLR_Cnd_St_Selection = 15,
            En_FLH_Cnd_St_Selection = 14,
            En_HSW_Selection = 13,
            En_Dual_Selection = 12,
            En_Rear_Defrost_Selection = 11,
            En_Max_Defrost_Selection = 10,
            En_Defrost_Selection = 9,
            En_Fr_Air_Dist_Selection = 8,
            En_Max_AC_Selection = 7,
            En_Fr_Power_Selection = 6,
            En_Recirc_Selection = 5,
            En_AC_Selection = 4,
            En_Fr_Auto_Selection = 3,
            En_Use_MyTemp_Selection = 2,
            En_Save_MyTemp_Selection = 1,
            En_None = 0
        };
        
        CC_Fr_Btn_User_Adj_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_UFC_Interrupted)) {}
        CC_Fr_Btn_User_Adj_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_UFC_Interrupted):
                case static_cast<int32_t>(Literal::En_UFC_Complete):
                case static_cast<int32_t>(Literal::En_UFC_Active):
                case static_cast<int32_t>(Literal::En_Htd_WS_Selection):
                case static_cast<int32_t>(Literal::En_FLR_Cnd_St_Selection):
                case static_cast<int32_t>(Literal::En_FLH_Cnd_St_Selection):
                case static_cast<int32_t>(Literal::En_HSW_Selection):
                case static_cast<int32_t>(Literal::En_Dual_Selection):
                case static_cast<int32_t>(Literal::En_Rear_Defrost_Selection):
                case static_cast<int32_t>(Literal::En_Max_Defrost_Selection):
                case static_cast<int32_t>(Literal::En_Defrost_Selection):
                case static_cast<int32_t>(Literal::En_Fr_Air_Dist_Selection):
                case static_cast<int32_t>(Literal::En_Max_AC_Selection):
                case static_cast<int32_t>(Literal::En_Fr_Power_Selection):
                case static_cast<int32_t>(Literal::En_Recirc_Selection):
                case static_cast<int32_t>(Literal::En_AC_Selection):
                case static_cast<int32_t>(Literal::En_Fr_Auto_Selection):
                case static_cast<int32_t>(Literal::En_Use_MyTemp_Selection):
                case static_cast<int32_t>(Literal::En_Save_MyTemp_Selection):
                case static_cast<int32_t>(Literal::En_None):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CC_Fr_Btn_User_Adj_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CC_Fr_Btn_User_Adj_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CC_Fr_Btn_User_Adj_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CC_Fr_Btn_User_Adj_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CC_Fr_Btn_User_Adj_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CC_Fr_Btn_User_Adj_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Front_Power_Btn_Stt_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unused = 3,
            En_Disabled = 2,
            En_Active = 1,
            En_Enabled_Inactive = 0
        };
        
        Front_Power_Btn_Stt_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unused)) {}
        Front_Power_Btn_Stt_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unused):
                case static_cast<int32_t>(Literal::En_Disabled):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Enabled_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Front_Power_Btn_Stt_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Front_Power_Btn_Stt_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Front_Power_Btn_Stt_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Front_Power_Btn_Stt_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Front_Power_Btn_Stt_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Front_Power_Btn_Stt_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Front_AUTO_Label_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Full = 3,
            En_Mode = 2,
            En_Blower = 1,
            En_Off = 0
        };
        
        Front_AUTO_Label_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Full)) {}
        Front_AUTO_Label_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Full):
                case static_cast<int32_t>(Literal::En_Mode):
                case static_cast<int32_t>(Literal::En_Blower):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Front_AUTO_Label_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Front_AUTO_Label_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Front_AUTO_Label_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Front_AUTO_Label_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Front_AUTO_Label_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Front_AUTO_Label_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Front_AUTO_Btn_Stt_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unused = 3,
            En_Disabled = 2,
            En_Active = 1,
            En_Enabled_Inactive = 0
        };
        
        Front_AUTO_Btn_Stt_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unused)) {}
        Front_AUTO_Btn_Stt_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unused):
                case static_cast<int32_t>(Literal::En_Disabled):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Enabled_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Front_AUTO_Btn_Stt_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Front_AUTO_Btn_Stt_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Front_AUTO_Btn_Stt_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Front_AUTO_Btn_Stt_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Front_AUTO_Btn_Stt_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Front_AUTO_Btn_Stt_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Floor_Btn_Stt_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unused = 3,
            En_Disabled = 2,
            En_Active = 1,
            En_Enabled_Inactive = 0
        };
        
        Floor_Btn_Stt_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unused)) {}
        Floor_Btn_Stt_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unused):
                case static_cast<int32_t>(Literal::En_Disabled):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Enabled_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Floor_Btn_Stt_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Floor_Btn_Stt_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Floor_Btn_Stt_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Floor_Btn_Stt_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Floor_Btn_Stt_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Floor_Btn_Stt_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct LHS_Cld_Seat_Btn_Stt_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unused = 3,
            En_Disabled = 2,
            En_Active = 1,
            En_Enabled_Inactive = 0
        };
        
        LHS_Cld_Seat_Btn_Stt_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unused)) {}
        LHS_Cld_Seat_Btn_Stt_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unused):
                case static_cast<int32_t>(Literal::En_Disabled):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Enabled_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const LHS_Cld_Seat_Btn_Stt_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const LHS_Cld_Seat_Btn_Stt_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const LHS_Cld_Seat_Btn_Stt_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const LHS_Cld_Seat_Btn_Stt_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const LHS_Cld_Seat_Btn_Stt_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const LHS_Cld_Seat_Btn_Stt_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Htd_Strg_Whl_Status_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Level_3_Heating = 3,
            En_Level_2_Heating = 2,
            En_Level_1_Heating = 1,
            En_Off = 0
        };
        
        Htd_Strg_Whl_Status_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Level_3_Heating)) {}
        Htd_Strg_Whl_Status_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Level_3_Heating):
                case static_cast<int32_t>(Literal::En_Level_2_Heating):
                case static_cast<int32_t>(Literal::En_Level_1_Heating):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Htd_Strg_Whl_Status_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Htd_Strg_Whl_Status_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Htd_Strg_Whl_Status_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Htd_Strg_Whl_Status_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Htd_Strg_Whl_Status_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Htd_Strg_Whl_Status_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Htd_Strg_Whl_Btn_Stt_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unused = 3,
            En_Disabled = 2,
            En_Active = 1,
            En_Enabled_Inactive = 0
        };
        
        Htd_Strg_Whl_Btn_Stt_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unused)) {}
        Htd_Strg_Whl_Btn_Stt_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unused):
                case static_cast<int32_t>(Literal::En_Disabled):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Enabled_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Htd_Strg_Whl_Btn_Stt_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Htd_Strg_Whl_Btn_Stt_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Htd_Strg_Whl_Btn_Stt_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Htd_Strg_Whl_Btn_Stt_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Htd_Strg_Whl_Btn_Stt_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Htd_Strg_Whl_Btn_Stt_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Htd_Frt_Wsh_Btn_Stt_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unused = 3,
            En_Disabled = 2,
            En_Active = 1,
            En_Enabled_Inactive = 0
        };
        
        Htd_Frt_Wsh_Btn_Stt_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unused)) {}
        Htd_Frt_Wsh_Btn_Stt_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unused):
                case static_cast<int32_t>(Literal::En_Disabled):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Enabled_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Htd_Frt_Wsh_Btn_Stt_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Htd_Frt_Wsh_Btn_Stt_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Htd_Frt_Wsh_Btn_Stt_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Htd_Frt_Wsh_Btn_Stt_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Htd_Frt_Wsh_Btn_Stt_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Htd_Frt_Wsh_Btn_Stt_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct My_Temp_Btn_Stt_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unused = 3,
            En_Disabled = 2,
            En_Active = 1,
            En_Enabled_Inactive = 0
        };
        
        My_Temp_Btn_Stt_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unused)) {}
        My_Temp_Btn_Stt_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unused):
                case static_cast<int32_t>(Literal::En_Disabled):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Enabled_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const My_Temp_Btn_Stt_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const My_Temp_Btn_Stt_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const My_Temp_Btn_Stt_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const My_Temp_Btn_Stt_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const My_Temp_Btn_Stt_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const My_Temp_Btn_Stt_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Max_Defrost_Btn_Stt_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unused = 3,
            En_Disabled = 2,
            En_Active = 1,
            En_Enabled_Inactive = 0
        };
        
        Max_Defrost_Btn_Stt_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unused)) {}
        Max_Defrost_Btn_Stt_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unused):
                case static_cast<int32_t>(Literal::En_Disabled):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Enabled_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Max_Defrost_Btn_Stt_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Max_Defrost_Btn_Stt_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Max_Defrost_Btn_Stt_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Max_Defrost_Btn_Stt_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Max_Defrost_Btn_Stt_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Max_Defrost_Btn_Stt_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Max_AC_Btn_Stt_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unused = 3,
            En_Disabled = 2,
            En_Active = 1,
            En_Enabled_Inactive = 0
        };
        
        Max_AC_Btn_Stt_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unused)) {}
        Max_AC_Btn_Stt_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unused):
                case static_cast<int32_t>(Literal::En_Disabled):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Enabled_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Max_AC_Btn_Stt_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Max_AC_Btn_Stt_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Max_AC_Btn_Stt_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Max_AC_Btn_Stt_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Max_AC_Btn_Stt_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Max_AC_Btn_Stt_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct LHS_Htd_Seat_Btn_Stt_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unused = 3,
            En_Disabled = 2,
            En_Active = 1,
            En_Enabled_Inactive = 0
        };
        
        LHS_Htd_Seat_Btn_Stt_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unused)) {}
        LHS_Htd_Seat_Btn_Stt_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unused):
                case static_cast<int32_t>(Literal::En_Disabled):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Enabled_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const LHS_Htd_Seat_Btn_Stt_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const LHS_Htd_Seat_Btn_Stt_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const LHS_Htd_Seat_Btn_Stt_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const LHS_Htd_Seat_Btn_Stt_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const LHS_Htd_Seat_Btn_Stt_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const LHS_Htd_Seat_Btn_Stt_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Recirc_Btn_Stt_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unused = 3,
            En_Disabled = 2,
            En_Active = 1,
            En_Enabled_Inactive = 0
        };
        
        Recirc_Btn_Stt_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unused)) {}
        Recirc_Btn_Stt_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unused):
                case static_cast<int32_t>(Literal::En_Disabled):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Enabled_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Recirc_Btn_Stt_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Recirc_Btn_Stt_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Recirc_Btn_Stt_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Recirc_Btn_Stt_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Recirc_Btn_Stt_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Recirc_Btn_Stt_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Rear_Defrost_Btn_Stt_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unused = 3,
            En_Disabled = 2,
            En_Active = 1,
            En_Enabled_Inactive = 0
        };
        
        Rear_Defrost_Btn_Stt_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unused)) {}
        Rear_Defrost_Btn_Stt_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unused):
                case static_cast<int32_t>(Literal::En_Disabled):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Enabled_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Rear_Defrost_Btn_Stt_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Rear_Defrost_Btn_Stt_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Rear_Defrost_Btn_Stt_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Rear_Defrost_Btn_Stt_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Rear_Defrost_Btn_Stt_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Rear_Defrost_Btn_Stt_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Panel_Btn_Stt_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unused = 3,
            En_Disabled = 2,
            En_Active = 1,
            En_Enabled_Inactive = 0
        };
        
        Panel_Btn_Stt_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unused)) {}
        Panel_Btn_Stt_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unused):
                case static_cast<int32_t>(Literal::En_Disabled):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Enabled_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Panel_Btn_Stt_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Panel_Btn_Stt_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Panel_Btn_Stt_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Panel_Btn_Stt_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Panel_Btn_Stt_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Panel_Btn_Stt_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Outside_Btn_Stt_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unused = 3,
            En_Disabled = 2,
            En_Active = 1,
            En_Enabled_Inactive = 0
        };
        
        Outside_Btn_Stt_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unused)) {}
        Outside_Btn_Stt_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unused):
                case static_cast<int32_t>(Literal::En_Disabled):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Enabled_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Outside_Btn_Stt_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Outside_Btn_Stt_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Outside_Btn_Stt_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Outside_Btn_Stt_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Outside_Btn_Stt_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Outside_Btn_Stt_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Windscreen_Btn_Stt_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unused = 3,
            En_Disabled = 2,
            En_Active = 1,
            En_Enabled_Inactive = 0
        };
        
        Windscreen_Btn_Stt_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unused)) {}
        Windscreen_Btn_Stt_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unused):
                case static_cast<int32_t>(Literal::En_Disabled):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Enabled_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Windscreen_Btn_Stt_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Windscreen_Btn_Stt_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Windscreen_Btn_Stt_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Windscreen_Btn_Stt_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Windscreen_Btn_Stt_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Windscreen_Btn_Stt_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct RHS_Htd_Seat_Btn_Stt_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unused = 3,
            En_Disabled = 2,
            En_Active = 1,
            En_Enabled_Inactive = 0
        };
        
        RHS_Htd_Seat_Btn_Stt_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unused)) {}
        RHS_Htd_Seat_Btn_Stt_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unused):
                case static_cast<int32_t>(Literal::En_Disabled):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Enabled_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const RHS_Htd_Seat_Btn_Stt_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const RHS_Htd_Seat_Btn_Stt_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const RHS_Htd_Seat_Btn_Stt_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const RHS_Htd_Seat_Btn_Stt_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const RHS_Htd_Seat_Btn_Stt_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const RHS_Htd_Seat_Btn_Stt_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct RHS_Cld_Seat_Btn_Stt_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unused = 3,
            En_Disabled = 2,
            En_Active = 1,
            En_Enabled_Inactive = 0
        };
        
        RHS_Cld_Seat_Btn_Stt_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unused)) {}
        RHS_Cld_Seat_Btn_Stt_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unused):
                case static_cast<int32_t>(Literal::En_Disabled):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Enabled_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const RHS_Cld_Seat_Btn_Stt_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const RHS_Cld_Seat_Btn_Stt_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const RHS_Cld_Seat_Btn_Stt_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const RHS_Cld_Seat_Btn_Stt_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const RHS_Cld_Seat_Btn_Stt_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const RHS_Cld_Seat_Btn_Stt_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Front_AUTO_Blwr_Lvl_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_High = 3,
            En_Medium = 2,
            En_Low = 1,
            En_Off = 0
        };
        
        Front_AUTO_Blwr_Lvl_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_High)) {}
        Front_AUTO_Blwr_Lvl_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_High):
                case static_cast<int32_t>(Literal::En_Medium):
                case static_cast<int32_t>(Literal::En_Low):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Front_AUTO_Blwr_Lvl_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Front_AUTO_Blwr_Lvl_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Front_AUTO_Blwr_Lvl_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Front_AUTO_Blwr_Lvl_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Front_AUTO_Blwr_Lvl_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Front_AUTO_Blwr_Lvl_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct RHS_Cond_Seat_Status_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unused = 7,
            En_Level_3_Heating = 6,
            En_Level_2_Heating = 5,
            En_Level_1_Heating = 4,
            En_Level_3_Cooling = 3,
            En_Level_2_Cooling = 2,
            En_Level_1_Cooling = 1,
            En_Off = 0
        };
        
        RHS_Cond_Seat_Status_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unused)) {}
        RHS_Cond_Seat_Status_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unused):
                case static_cast<int32_t>(Literal::En_Level_3_Heating):
                case static_cast<int32_t>(Literal::En_Level_2_Heating):
                case static_cast<int32_t>(Literal::En_Level_1_Heating):
                case static_cast<int32_t>(Literal::En_Level_3_Cooling):
                case static_cast<int32_t>(Literal::En_Level_2_Cooling):
                case static_cast<int32_t>(Literal::En_Level_1_Cooling):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const RHS_Cond_Seat_Status_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const RHS_Cond_Seat_Status_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const RHS_Cond_Seat_Status_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const RHS_Cond_Seat_Status_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const RHS_Cond_Seat_Status_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const RHS_Cond_Seat_Status_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct Clmt_Button_Stat1_HS3_struct : CommonAPI::Struct<LHS_Cond_Seat_Status_enum, CC_Fr_Btn_User_Adj_enum, Front_Power_Btn_Stt_enum, Front_AUTO_Label_enum, Front_AUTO_Btn_Stt_enum, Floor_Btn_Stt_enum, LHS_Cld_Seat_Btn_Stt_enum, Htd_Strg_Whl_Status_enum, Htd_Strg_Whl_Btn_Stt_enum, Htd_Frt_Wsh_Btn_Stt_enum, My_Temp_Btn_Stt_enum, Max_Defrost_Btn_Stt_enum, Max_AC_Btn_Stt_enum, LHS_Htd_Seat_Btn_Stt_enum, Recirc_Btn_Stt_enum, Rear_Defrost_Btn_Stt_enum, Panel_Btn_Stt_enum, Outside_Btn_Stt_enum, Windscreen_Btn_Stt_enum, RHS_Htd_Seat_Btn_Stt_enum, RHS_Cld_Seat_Btn_Stt_enum, Front_AUTO_Blwr_Lvl_enum, RHS_Cond_Seat_Status_enum> {
    	
    	Clmt_Button_Stat1_HS3_struct() {
    	}
    	Clmt_Button_Stat1_HS3_struct(const LHS_Cond_Seat_Status_enum &_lHS_Cond_Seat_Status_enum, const CC_Fr_Btn_User_Adj_enum &_cC_Fr_Btn_User_Adj_enum, const Front_Power_Btn_Stt_enum &_front_Power_Btn_Stt_enum, const Front_AUTO_Label_enum &_front_AUTO_Label_enum, const Front_AUTO_Btn_Stt_enum &_front_AUTO_Btn_Stt_enum, const Floor_Btn_Stt_enum &_floor_Btn_Stt_enum, const LHS_Cld_Seat_Btn_Stt_enum &_lHS_Cld_Seat_Btn_Stt_enum, const Htd_Strg_Whl_Status_enum &_htd_Strg_Whl_Status_enum, const Htd_Strg_Whl_Btn_Stt_enum &_htd_Strg_Whl_Btn_Stt_enum, const Htd_Frt_Wsh_Btn_Stt_enum &_htd_Frt_Wsh_Btn_Stt_enum, const My_Temp_Btn_Stt_enum &_my_Temp_Btn_Stt_enum, const Max_Defrost_Btn_Stt_enum &_max_Defrost_Btn_Stt_enum, const Max_AC_Btn_Stt_enum &_max_AC_Btn_Stt_enum, const LHS_Htd_Seat_Btn_Stt_enum &_lHS_Htd_Seat_Btn_Stt_enum, const Recirc_Btn_Stt_enum &_recirc_Btn_Stt_enum, const Rear_Defrost_Btn_Stt_enum &_rear_Defrost_Btn_Stt_enum, const Panel_Btn_Stt_enum &_panel_Btn_Stt_enum, const Outside_Btn_Stt_enum &_outside_Btn_Stt_enum, const Windscreen_Btn_Stt_enum &_windscreen_Btn_Stt_enum, const RHS_Htd_Seat_Btn_Stt_enum &_rHS_Htd_Seat_Btn_Stt_enum, const RHS_Cld_Seat_Btn_Stt_enum &_rHS_Cld_Seat_Btn_Stt_enum, const Front_AUTO_Blwr_Lvl_enum &_front_AUTO_Blwr_Lvl_enum, const RHS_Cond_Seat_Status_enum &_rHS_Cond_Seat_Status_enum)
    	{
    		std::get<0>(values_) = _lHS_Cond_Seat_Status_enum;
    		std::get<1>(values_) = _cC_Fr_Btn_User_Adj_enum;
    		std::get<2>(values_) = _front_Power_Btn_Stt_enum;
    		std::get<3>(values_) = _front_AUTO_Label_enum;
    		std::get<4>(values_) = _front_AUTO_Btn_Stt_enum;
    		std::get<5>(values_) = _floor_Btn_Stt_enum;
    		std::get<6>(values_) = _lHS_Cld_Seat_Btn_Stt_enum;
    		std::get<7>(values_) = _htd_Strg_Whl_Status_enum;
    		std::get<8>(values_) = _htd_Strg_Whl_Btn_Stt_enum;
    		std::get<9>(values_) = _htd_Frt_Wsh_Btn_Stt_enum;
    		std::get<10>(values_) = _my_Temp_Btn_Stt_enum;
    		std::get<11>(values_) = _max_Defrost_Btn_Stt_enum;
    		std::get<12>(values_) = _max_AC_Btn_Stt_enum;
    		std::get<13>(values_) = _lHS_Htd_Seat_Btn_Stt_enum;
    		std::get<14>(values_) = _recirc_Btn_Stt_enum;
    		std::get<15>(values_) = _rear_Defrost_Btn_Stt_enum;
    		std::get<16>(values_) = _panel_Btn_Stt_enum;
    		std::get<17>(values_) = _outside_Btn_Stt_enum;
    		std::get<18>(values_) = _windscreen_Btn_Stt_enum;
    		std::get<19>(values_) = _rHS_Htd_Seat_Btn_Stt_enum;
    		std::get<20>(values_) = _rHS_Cld_Seat_Btn_Stt_enum;
    		std::get<21>(values_) = _front_AUTO_Blwr_Lvl_enum;
    		std::get<22>(values_) = _rHS_Cond_Seat_Status_enum;
    	}
    	inline const LHS_Cond_Seat_Status_enum &getLHS_Cond_Seat_Status_enum() const { return std::get<0>(values_); }
    	inline void setLHS_Cond_Seat_Status_enum(const LHS_Cond_Seat_Status_enum &_value) { std::get<0>(values_) = _value; }
    	inline const CC_Fr_Btn_User_Adj_enum &getCC_Fr_Btn_User_Adj_enum() const { return std::get<1>(values_); }
    	inline void setCC_Fr_Btn_User_Adj_enum(const CC_Fr_Btn_User_Adj_enum &_value) { std::get<1>(values_) = _value; }
    	inline const Front_Power_Btn_Stt_enum &getFront_Power_Btn_Stt_enum() const { return std::get<2>(values_); }
    	inline void setFront_Power_Btn_Stt_enum(const Front_Power_Btn_Stt_enum &_value) { std::get<2>(values_) = _value; }
    	inline const Front_AUTO_Label_enum &getFront_AUTO_Label_enum() const { return std::get<3>(values_); }
    	inline void setFront_AUTO_Label_enum(const Front_AUTO_Label_enum &_value) { std::get<3>(values_) = _value; }
    	inline const Front_AUTO_Btn_Stt_enum &getFront_AUTO_Btn_Stt_enum() const { return std::get<4>(values_); }
    	inline void setFront_AUTO_Btn_Stt_enum(const Front_AUTO_Btn_Stt_enum &_value) { std::get<4>(values_) = _value; }
    	inline const Floor_Btn_Stt_enum &getFloor_Btn_Stt_enum() const { return std::get<5>(values_); }
    	inline void setFloor_Btn_Stt_enum(const Floor_Btn_Stt_enum &_value) { std::get<5>(values_) = _value; }
    	inline const LHS_Cld_Seat_Btn_Stt_enum &getLHS_Cld_Seat_Btn_Stt_enum() const { return std::get<6>(values_); }
    	inline void setLHS_Cld_Seat_Btn_Stt_enum(const LHS_Cld_Seat_Btn_Stt_enum &_value) { std::get<6>(values_) = _value; }
    	inline const Htd_Strg_Whl_Status_enum &getHtd_Strg_Whl_Status_enum() const { return std::get<7>(values_); }
    	inline void setHtd_Strg_Whl_Status_enum(const Htd_Strg_Whl_Status_enum &_value) { std::get<7>(values_) = _value; }
    	inline const Htd_Strg_Whl_Btn_Stt_enum &getHtd_Strg_Whl_Btn_Stt_enum() const { return std::get<8>(values_); }
    	inline void setHtd_Strg_Whl_Btn_Stt_enum(const Htd_Strg_Whl_Btn_Stt_enum &_value) { std::get<8>(values_) = _value; }
    	inline const Htd_Frt_Wsh_Btn_Stt_enum &getHtd_Frt_Wsh_Btn_Stt_enum() const { return std::get<9>(values_); }
    	inline void setHtd_Frt_Wsh_Btn_Stt_enum(const Htd_Frt_Wsh_Btn_Stt_enum &_value) { std::get<9>(values_) = _value; }
    	inline const My_Temp_Btn_Stt_enum &getMy_Temp_Btn_Stt_enum() const { return std::get<10>(values_); }
    	inline void setMy_Temp_Btn_Stt_enum(const My_Temp_Btn_Stt_enum &_value) { std::get<10>(values_) = _value; }
    	inline const Max_Defrost_Btn_Stt_enum &getMax_Defrost_Btn_Stt_enum() const { return std::get<11>(values_); }
    	inline void setMax_Defrost_Btn_Stt_enum(const Max_Defrost_Btn_Stt_enum &_value) { std::get<11>(values_) = _value; }
    	inline const Max_AC_Btn_Stt_enum &getMax_AC_Btn_Stt_enum() const { return std::get<12>(values_); }
    	inline void setMax_AC_Btn_Stt_enum(const Max_AC_Btn_Stt_enum &_value) { std::get<12>(values_) = _value; }
    	inline const LHS_Htd_Seat_Btn_Stt_enum &getLHS_Htd_Seat_Btn_Stt_enum() const { return std::get<13>(values_); }
    	inline void setLHS_Htd_Seat_Btn_Stt_enum(const LHS_Htd_Seat_Btn_Stt_enum &_value) { std::get<13>(values_) = _value; }
    	inline const Recirc_Btn_Stt_enum &getRecirc_Btn_Stt_enum() const { return std::get<14>(values_); }
    	inline void setRecirc_Btn_Stt_enum(const Recirc_Btn_Stt_enum &_value) { std::get<14>(values_) = _value; }
    	inline const Rear_Defrost_Btn_Stt_enum &getRear_Defrost_Btn_Stt_enum() const { return std::get<15>(values_); }
    	inline void setRear_Defrost_Btn_Stt_enum(const Rear_Defrost_Btn_Stt_enum &_value) { std::get<15>(values_) = _value; }
    	inline const Panel_Btn_Stt_enum &getPanel_Btn_Stt_enum() const { return std::get<16>(values_); }
    	inline void setPanel_Btn_Stt_enum(const Panel_Btn_Stt_enum &_value) { std::get<16>(values_) = _value; }
    	inline const Outside_Btn_Stt_enum &getOutside_Btn_Stt_enum() const { return std::get<17>(values_); }
    	inline void setOutside_Btn_Stt_enum(const Outside_Btn_Stt_enum &_value) { std::get<17>(values_) = _value; }
    	inline const Windscreen_Btn_Stt_enum &getWindscreen_Btn_Stt_enum() const { return std::get<18>(values_); }
    	inline void setWindscreen_Btn_Stt_enum(const Windscreen_Btn_Stt_enum &_value) { std::get<18>(values_) = _value; }
    	inline const RHS_Htd_Seat_Btn_Stt_enum &getRHS_Htd_Seat_Btn_Stt_enum() const { return std::get<19>(values_); }
    	inline void setRHS_Htd_Seat_Btn_Stt_enum(const RHS_Htd_Seat_Btn_Stt_enum &_value) { std::get<19>(values_) = _value; }
    	inline const RHS_Cld_Seat_Btn_Stt_enum &getRHS_Cld_Seat_Btn_Stt_enum() const { return std::get<20>(values_); }
    	inline void setRHS_Cld_Seat_Btn_Stt_enum(const RHS_Cld_Seat_Btn_Stt_enum &_value) { std::get<20>(values_) = _value; }
    	inline const Front_AUTO_Blwr_Lvl_enum &getFront_AUTO_Blwr_Lvl_enum() const { return std::get<21>(values_); }
    	inline void setFront_AUTO_Blwr_Lvl_enum(const Front_AUTO_Blwr_Lvl_enum &_value) { std::get<21>(values_) = _value; }
    	inline const RHS_Cond_Seat_Status_enum &getRHS_Cond_Seat_Status_enum() const { return std::get<22>(values_); }
    	inline void setRHS_Cond_Seat_Status_enum(const RHS_Cond_Seat_Status_enum &_value) { std::get<22>(values_) = _value; }
    	inline bool operator==(const Clmt_Button_Stat1_HS3_struct& _other) const {
                return (getLHS_Cond_Seat_Status_enum() == _other.getLHS_Cond_Seat_Status_enum() && getCC_Fr_Btn_User_Adj_enum() == _other.getCC_Fr_Btn_User_Adj_enum() && getFront_Power_Btn_Stt_enum() == _other.getFront_Power_Btn_Stt_enum() && getFront_AUTO_Label_enum() == _other.getFront_AUTO_Label_enum() && getFront_AUTO_Btn_Stt_enum() == _other.getFront_AUTO_Btn_Stt_enum() && getFloor_Btn_Stt_enum() == _other.getFloor_Btn_Stt_enum() && getLHS_Cld_Seat_Btn_Stt_enum() == _other.getLHS_Cld_Seat_Btn_Stt_enum() && getHtd_Strg_Whl_Status_enum() == _other.getHtd_Strg_Whl_Status_enum() && getHtd_Strg_Whl_Btn_Stt_enum() == _other.getHtd_Strg_Whl_Btn_Stt_enum() && getHtd_Frt_Wsh_Btn_Stt_enum() == _other.getHtd_Frt_Wsh_Btn_Stt_enum() && getMy_Temp_Btn_Stt_enum() == _other.getMy_Temp_Btn_Stt_enum() && getMax_Defrost_Btn_Stt_enum() == _other.getMax_Defrost_Btn_Stt_enum() && getMax_AC_Btn_Stt_enum() == _other.getMax_AC_Btn_Stt_enum() && getLHS_Htd_Seat_Btn_Stt_enum() == _other.getLHS_Htd_Seat_Btn_Stt_enum() && getRecirc_Btn_Stt_enum() == _other.getRecirc_Btn_Stt_enum() && getRear_Defrost_Btn_Stt_enum() == _other.getRear_Defrost_Btn_Stt_enum() && getPanel_Btn_Stt_enum() == _other.getPanel_Btn_Stt_enum() && getOutside_Btn_Stt_enum() == _other.getOutside_Btn_Stt_enum() && getWindscreen_Btn_Stt_enum() == _other.getWindscreen_Btn_Stt_enum() && getRHS_Htd_Seat_Btn_Stt_enum() == _other.getRHS_Htd_Seat_Btn_Stt_enum() && getRHS_Cld_Seat_Btn_Stt_enum() == _other.getRHS_Cld_Seat_Btn_Stt_enum() && getFront_AUTO_Blwr_Lvl_enum() == _other.getFront_AUTO_Blwr_Lvl_enum() && getRHS_Cond_Seat_Status_enum() == _other.getRHS_Cond_Seat_Status_enum());
        }
    	inline bool operator!=(const Clmt_Button_Stat1_HS3_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.harman.ford.climatectrl_types";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct climatectrl_types

} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for Voice_Blower_Limit_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::Voice_Blower_Limit_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::Voice_Blower_Limit_enum& voice_Blower_Limit_enum) const {
            return static_cast<int32_t>(voice_Blower_Limit_enum);
        }
    };
    //Hash for EATC_LHS_Units_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::EATC_LHS_Units_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::EATC_LHS_Units_enum& eATC_LHS_Units_enum) const {
            return static_cast<int32_t>(eATC_LHS_Units_enum);
        }
    };
    //Hash for RHS_Temp_Display_Digit3_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::RHS_Temp_Display_Digit3_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::RHS_Temp_Display_Digit3_enum& rHS_Temp_Display_Digit3_enum) const {
            return static_cast<int32_t>(rHS_Temp_Display_Digit3_enum);
        }
    };
    //Hash for CC_Fr_Stat_User_Adj_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::CC_Fr_Stat_User_Adj_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::CC_Fr_Stat_User_Adj_enum& cC_Fr_Stat_User_Adj_enum) const {
            return static_cast<int32_t>(cC_Fr_Stat_User_Adj_enum);
        }
    };
    //Hash for CC_Diagnostics_Active_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::CC_Diagnostics_Active_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::CC_Diagnostics_Active_enum& cC_Diagnostics_Active_enum) const {
            return static_cast<int32_t>(cC_Diagnostics_Active_enum);
        }
    };
    //Hash for LHS_Temp_Display_Digit3_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::LHS_Temp_Display_Digit3_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::LHS_Temp_Display_Digit3_enum& lHS_Temp_Display_Digit3_enum) const {
            return static_cast<int32_t>(lHS_Temp_Display_Digit3_enum);
        }
    };
    //Hash for Front_Blower_Indicate_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::Front_Blower_Indicate_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::Front_Blower_Indicate_enum& front_Blower_Indicate_enum) const {
            return static_cast<int32_t>(front_Blower_Indicate_enum);
        }
    };
    //Hash for EATC_RHS_Units_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::EATC_RHS_Units_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::EATC_RHS_Units_enum& eATC_RHS_Units_enum) const {
            return static_cast<int32_t>(eATC_RHS_Units_enum);
        }
    };
    //Hash for LHS_Cond_Seat_Status_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::LHS_Cond_Seat_Status_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::LHS_Cond_Seat_Status_enum& lHS_Cond_Seat_Status_enum) const {
            return static_cast<int32_t>(lHS_Cond_Seat_Status_enum);
        }
    };
    //Hash for CC_Fr_Btn_User_Adj_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::CC_Fr_Btn_User_Adj_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::CC_Fr_Btn_User_Adj_enum& cC_Fr_Btn_User_Adj_enum) const {
            return static_cast<int32_t>(cC_Fr_Btn_User_Adj_enum);
        }
    };
    //Hash for Front_Power_Btn_Stt_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::Front_Power_Btn_Stt_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::Front_Power_Btn_Stt_enum& front_Power_Btn_Stt_enum) const {
            return static_cast<int32_t>(front_Power_Btn_Stt_enum);
        }
    };
    //Hash for Front_AUTO_Label_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::Front_AUTO_Label_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::Front_AUTO_Label_enum& front_AUTO_Label_enum) const {
            return static_cast<int32_t>(front_AUTO_Label_enum);
        }
    };
    //Hash for Front_AUTO_Btn_Stt_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::Front_AUTO_Btn_Stt_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::Front_AUTO_Btn_Stt_enum& front_AUTO_Btn_Stt_enum) const {
            return static_cast<int32_t>(front_AUTO_Btn_Stt_enum);
        }
    };
    //Hash for Floor_Btn_Stt_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::Floor_Btn_Stt_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::Floor_Btn_Stt_enum& floor_Btn_Stt_enum) const {
            return static_cast<int32_t>(floor_Btn_Stt_enum);
        }
    };
    //Hash for LHS_Cld_Seat_Btn_Stt_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::LHS_Cld_Seat_Btn_Stt_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::LHS_Cld_Seat_Btn_Stt_enum& lHS_Cld_Seat_Btn_Stt_enum) const {
            return static_cast<int32_t>(lHS_Cld_Seat_Btn_Stt_enum);
        }
    };
    //Hash for Htd_Strg_Whl_Status_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::Htd_Strg_Whl_Status_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::Htd_Strg_Whl_Status_enum& htd_Strg_Whl_Status_enum) const {
            return static_cast<int32_t>(htd_Strg_Whl_Status_enum);
        }
    };
    //Hash for Htd_Strg_Whl_Btn_Stt_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::Htd_Strg_Whl_Btn_Stt_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::Htd_Strg_Whl_Btn_Stt_enum& htd_Strg_Whl_Btn_Stt_enum) const {
            return static_cast<int32_t>(htd_Strg_Whl_Btn_Stt_enum);
        }
    };
    //Hash for Htd_Frt_Wsh_Btn_Stt_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::Htd_Frt_Wsh_Btn_Stt_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::Htd_Frt_Wsh_Btn_Stt_enum& htd_Frt_Wsh_Btn_Stt_enum) const {
            return static_cast<int32_t>(htd_Frt_Wsh_Btn_Stt_enum);
        }
    };
    //Hash for My_Temp_Btn_Stt_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::My_Temp_Btn_Stt_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::My_Temp_Btn_Stt_enum& my_Temp_Btn_Stt_enum) const {
            return static_cast<int32_t>(my_Temp_Btn_Stt_enum);
        }
    };
    //Hash for Max_Defrost_Btn_Stt_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::Max_Defrost_Btn_Stt_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::Max_Defrost_Btn_Stt_enum& max_Defrost_Btn_Stt_enum) const {
            return static_cast<int32_t>(max_Defrost_Btn_Stt_enum);
        }
    };
    //Hash for Max_AC_Btn_Stt_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::Max_AC_Btn_Stt_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::Max_AC_Btn_Stt_enum& max_AC_Btn_Stt_enum) const {
            return static_cast<int32_t>(max_AC_Btn_Stt_enum);
        }
    };
    //Hash for LHS_Htd_Seat_Btn_Stt_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::LHS_Htd_Seat_Btn_Stt_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::LHS_Htd_Seat_Btn_Stt_enum& lHS_Htd_Seat_Btn_Stt_enum) const {
            return static_cast<int32_t>(lHS_Htd_Seat_Btn_Stt_enum);
        }
    };
    //Hash for Recirc_Btn_Stt_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::Recirc_Btn_Stt_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::Recirc_Btn_Stt_enum& recirc_Btn_Stt_enum) const {
            return static_cast<int32_t>(recirc_Btn_Stt_enum);
        }
    };
    //Hash for Rear_Defrost_Btn_Stt_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::Rear_Defrost_Btn_Stt_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::Rear_Defrost_Btn_Stt_enum& rear_Defrost_Btn_Stt_enum) const {
            return static_cast<int32_t>(rear_Defrost_Btn_Stt_enum);
        }
    };
    //Hash for Panel_Btn_Stt_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::Panel_Btn_Stt_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::Panel_Btn_Stt_enum& panel_Btn_Stt_enum) const {
            return static_cast<int32_t>(panel_Btn_Stt_enum);
        }
    };
    //Hash for Outside_Btn_Stt_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::Outside_Btn_Stt_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::Outside_Btn_Stt_enum& outside_Btn_Stt_enum) const {
            return static_cast<int32_t>(outside_Btn_Stt_enum);
        }
    };
    //Hash for Windscreen_Btn_Stt_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::Windscreen_Btn_Stt_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::Windscreen_Btn_Stt_enum& windscreen_Btn_Stt_enum) const {
            return static_cast<int32_t>(windscreen_Btn_Stt_enum);
        }
    };
    //Hash for RHS_Htd_Seat_Btn_Stt_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::RHS_Htd_Seat_Btn_Stt_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::RHS_Htd_Seat_Btn_Stt_enum& rHS_Htd_Seat_Btn_Stt_enum) const {
            return static_cast<int32_t>(rHS_Htd_Seat_Btn_Stt_enum);
        }
    };
    //Hash for RHS_Cld_Seat_Btn_Stt_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::RHS_Cld_Seat_Btn_Stt_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::RHS_Cld_Seat_Btn_Stt_enum& rHS_Cld_Seat_Btn_Stt_enum) const {
            return static_cast<int32_t>(rHS_Cld_Seat_Btn_Stt_enum);
        }
    };
    //Hash for Front_AUTO_Blwr_Lvl_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::Front_AUTO_Blwr_Lvl_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::Front_AUTO_Blwr_Lvl_enum& front_AUTO_Blwr_Lvl_enum) const {
            return static_cast<int32_t>(front_AUTO_Blwr_Lvl_enum);
        }
    };
    //Hash for RHS_Cond_Seat_Status_enum
    template<>
    struct hash<::v0::org::harman::ford::climatectrl_types::RHS_Cond_Seat_Status_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::climatectrl_types::RHS_Cond_Seat_Status_enum& rHS_Cond_Seat_Status_enum) const {
            return static_cast<int32_t>(rHS_Cond_Seat_Status_enum);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_FORD_climatectrl_types_HPP_

/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_ORG_HARMAN_FORD_langdata_types_HPP_
#define V0_ORG_HARMAN_FORD_langdata_types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace ford {

struct langdata_types {
    
    struct Dsp_LangUpdate_Rsp_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Language_Not_Supported = 2,
            En_Language_Updated = 1,
            En_Inactive = 0
        };
        
        Dsp_LangUpdate_Rsp_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Language_Not_Supported)) {}
        Dsp_LangUpdate_Rsp_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Language_Not_Supported):
                case static_cast<int32_t>(Literal::En_Language_Updated):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Dsp_LangUpdate_Rsp_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Dsp_LangUpdate_Rsp_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Dsp_LangUpdate_Rsp_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Dsp_LangUpdate_Rsp_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Dsp_LangUpdate_Rsp_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Dsp_LangUpdate_Rsp_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct LangUpdate_Rsp_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Language_Not_Supported = 2,
            En_Language_Updated = 1,
            En_Inactive = 0
        };
        
        LangUpdate_Rsp_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Language_Not_Supported)) {}
        LangUpdate_Rsp_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Language_Not_Supported):
                case static_cast<int32_t>(Literal::En_Language_Updated):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const LangUpdate_Rsp_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const LangUpdate_Rsp_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const LangUpdate_Rsp_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const LangUpdate_Rsp_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const LangUpdate_Rsp_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const LangUpdate_Rsp_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Disp_LangSel_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Thai = 31,
            En_Slovak = 30,
            En_Arabic = 29,
            En_Taiwanese = 28,
            En_Mandarin_Chinese = 27,
            En_Korean = 26,
            En_AU_English = 25,
            En_Japanese = 24,
            En_Braz_Portuguese = 23,
            En_EU_Portuguese = 22,
            En_Finish = 21,
            En_Norwegian = 20,
            En_Danish = 19,
            En_Swedish = 18,
            En_Hungarian = 17,
            En_Greek = 16,
            En_Czech = 15,
            En_Polish = 14,
            En_Flemish = 13,
            En_Dutch = 12,
            En_Russian = 11,
            En_Turkish = 10,
            En_Mex_Spanish = 9,
            En_EU_Spanish = 8,
            En_Cana_French = 7,
            En_EU_French = 6,
            En_Italian = 5,
            En_German = 4,
            En_NA_English = 3,
            En_UK_English = 2,
            En_Unknown = 1,
            En_Invalid = 0
        };
        
        Disp_LangSel_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Thai)) {}
        Disp_LangSel_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Thai):
                case static_cast<int32_t>(Literal::En_Slovak):
                case static_cast<int32_t>(Literal::En_Arabic):
                case static_cast<int32_t>(Literal::En_Taiwanese):
                case static_cast<int32_t>(Literal::En_Mandarin_Chinese):
                case static_cast<int32_t>(Literal::En_Korean):
                case static_cast<int32_t>(Literal::En_AU_English):
                case static_cast<int32_t>(Literal::En_Japanese):
                case static_cast<int32_t>(Literal::En_Braz_Portuguese):
                case static_cast<int32_t>(Literal::En_EU_Portuguese):
                case static_cast<int32_t>(Literal::En_Finish):
                case static_cast<int32_t>(Literal::En_Norwegian):
                case static_cast<int32_t>(Literal::En_Danish):
                case static_cast<int32_t>(Literal::En_Swedish):
                case static_cast<int32_t>(Literal::En_Hungarian):
                case static_cast<int32_t>(Literal::En_Greek):
                case static_cast<int32_t>(Literal::En_Czech):
                case static_cast<int32_t>(Literal::En_Polish):
                case static_cast<int32_t>(Literal::En_Flemish):
                case static_cast<int32_t>(Literal::En_Dutch):
                case static_cast<int32_t>(Literal::En_Russian):
                case static_cast<int32_t>(Literal::En_Turkish):
                case static_cast<int32_t>(Literal::En_Mex_Spanish):
                case static_cast<int32_t>(Literal::En_EU_Spanish):
                case static_cast<int32_t>(Literal::En_Cana_French):
                case static_cast<int32_t>(Literal::En_EU_French):
                case static_cast<int32_t>(Literal::En_Italian):
                case static_cast<int32_t>(Literal::En_German):
                case static_cast<int32_t>(Literal::En_NA_English):
                case static_cast<int32_t>(Literal::En_UK_English):
                case static_cast<int32_t>(Literal::En_Unknown):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Disp_LangSel_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Disp_LangSel_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Disp_LangSel_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Disp_LangSel_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Disp_LangSel_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Disp_LangSel_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Disp_LangSel2_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed_95 = 127,
            En_NotUsed_94 = 126,
            En_NotUsed_93 = 125,
            En_NotUsed_92 = 124,
            En_NotUsed_91 = 123,
            En_NotUsed_90 = 122,
            En_NotUsed_89 = 121,
            En_NotUsed_88 = 120,
            En_NotUsed_87 = 119,
            En_NotUsed_86 = 118,
            En_NotUsed_85 = 117,
            En_NotUsed_84 = 116,
            En_NotUsed_83 = 115,
            En_NotUsed_82 = 114,
            En_NotUsed_81 = 113,
            En_NotUsed_80 = 112,
            En_NotUsed_79 = 111,
            En_NotUsed_78 = 110,
            En_NotUsed_77 = 109,
            En_NotUsed_76 = 108,
            En_NotUsed_75 = 107,
            En_NotUsed_74 = 106,
            En_NotUsed_73 = 105,
            En_NotUsed_72 = 104,
            En_NotUsed_71 = 103,
            En_NotUsed_70 = 102,
            En_NotUsed_69 = 101,
            En_NotUsed_68 = 100,
            En_NotUsed_67 = 99,
            En_NotUsed_66 = 98,
            En_NotUsed_65 = 97,
            En_NotUsed_64 = 96,
            En_NotUsed_63 = 95,
            En_NotUsed_62 = 94,
            En_NotUsed_61 = 93,
            En_NotUsed_60 = 92,
            En_NotUsed_59 = 91,
            En_NotUsed_58 = 90,
            En_NotUsed_57 = 89,
            En_NotUsed_56 = 88,
            En_NotUsed_55 = 87,
            En_NotUsed_54 = 86,
            En_NotUsed_53 = 85,
            En_NotUsed_52 = 84,
            En_NotUsed_51 = 83,
            En_NotUsed_50 = 82,
            En_NotUsed_49 = 81,
            En_NotUsed_48 = 80,
            En_NotUsed_47 = 79,
            En_NotUsed_46 = 78,
            En_NotUsed_45 = 77,
            En_NotUsed_44 = 76,
            En_NotUsed_43 = 75,
            En_NotUsed_42 = 74,
            En_NotUsed_41 = 73,
            En_NotUsed_40 = 72,
            En_NotUsed_39 = 71,
            En_NotUsed_38 = 70,
            En_NotUsed_37 = 69,
            En_NotUsed_36 = 68,
            En_NotUsed_35 = 67,
            En_NotUsed_34 = 66,
            En_NotUsed_33 = 65,
            En_NotUsed_32 = 64,
            En_NotUsed_31 = 63,
            En_NotUsed_30 = 62,
            En_NotUsed_29 = 61,
            En_NotUsed_28 = 60,
            En_NotUsed_27 = 59,
            En_NotUsed_26 = 58,
            En_NotUsed_25 = 57,
            En_NotUsed_24 = 56,
            En_NotUsed_23 = 55,
            En_NotUsed_22 = 54,
            En_NotUsed_21 = 53,
            En_NotUsed_20 = 52,
            En_NotUsed_19 = 51,
            En_NotUsed_18 = 50,
            En_NotUsed_17 = 49,
            En_NotUsed_16 = 48,
            En_NotUsed_15 = 47,
            En_NotUsed_14 = 46,
            En_NotUsed_13 = 45,
            En_NotUsed_12 = 44,
            En_NotUsed_11 = 43,
            En_NotUsed_10 = 42,
            En_NotUsed_9 = 41,
            En_NotUsed_8 = 40,
            En_NotUsed_7 = 39,
            En_NotUsed_6 = 38,
            En_NotUsed_5 = 37,
            En_NotUsed_4 = 36,
            En_NotUsed_3 = 35,
            En_NotUsed_2 = 34,
            En_NotUsed_1 = 33,
            En_Indian_English = 32,
            En_Thai = 31,
            En_Slovak = 30,
            En_Arabic = 29,
            En_Taiwanese = 28,
            En_Mandarin_Chinese = 27,
            En_Korean = 26,
            En_AU_English = 25,
            En_Japanese = 24,
            En_Braz_Portuguese = 23,
            En_EU_Portuguese = 22,
            En_Finish = 21,
            En_Norwegian = 20,
            En_Danish = 19,
            En_Swedish = 18,
            En_Hungarian = 17,
            En_Greek = 16,
            En_Czech = 15,
            En_Polish = 14,
            En_Flemish = 13,
            En_Dutch = 12,
            En_Russian = 11,
            En_Turkish = 10,
            En_Mex_Spanish = 9,
            En_EU_Spanish = 8,
            En_Cana_French = 7,
            En_EU_French = 6,
            En_Italian = 5,
            En_German = 4,
            En_NA_English = 3,
            En_UK_English = 2,
            En_Unknown = 1,
            En_Invalid = 0
        };
        
        Disp_LangSel2_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed_95)) {}
        Disp_LangSel2_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed_95):
                case static_cast<int32_t>(Literal::En_NotUsed_94):
                case static_cast<int32_t>(Literal::En_NotUsed_93):
                case static_cast<int32_t>(Literal::En_NotUsed_92):
                case static_cast<int32_t>(Literal::En_NotUsed_91):
                case static_cast<int32_t>(Literal::En_NotUsed_90):
                case static_cast<int32_t>(Literal::En_NotUsed_89):
                case static_cast<int32_t>(Literal::En_NotUsed_88):
                case static_cast<int32_t>(Literal::En_NotUsed_87):
                case static_cast<int32_t>(Literal::En_NotUsed_86):
                case static_cast<int32_t>(Literal::En_NotUsed_85):
                case static_cast<int32_t>(Literal::En_NotUsed_84):
                case static_cast<int32_t>(Literal::En_NotUsed_83):
                case static_cast<int32_t>(Literal::En_NotUsed_82):
                case static_cast<int32_t>(Literal::En_NotUsed_81):
                case static_cast<int32_t>(Literal::En_NotUsed_80):
                case static_cast<int32_t>(Literal::En_NotUsed_79):
                case static_cast<int32_t>(Literal::En_NotUsed_78):
                case static_cast<int32_t>(Literal::En_NotUsed_77):
                case static_cast<int32_t>(Literal::En_NotUsed_76):
                case static_cast<int32_t>(Literal::En_NotUsed_75):
                case static_cast<int32_t>(Literal::En_NotUsed_74):
                case static_cast<int32_t>(Literal::En_NotUsed_73):
                case static_cast<int32_t>(Literal::En_NotUsed_72):
                case static_cast<int32_t>(Literal::En_NotUsed_71):
                case static_cast<int32_t>(Literal::En_NotUsed_70):
                case static_cast<int32_t>(Literal::En_NotUsed_69):
                case static_cast<int32_t>(Literal::En_NotUsed_68):
                case static_cast<int32_t>(Literal::En_NotUsed_67):
                case static_cast<int32_t>(Literal::En_NotUsed_66):
                case static_cast<int32_t>(Literal::En_NotUsed_65):
                case static_cast<int32_t>(Literal::En_NotUsed_64):
                case static_cast<int32_t>(Literal::En_NotUsed_63):
                case static_cast<int32_t>(Literal::En_NotUsed_62):
                case static_cast<int32_t>(Literal::En_NotUsed_61):
                case static_cast<int32_t>(Literal::En_NotUsed_60):
                case static_cast<int32_t>(Literal::En_NotUsed_59):
                case static_cast<int32_t>(Literal::En_NotUsed_58):
                case static_cast<int32_t>(Literal::En_NotUsed_57):
                case static_cast<int32_t>(Literal::En_NotUsed_56):
                case static_cast<int32_t>(Literal::En_NotUsed_55):
                case static_cast<int32_t>(Literal::En_NotUsed_54):
                case static_cast<int32_t>(Literal::En_NotUsed_53):
                case static_cast<int32_t>(Literal::En_NotUsed_52):
                case static_cast<int32_t>(Literal::En_NotUsed_51):
                case static_cast<int32_t>(Literal::En_NotUsed_50):
                case static_cast<int32_t>(Literal::En_NotUsed_49):
                case static_cast<int32_t>(Literal::En_NotUsed_48):
                case static_cast<int32_t>(Literal::En_NotUsed_47):
                case static_cast<int32_t>(Literal::En_NotUsed_46):
                case static_cast<int32_t>(Literal::En_NotUsed_45):
                case static_cast<int32_t>(Literal::En_NotUsed_44):
                case static_cast<int32_t>(Literal::En_NotUsed_43):
                case static_cast<int32_t>(Literal::En_NotUsed_42):
                case static_cast<int32_t>(Literal::En_NotUsed_41):
                case static_cast<int32_t>(Literal::En_NotUsed_40):
                case static_cast<int32_t>(Literal::En_NotUsed_39):
                case static_cast<int32_t>(Literal::En_NotUsed_38):
                case static_cast<int32_t>(Literal::En_NotUsed_37):
                case static_cast<int32_t>(Literal::En_NotUsed_36):
                case static_cast<int32_t>(Literal::En_NotUsed_35):
                case static_cast<int32_t>(Literal::En_NotUsed_34):
                case static_cast<int32_t>(Literal::En_NotUsed_33):
                case static_cast<int32_t>(Literal::En_NotUsed_32):
                case static_cast<int32_t>(Literal::En_NotUsed_31):
                case static_cast<int32_t>(Literal::En_NotUsed_30):
                case static_cast<int32_t>(Literal::En_NotUsed_29):
                case static_cast<int32_t>(Literal::En_NotUsed_28):
                case static_cast<int32_t>(Literal::En_NotUsed_27):
                case static_cast<int32_t>(Literal::En_NotUsed_26):
                case static_cast<int32_t>(Literal::En_NotUsed_25):
                case static_cast<int32_t>(Literal::En_NotUsed_24):
                case static_cast<int32_t>(Literal::En_NotUsed_23):
                case static_cast<int32_t>(Literal::En_NotUsed_22):
                case static_cast<int32_t>(Literal::En_NotUsed_21):
                case static_cast<int32_t>(Literal::En_NotUsed_20):
                case static_cast<int32_t>(Literal::En_NotUsed_19):
                case static_cast<int32_t>(Literal::En_NotUsed_18):
                case static_cast<int32_t>(Literal::En_NotUsed_17):
                case static_cast<int32_t>(Literal::En_NotUsed_16):
                case static_cast<int32_t>(Literal::En_NotUsed_15):
                case static_cast<int32_t>(Literal::En_NotUsed_14):
                case static_cast<int32_t>(Literal::En_NotUsed_13):
                case static_cast<int32_t>(Literal::En_NotUsed_12):
                case static_cast<int32_t>(Literal::En_NotUsed_11):
                case static_cast<int32_t>(Literal::En_NotUsed_10):
                case static_cast<int32_t>(Literal::En_NotUsed_9):
                case static_cast<int32_t>(Literal::En_NotUsed_8):
                case static_cast<int32_t>(Literal::En_NotUsed_7):
                case static_cast<int32_t>(Literal::En_NotUsed_6):
                case static_cast<int32_t>(Literal::En_NotUsed_5):
                case static_cast<int32_t>(Literal::En_NotUsed_4):
                case static_cast<int32_t>(Literal::En_NotUsed_3):
                case static_cast<int32_t>(Literal::En_NotUsed_2):
                case static_cast<int32_t>(Literal::En_NotUsed_1):
                case static_cast<int32_t>(Literal::En_Indian_English):
                case static_cast<int32_t>(Literal::En_Thai):
                case static_cast<int32_t>(Literal::En_Slovak):
                case static_cast<int32_t>(Literal::En_Arabic):
                case static_cast<int32_t>(Literal::En_Taiwanese):
                case static_cast<int32_t>(Literal::En_Mandarin_Chinese):
                case static_cast<int32_t>(Literal::En_Korean):
                case static_cast<int32_t>(Literal::En_AU_English):
                case static_cast<int32_t>(Literal::En_Japanese):
                case static_cast<int32_t>(Literal::En_Braz_Portuguese):
                case static_cast<int32_t>(Literal::En_EU_Portuguese):
                case static_cast<int32_t>(Literal::En_Finish):
                case static_cast<int32_t>(Literal::En_Norwegian):
                case static_cast<int32_t>(Literal::En_Danish):
                case static_cast<int32_t>(Literal::En_Swedish):
                case static_cast<int32_t>(Literal::En_Hungarian):
                case static_cast<int32_t>(Literal::En_Greek):
                case static_cast<int32_t>(Literal::En_Czech):
                case static_cast<int32_t>(Literal::En_Polish):
                case static_cast<int32_t>(Literal::En_Flemish):
                case static_cast<int32_t>(Literal::En_Dutch):
                case static_cast<int32_t>(Literal::En_Russian):
                case static_cast<int32_t>(Literal::En_Turkish):
                case static_cast<int32_t>(Literal::En_Mex_Spanish):
                case static_cast<int32_t>(Literal::En_EU_Spanish):
                case static_cast<int32_t>(Literal::En_Cana_French):
                case static_cast<int32_t>(Literal::En_EU_French):
                case static_cast<int32_t>(Literal::En_Italian):
                case static_cast<int32_t>(Literal::En_German):
                case static_cast<int32_t>(Literal::En_NA_English):
                case static_cast<int32_t>(Literal::En_UK_English):
                case static_cast<int32_t>(Literal::En_Unknown):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Disp_LangSel2_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Disp_LangSel2_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Disp_LangSel2_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Disp_LangSel2_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Disp_LangSel2_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Disp_LangSel2_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Disp_LangSel_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Thai = 31,
            En_Slovak = 30,
            En_Arabic = 29,
            En_Taiwanese = 28,
            En_Mandarin_Chinese = 27,
            En_Korean = 26,
            En_AU_English = 25,
            En_Japanese = 24,
            En_Braz_Portuguese = 23,
            En_EU_Portuguese = 22,
            En_Finish = 21,
            En_Norwegian = 20,
            En_Danish = 19,
            En_Swedish = 18,
            En_Hungarian = 17,
            En_Greek = 16,
            En_Czech = 15,
            En_Polish = 14,
            En_Flemish = 13,
            En_Dutch = 12,
            En_Russian = 11,
            En_Turkish = 10,
            En_Mex_Spanish = 9,
            En_EU_Spanish = 8,
            En_Cana_French = 7,
            En_EU_French = 6,
            En_Italian = 5,
            En_German = 4,
            En_NA_English = 3,
            En_UK_English = 2,
            En_Unknown = 1,
            En_Invalid = 0
        };
        
        Disp_LangSel_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Thai)) {}
        Disp_LangSel_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Thai):
                case static_cast<int32_t>(Literal::En_Slovak):
                case static_cast<int32_t>(Literal::En_Arabic):
                case static_cast<int32_t>(Literal::En_Taiwanese):
                case static_cast<int32_t>(Literal::En_Mandarin_Chinese):
                case static_cast<int32_t>(Literal::En_Korean):
                case static_cast<int32_t>(Literal::En_AU_English):
                case static_cast<int32_t>(Literal::En_Japanese):
                case static_cast<int32_t>(Literal::En_Braz_Portuguese):
                case static_cast<int32_t>(Literal::En_EU_Portuguese):
                case static_cast<int32_t>(Literal::En_Finish):
                case static_cast<int32_t>(Literal::En_Norwegian):
                case static_cast<int32_t>(Literal::En_Danish):
                case static_cast<int32_t>(Literal::En_Swedish):
                case static_cast<int32_t>(Literal::En_Hungarian):
                case static_cast<int32_t>(Literal::En_Greek):
                case static_cast<int32_t>(Literal::En_Czech):
                case static_cast<int32_t>(Literal::En_Polish):
                case static_cast<int32_t>(Literal::En_Flemish):
                case static_cast<int32_t>(Literal::En_Dutch):
                case static_cast<int32_t>(Literal::En_Russian):
                case static_cast<int32_t>(Literal::En_Turkish):
                case static_cast<int32_t>(Literal::En_Mex_Spanish):
                case static_cast<int32_t>(Literal::En_EU_Spanish):
                case static_cast<int32_t>(Literal::En_Cana_French):
                case static_cast<int32_t>(Literal::En_EU_French):
                case static_cast<int32_t>(Literal::En_Italian):
                case static_cast<int32_t>(Literal::En_German):
                case static_cast<int32_t>(Literal::En_NA_English):
                case static_cast<int32_t>(Literal::En_UK_English):
                case static_cast<int32_t>(Literal::En_Unknown):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Disp_LangSel_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Disp_LangSel_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Disp_LangSel_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Disp_LangSel_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Disp_LangSel_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Disp_LangSel_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Disp_LangSel2_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed_95 = 127,
            En_NotUsed_94 = 126,
            En_NotUsed_93 = 125,
            En_NotUsed_92 = 124,
            En_NotUsed_91 = 123,
            En_NotUsed_90 = 122,
            En_NotUsed_89 = 121,
            En_NotUsed_88 = 120,
            En_NotUsed_87 = 119,
            En_NotUsed_86 = 118,
            En_NotUsed_85 = 117,
            En_NotUsed_84 = 116,
            En_NotUsed_83 = 115,
            En_NotUsed_82 = 114,
            En_NotUsed_81 = 113,
            En_NotUsed_80 = 112,
            En_NotUsed_79 = 111,
            En_NotUsed_78 = 110,
            En_NotUsed_77 = 109,
            En_NotUsed_76 = 108,
            En_NotUsed_75 = 107,
            En_NotUsed_74 = 106,
            En_NotUsed_73 = 105,
            En_NotUsed_72 = 104,
            En_NotUsed_71 = 103,
            En_NotUsed_70 = 102,
            En_NotUsed_69 = 101,
            En_NotUsed_68 = 100,
            En_NotUsed_67 = 99,
            En_NotUsed_66 = 98,
            En_NotUsed_65 = 97,
            En_NotUsed_64 = 96,
            En_NotUsed_63 = 95,
            En_NotUsed_62 = 94,
            En_NotUsed_61 = 93,
            En_NotUsed_60 = 92,
            En_NotUsed_59 = 91,
            En_NotUsed_58 = 90,
            En_NotUsed_57 = 89,
            En_NotUsed_56 = 88,
            En_NotUsed_55 = 87,
            En_NotUsed_54 = 86,
            En_NotUsed_53 = 85,
            En_NotUsed_52 = 84,
            En_NotUsed_51 = 83,
            En_NotUsed_50 = 82,
            En_NotUsed_49 = 81,
            En_NotUsed_48 = 80,
            En_NotUsed_47 = 79,
            En_NotUsed_46 = 78,
            En_NotUsed_45 = 77,
            En_NotUsed_44 = 76,
            En_NotUsed_43 = 75,
            En_NotUsed_42 = 74,
            En_NotUsed_41 = 73,
            En_NotUsed_40 = 72,
            En_NotUsed_39 = 71,
            En_NotUsed_38 = 70,
            En_NotUsed_37 = 69,
            En_NotUsed_36 = 68,
            En_NotUsed_35 = 67,
            En_NotUsed_34 = 66,
            En_NotUsed_33 = 65,
            En_NotUsed_32 = 64,
            En_NotUsed_31 = 63,
            En_NotUsed_30 = 62,
            En_NotUsed_29 = 61,
            En_NotUsed_28 = 60,
            En_NotUsed_27 = 59,
            En_NotUsed_26 = 58,
            En_NotUsed_25 = 57,
            En_NotUsed_24 = 56,
            En_NotUsed_23 = 55,
            En_NotUsed_22 = 54,
            En_NotUsed_21 = 53,
            En_NotUsed_20 = 52,
            En_NotUsed_19 = 51,
            En_NotUsed_18 = 50,
            En_NotUsed_17 = 49,
            En_NotUsed_16 = 48,
            En_NotUsed_15 = 47,
            En_NotUsed_14 = 46,
            En_NotUsed_13 = 45,
            En_NotUsed_12 = 44,
            En_NotUsed_11 = 43,
            En_NotUsed_10 = 42,
            En_NotUsed_9 = 41,
            En_NotUsed_8 = 40,
            En_NotUsed_7 = 39,
            En_NotUsed_6 = 38,
            En_NotUsed_5 = 37,
            En_NotUsed_4 = 36,
            En_NotUsed_3 = 35,
            En_NotUsed_2 = 34,
            En_NotUsed_1 = 33,
            En_Indian_English = 32,
            En_Thai = 31,
            En_Slovak = 30,
            En_Arabic = 29,
            En_Taiwanese = 28,
            En_Mandarin_Chinese = 27,
            En_Korean = 26,
            En_AU_English = 25,
            En_Japanese = 24,
            En_Braz_Portuguese = 23,
            En_EU_Portuguese = 22,
            En_Finish = 21,
            En_Norwegian = 20,
            En_Danish = 19,
            En_Swedish = 18,
            En_Hungarian = 17,
            En_Greek = 16,
            En_Czech = 15,
            En_Polish = 14,
            En_Flemish = 13,
            En_Dutch = 12,
            En_Russian = 11,
            En_Turkish = 10,
            En_Mex_Spanish = 9,
            En_EU_Spanish = 8,
            En_Cana_French = 7,
            En_EU_French = 6,
            En_Italian = 5,
            En_German = 4,
            En_NA_English = 3,
            En_UK_English = 2,
            En_Unknown = 1,
            En_Invalid = 0
        };
        
        Disp_LangSel2_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed_95)) {}
        Disp_LangSel2_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed_95):
                case static_cast<int32_t>(Literal::En_NotUsed_94):
                case static_cast<int32_t>(Literal::En_NotUsed_93):
                case static_cast<int32_t>(Literal::En_NotUsed_92):
                case static_cast<int32_t>(Literal::En_NotUsed_91):
                case static_cast<int32_t>(Literal::En_NotUsed_90):
                case static_cast<int32_t>(Literal::En_NotUsed_89):
                case static_cast<int32_t>(Literal::En_NotUsed_88):
                case static_cast<int32_t>(Literal::En_NotUsed_87):
                case static_cast<int32_t>(Literal::En_NotUsed_86):
                case static_cast<int32_t>(Literal::En_NotUsed_85):
                case static_cast<int32_t>(Literal::En_NotUsed_84):
                case static_cast<int32_t>(Literal::En_NotUsed_83):
                case static_cast<int32_t>(Literal::En_NotUsed_82):
                case static_cast<int32_t>(Literal::En_NotUsed_81):
                case static_cast<int32_t>(Literal::En_NotUsed_80):
                case static_cast<int32_t>(Literal::En_NotUsed_79):
                case static_cast<int32_t>(Literal::En_NotUsed_78):
                case static_cast<int32_t>(Literal::En_NotUsed_77):
                case static_cast<int32_t>(Literal::En_NotUsed_76):
                case static_cast<int32_t>(Literal::En_NotUsed_75):
                case static_cast<int32_t>(Literal::En_NotUsed_74):
                case static_cast<int32_t>(Literal::En_NotUsed_73):
                case static_cast<int32_t>(Literal::En_NotUsed_72):
                case static_cast<int32_t>(Literal::En_NotUsed_71):
                case static_cast<int32_t>(Literal::En_NotUsed_70):
                case static_cast<int32_t>(Literal::En_NotUsed_69):
                case static_cast<int32_t>(Literal::En_NotUsed_68):
                case static_cast<int32_t>(Literal::En_NotUsed_67):
                case static_cast<int32_t>(Literal::En_NotUsed_66):
                case static_cast<int32_t>(Literal::En_NotUsed_65):
                case static_cast<int32_t>(Literal::En_NotUsed_64):
                case static_cast<int32_t>(Literal::En_NotUsed_63):
                case static_cast<int32_t>(Literal::En_NotUsed_62):
                case static_cast<int32_t>(Literal::En_NotUsed_61):
                case static_cast<int32_t>(Literal::En_NotUsed_60):
                case static_cast<int32_t>(Literal::En_NotUsed_59):
                case static_cast<int32_t>(Literal::En_NotUsed_58):
                case static_cast<int32_t>(Literal::En_NotUsed_57):
                case static_cast<int32_t>(Literal::En_NotUsed_56):
                case static_cast<int32_t>(Literal::En_NotUsed_55):
                case static_cast<int32_t>(Literal::En_NotUsed_54):
                case static_cast<int32_t>(Literal::En_NotUsed_53):
                case static_cast<int32_t>(Literal::En_NotUsed_52):
                case static_cast<int32_t>(Literal::En_NotUsed_51):
                case static_cast<int32_t>(Literal::En_NotUsed_50):
                case static_cast<int32_t>(Literal::En_NotUsed_49):
                case static_cast<int32_t>(Literal::En_NotUsed_48):
                case static_cast<int32_t>(Literal::En_NotUsed_47):
                case static_cast<int32_t>(Literal::En_NotUsed_46):
                case static_cast<int32_t>(Literal::En_NotUsed_45):
                case static_cast<int32_t>(Literal::En_NotUsed_44):
                case static_cast<int32_t>(Literal::En_NotUsed_43):
                case static_cast<int32_t>(Literal::En_NotUsed_42):
                case static_cast<int32_t>(Literal::En_NotUsed_41):
                case static_cast<int32_t>(Literal::En_NotUsed_40):
                case static_cast<int32_t>(Literal::En_NotUsed_39):
                case static_cast<int32_t>(Literal::En_NotUsed_38):
                case static_cast<int32_t>(Literal::En_NotUsed_37):
                case static_cast<int32_t>(Literal::En_NotUsed_36):
                case static_cast<int32_t>(Literal::En_NotUsed_35):
                case static_cast<int32_t>(Literal::En_NotUsed_34):
                case static_cast<int32_t>(Literal::En_NotUsed_33):
                case static_cast<int32_t>(Literal::En_NotUsed_32):
                case static_cast<int32_t>(Literal::En_NotUsed_31):
                case static_cast<int32_t>(Literal::En_NotUsed_30):
                case static_cast<int32_t>(Literal::En_NotUsed_29):
                case static_cast<int32_t>(Literal::En_NotUsed_28):
                case static_cast<int32_t>(Literal::En_NotUsed_27):
                case static_cast<int32_t>(Literal::En_NotUsed_26):
                case static_cast<int32_t>(Literal::En_NotUsed_25):
                case static_cast<int32_t>(Literal::En_NotUsed_24):
                case static_cast<int32_t>(Literal::En_NotUsed_23):
                case static_cast<int32_t>(Literal::En_NotUsed_22):
                case static_cast<int32_t>(Literal::En_NotUsed_21):
                case static_cast<int32_t>(Literal::En_NotUsed_20):
                case static_cast<int32_t>(Literal::En_NotUsed_19):
                case static_cast<int32_t>(Literal::En_NotUsed_18):
                case static_cast<int32_t>(Literal::En_NotUsed_17):
                case static_cast<int32_t>(Literal::En_NotUsed_16):
                case static_cast<int32_t>(Literal::En_NotUsed_15):
                case static_cast<int32_t>(Literal::En_NotUsed_14):
                case static_cast<int32_t>(Literal::En_NotUsed_13):
                case static_cast<int32_t>(Literal::En_NotUsed_12):
                case static_cast<int32_t>(Literal::En_NotUsed_11):
                case static_cast<int32_t>(Literal::En_NotUsed_10):
                case static_cast<int32_t>(Literal::En_NotUsed_9):
                case static_cast<int32_t>(Literal::En_NotUsed_8):
                case static_cast<int32_t>(Literal::En_NotUsed_7):
                case static_cast<int32_t>(Literal::En_NotUsed_6):
                case static_cast<int32_t>(Literal::En_NotUsed_5):
                case static_cast<int32_t>(Literal::En_NotUsed_4):
                case static_cast<int32_t>(Literal::En_NotUsed_3):
                case static_cast<int32_t>(Literal::En_NotUsed_2):
                case static_cast<int32_t>(Literal::En_NotUsed_1):
                case static_cast<int32_t>(Literal::En_Indian_English):
                case static_cast<int32_t>(Literal::En_Thai):
                case static_cast<int32_t>(Literal::En_Slovak):
                case static_cast<int32_t>(Literal::En_Arabic):
                case static_cast<int32_t>(Literal::En_Taiwanese):
                case static_cast<int32_t>(Literal::En_Mandarin_Chinese):
                case static_cast<int32_t>(Literal::En_Korean):
                case static_cast<int32_t>(Literal::En_AU_English):
                case static_cast<int32_t>(Literal::En_Japanese):
                case static_cast<int32_t>(Literal::En_Braz_Portuguese):
                case static_cast<int32_t>(Literal::En_EU_Portuguese):
                case static_cast<int32_t>(Literal::En_Finish):
                case static_cast<int32_t>(Literal::En_Norwegian):
                case static_cast<int32_t>(Literal::En_Danish):
                case static_cast<int32_t>(Literal::En_Swedish):
                case static_cast<int32_t>(Literal::En_Hungarian):
                case static_cast<int32_t>(Literal::En_Greek):
                case static_cast<int32_t>(Literal::En_Czech):
                case static_cast<int32_t>(Literal::En_Polish):
                case static_cast<int32_t>(Literal::En_Flemish):
                case static_cast<int32_t>(Literal::En_Dutch):
                case static_cast<int32_t>(Literal::En_Russian):
                case static_cast<int32_t>(Literal::En_Turkish):
                case static_cast<int32_t>(Literal::En_Mex_Spanish):
                case static_cast<int32_t>(Literal::En_EU_Spanish):
                case static_cast<int32_t>(Literal::En_Cana_French):
                case static_cast<int32_t>(Literal::En_EU_French):
                case static_cast<int32_t>(Literal::En_Italian):
                case static_cast<int32_t>(Literal::En_German):
                case static_cast<int32_t>(Literal::En_NA_English):
                case static_cast<int32_t>(Literal::En_UK_English):
                case static_cast<int32_t>(Literal::En_Unknown):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Disp_LangSel2_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Disp_LangSel2_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Disp_LangSel2_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Disp_LangSel2_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Disp_LangSel2_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Disp_LangSel2_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct McLangSel2_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed_95 = 127,
            En_NotUsed_94 = 126,
            En_NotUsed_93 = 125,
            En_NotUsed_92 = 124,
            En_NotUsed_91 = 123,
            En_NotUsed_90 = 122,
            En_NotUsed_89 = 121,
            En_NotUsed_88 = 120,
            En_NotUsed_87 = 119,
            En_NotUsed_86 = 118,
            En_NotUsed_85 = 117,
            En_NotUsed_84 = 116,
            En_NotUsed_83 = 115,
            En_NotUsed_82 = 114,
            En_NotUsed_81 = 113,
            En_NotUsed_80 = 112,
            En_NotUsed_79 = 111,
            En_NotUsed_78 = 110,
            En_NotUsed_77 = 109,
            En_NotUsed_76 = 108,
            En_NotUsed_75 = 107,
            En_NotUsed_74 = 106,
            En_NotUsed_73 = 105,
            En_NotUsed_72 = 104,
            En_NotUsed_71 = 103,
            En_NotUsed_70 = 102,
            En_NotUsed_69 = 101,
            En_NotUsed_68 = 100,
            En_NotUsed_67 = 99,
            En_NotUsed_66 = 98,
            En_NotUsed_65 = 97,
            En_NotUsed_64 = 96,
            En_NotUsed_63 = 95,
            En_NotUsed_62 = 94,
            En_NotUsed_61 = 93,
            En_NotUsed_60 = 92,
            En_NotUsed_59 = 91,
            En_NotUsed_58 = 90,
            En_NotUsed_57 = 89,
            En_NotUsed_56 = 88,
            En_NotUsed_55 = 87,
            En_NotUsed_54 = 86,
            En_NotUsed_53 = 85,
            En_NotUsed_52 = 84,
            En_NotUsed_51 = 83,
            En_NotUsed_50 = 82,
            En_NotUsed_49 = 81,
            En_NotUsed_48 = 80,
            En_NotUsed_47 = 79,
            En_NotUsed_46 = 78,
            En_NotUsed_45 = 77,
            En_NotUsed_44 = 76,
            En_NotUsed_43 = 75,
            En_NotUsed_42 = 74,
            En_NotUsed_41 = 73,
            En_NotUsed_40 = 72,
            En_NotUsed_39 = 71,
            En_NotUsed_38 = 70,
            En_NotUsed_37 = 69,
            En_NotUsed_36 = 68,
            En_NotUsed_35 = 67,
            En_NotUsed_34 = 66,
            En_NotUsed_33 = 65,
            En_NotUsed_32 = 64,
            En_NotUsed_31 = 63,
            En_NotUsed_30 = 62,
            En_NotUsed_29 = 61,
            En_NotUsed_28 = 60,
            En_NotUsed_27 = 59,
            En_NotUsed_26 = 58,
            En_NotUsed_25 = 57,
            En_NotUsed_24 = 56,
            En_NotUsed_23 = 55,
            En_NotUsed_22 = 54,
            En_NotUsed_21 = 53,
            En_NotUsed_20 = 52,
            En_NotUsed_19 = 51,
            En_NotUsed_18 = 50,
            En_NotUsed_17 = 49,
            En_NotUsed_16 = 48,
            En_NotUsed_15 = 47,
            En_NotUsed_14 = 46,
            En_NotUsed_13 = 45,
            En_NotUsed_12 = 44,
            En_NotUsed_11 = 43,
            En_NotUsed_10 = 42,
            En_NotUsed_9 = 41,
            En_NotUsed_8 = 40,
            En_NotUsed_7 = 39,
            En_NotUsed_6 = 38,
            En_NotUsed_5 = 37,
            En_NotUsed_4 = 36,
            En_NotUsed_3 = 35,
            En_NotUsed_2 = 34,
            En_NotUsed_1 = 33,
            En_Indian_English = 32,
            En_Thai = 31,
            En_Slovak = 30,
            En_Arabic = 29,
            En_Taiwanese = 28,
            En_Mandarin_Chinese = 27,
            En_Korean = 26,
            En_AU_English = 25,
            En_Japanese = 24,
            En_Braz_Portuguese = 23,
            En_EU_Portuguese = 22,
            En_Finish = 21,
            En_Norwegian = 20,
            En_Danish = 19,
            En_Swedish = 18,
            En_Hungarian = 17,
            En_Greek = 16,
            En_Czech = 15,
            En_Polish = 14,
            En_Flemish = 13,
            En_Dutch = 12,
            En_Russian = 11,
            En_Turkish = 10,
            En_Mex_Spanish = 9,
            En_EU_Spanish = 8,
            En_Cana_French = 7,
            En_EU_French = 6,
            En_Italian = 5,
            En_German = 4,
            En_NA_English = 3,
            En_UK_English = 2,
            En_Unknown = 1,
            En_Invalid = 0
        };
        
        McLangSel2_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed_95)) {}
        McLangSel2_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed_95):
                case static_cast<int32_t>(Literal::En_NotUsed_94):
                case static_cast<int32_t>(Literal::En_NotUsed_93):
                case static_cast<int32_t>(Literal::En_NotUsed_92):
                case static_cast<int32_t>(Literal::En_NotUsed_91):
                case static_cast<int32_t>(Literal::En_NotUsed_90):
                case static_cast<int32_t>(Literal::En_NotUsed_89):
                case static_cast<int32_t>(Literal::En_NotUsed_88):
                case static_cast<int32_t>(Literal::En_NotUsed_87):
                case static_cast<int32_t>(Literal::En_NotUsed_86):
                case static_cast<int32_t>(Literal::En_NotUsed_85):
                case static_cast<int32_t>(Literal::En_NotUsed_84):
                case static_cast<int32_t>(Literal::En_NotUsed_83):
                case static_cast<int32_t>(Literal::En_NotUsed_82):
                case static_cast<int32_t>(Literal::En_NotUsed_81):
                case static_cast<int32_t>(Literal::En_NotUsed_80):
                case static_cast<int32_t>(Literal::En_NotUsed_79):
                case static_cast<int32_t>(Literal::En_NotUsed_78):
                case static_cast<int32_t>(Literal::En_NotUsed_77):
                case static_cast<int32_t>(Literal::En_NotUsed_76):
                case static_cast<int32_t>(Literal::En_NotUsed_75):
                case static_cast<int32_t>(Literal::En_NotUsed_74):
                case static_cast<int32_t>(Literal::En_NotUsed_73):
                case static_cast<int32_t>(Literal::En_NotUsed_72):
                case static_cast<int32_t>(Literal::En_NotUsed_71):
                case static_cast<int32_t>(Literal::En_NotUsed_70):
                case static_cast<int32_t>(Literal::En_NotUsed_69):
                case static_cast<int32_t>(Literal::En_NotUsed_68):
                case static_cast<int32_t>(Literal::En_NotUsed_67):
                case static_cast<int32_t>(Literal::En_NotUsed_66):
                case static_cast<int32_t>(Literal::En_NotUsed_65):
                case static_cast<int32_t>(Literal::En_NotUsed_64):
                case static_cast<int32_t>(Literal::En_NotUsed_63):
                case static_cast<int32_t>(Literal::En_NotUsed_62):
                case static_cast<int32_t>(Literal::En_NotUsed_61):
                case static_cast<int32_t>(Literal::En_NotUsed_60):
                case static_cast<int32_t>(Literal::En_NotUsed_59):
                case static_cast<int32_t>(Literal::En_NotUsed_58):
                case static_cast<int32_t>(Literal::En_NotUsed_57):
                case static_cast<int32_t>(Literal::En_NotUsed_56):
                case static_cast<int32_t>(Literal::En_NotUsed_55):
                case static_cast<int32_t>(Literal::En_NotUsed_54):
                case static_cast<int32_t>(Literal::En_NotUsed_53):
                case static_cast<int32_t>(Literal::En_NotUsed_52):
                case static_cast<int32_t>(Literal::En_NotUsed_51):
                case static_cast<int32_t>(Literal::En_NotUsed_50):
                case static_cast<int32_t>(Literal::En_NotUsed_49):
                case static_cast<int32_t>(Literal::En_NotUsed_48):
                case static_cast<int32_t>(Literal::En_NotUsed_47):
                case static_cast<int32_t>(Literal::En_NotUsed_46):
                case static_cast<int32_t>(Literal::En_NotUsed_45):
                case static_cast<int32_t>(Literal::En_NotUsed_44):
                case static_cast<int32_t>(Literal::En_NotUsed_43):
                case static_cast<int32_t>(Literal::En_NotUsed_42):
                case static_cast<int32_t>(Literal::En_NotUsed_41):
                case static_cast<int32_t>(Literal::En_NotUsed_40):
                case static_cast<int32_t>(Literal::En_NotUsed_39):
                case static_cast<int32_t>(Literal::En_NotUsed_38):
                case static_cast<int32_t>(Literal::En_NotUsed_37):
                case static_cast<int32_t>(Literal::En_NotUsed_36):
                case static_cast<int32_t>(Literal::En_NotUsed_35):
                case static_cast<int32_t>(Literal::En_NotUsed_34):
                case static_cast<int32_t>(Literal::En_NotUsed_33):
                case static_cast<int32_t>(Literal::En_NotUsed_32):
                case static_cast<int32_t>(Literal::En_NotUsed_31):
                case static_cast<int32_t>(Literal::En_NotUsed_30):
                case static_cast<int32_t>(Literal::En_NotUsed_29):
                case static_cast<int32_t>(Literal::En_NotUsed_28):
                case static_cast<int32_t>(Literal::En_NotUsed_27):
                case static_cast<int32_t>(Literal::En_NotUsed_26):
                case static_cast<int32_t>(Literal::En_NotUsed_25):
                case static_cast<int32_t>(Literal::En_NotUsed_24):
                case static_cast<int32_t>(Literal::En_NotUsed_23):
                case static_cast<int32_t>(Literal::En_NotUsed_22):
                case static_cast<int32_t>(Literal::En_NotUsed_21):
                case static_cast<int32_t>(Literal::En_NotUsed_20):
                case static_cast<int32_t>(Literal::En_NotUsed_19):
                case static_cast<int32_t>(Literal::En_NotUsed_18):
                case static_cast<int32_t>(Literal::En_NotUsed_17):
                case static_cast<int32_t>(Literal::En_NotUsed_16):
                case static_cast<int32_t>(Literal::En_NotUsed_15):
                case static_cast<int32_t>(Literal::En_NotUsed_14):
                case static_cast<int32_t>(Literal::En_NotUsed_13):
                case static_cast<int32_t>(Literal::En_NotUsed_12):
                case static_cast<int32_t>(Literal::En_NotUsed_11):
                case static_cast<int32_t>(Literal::En_NotUsed_10):
                case static_cast<int32_t>(Literal::En_NotUsed_9):
                case static_cast<int32_t>(Literal::En_NotUsed_8):
                case static_cast<int32_t>(Literal::En_NotUsed_7):
                case static_cast<int32_t>(Literal::En_NotUsed_6):
                case static_cast<int32_t>(Literal::En_NotUsed_5):
                case static_cast<int32_t>(Literal::En_NotUsed_4):
                case static_cast<int32_t>(Literal::En_NotUsed_3):
                case static_cast<int32_t>(Literal::En_NotUsed_2):
                case static_cast<int32_t>(Literal::En_NotUsed_1):
                case static_cast<int32_t>(Literal::En_Indian_English):
                case static_cast<int32_t>(Literal::En_Thai):
                case static_cast<int32_t>(Literal::En_Slovak):
                case static_cast<int32_t>(Literal::En_Arabic):
                case static_cast<int32_t>(Literal::En_Taiwanese):
                case static_cast<int32_t>(Literal::En_Mandarin_Chinese):
                case static_cast<int32_t>(Literal::En_Korean):
                case static_cast<int32_t>(Literal::En_AU_English):
                case static_cast<int32_t>(Literal::En_Japanese):
                case static_cast<int32_t>(Literal::En_Braz_Portuguese):
                case static_cast<int32_t>(Literal::En_EU_Portuguese):
                case static_cast<int32_t>(Literal::En_Finish):
                case static_cast<int32_t>(Literal::En_Norwegian):
                case static_cast<int32_t>(Literal::En_Danish):
                case static_cast<int32_t>(Literal::En_Swedish):
                case static_cast<int32_t>(Literal::En_Hungarian):
                case static_cast<int32_t>(Literal::En_Greek):
                case static_cast<int32_t>(Literal::En_Czech):
                case static_cast<int32_t>(Literal::En_Polish):
                case static_cast<int32_t>(Literal::En_Flemish):
                case static_cast<int32_t>(Literal::En_Dutch):
                case static_cast<int32_t>(Literal::En_Russian):
                case static_cast<int32_t>(Literal::En_Turkish):
                case static_cast<int32_t>(Literal::En_Mex_Spanish):
                case static_cast<int32_t>(Literal::En_EU_Spanish):
                case static_cast<int32_t>(Literal::En_Cana_French):
                case static_cast<int32_t>(Literal::En_EU_French):
                case static_cast<int32_t>(Literal::En_Italian):
                case static_cast<int32_t>(Literal::En_German):
                case static_cast<int32_t>(Literal::En_NA_English):
                case static_cast<int32_t>(Literal::En_UK_English):
                case static_cast<int32_t>(Literal::En_Unknown):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const McLangSel2_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const McLangSel2_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const McLangSel2_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const McLangSel2_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const McLangSel2_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const McLangSel2_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Mc_LangSel_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Thai = 31,
            En_Slovak = 30,
            En_Arabic = 29,
            En_Taiwanese = 28,
            En_Mandarin_Chinese = 27,
            En_Korean = 26,
            En_AU_English = 25,
            En_Japanese = 24,
            En_Braz_Portuguese = 23,
            En_EU_Portuguese = 22,
            En_Finish = 21,
            En_Norwegian = 20,
            En_Danish = 19,
            En_Swedish = 18,
            En_Hungarian = 17,
            En_Greek = 16,
            En_Czech = 15,
            En_Polish = 14,
            En_Flemish = 13,
            En_Dutch = 12,
            En_Russian = 11,
            En_Turkish = 10,
            En_Mex_Spanish = 9,
            En_EU_Spanish = 8,
            En_Cana_French = 7,
            En_EU_French = 6,
            En_Italian = 5,
            En_German = 4,
            En_NA_English = 3,
            En_UK_English = 2,
            En_Unknown = 1,
            En_Invalid = 0
        };
        
        Mc_LangSel_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Thai)) {}
        Mc_LangSel_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Thai):
                case static_cast<int32_t>(Literal::En_Slovak):
                case static_cast<int32_t>(Literal::En_Arabic):
                case static_cast<int32_t>(Literal::En_Taiwanese):
                case static_cast<int32_t>(Literal::En_Mandarin_Chinese):
                case static_cast<int32_t>(Literal::En_Korean):
                case static_cast<int32_t>(Literal::En_AU_English):
                case static_cast<int32_t>(Literal::En_Japanese):
                case static_cast<int32_t>(Literal::En_Braz_Portuguese):
                case static_cast<int32_t>(Literal::En_EU_Portuguese):
                case static_cast<int32_t>(Literal::En_Finish):
                case static_cast<int32_t>(Literal::En_Norwegian):
                case static_cast<int32_t>(Literal::En_Danish):
                case static_cast<int32_t>(Literal::En_Swedish):
                case static_cast<int32_t>(Literal::En_Hungarian):
                case static_cast<int32_t>(Literal::En_Greek):
                case static_cast<int32_t>(Literal::En_Czech):
                case static_cast<int32_t>(Literal::En_Polish):
                case static_cast<int32_t>(Literal::En_Flemish):
                case static_cast<int32_t>(Literal::En_Dutch):
                case static_cast<int32_t>(Literal::En_Russian):
                case static_cast<int32_t>(Literal::En_Turkish):
                case static_cast<int32_t>(Literal::En_Mex_Spanish):
                case static_cast<int32_t>(Literal::En_EU_Spanish):
                case static_cast<int32_t>(Literal::En_Cana_French):
                case static_cast<int32_t>(Literal::En_EU_French):
                case static_cast<int32_t>(Literal::En_Italian):
                case static_cast<int32_t>(Literal::En_German):
                case static_cast<int32_t>(Literal::En_NA_English):
                case static_cast<int32_t>(Literal::En_UK_English):
                case static_cast<int32_t>(Literal::En_Unknown):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Mc_LangSel_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Mc_LangSel_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Mc_LangSel_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Mc_LangSel_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Mc_LangSel_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Mc_LangSel_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Mc_VehLangUsrSel_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed_31 = 63,
            En_NotUsed_30 = 62,
            En_NotUsed_29 = 61,
            En_NotUsed_28 = 60,
            En_NotUsed_27 = 59,
            En_NotUsed_26 = 58,
            En_NotUsed_25 = 57,
            En_NotUsed_24 = 56,
            En_NotUsed_23 = 55,
            En_NotUsed_22 = 54,
            En_NotUsed_21 = 53,
            En_NotUsed_20 = 52,
            En_NotUsed_19 = 51,
            En_NotUsed_18 = 50,
            En_NotUsed_17 = 49,
            En_NotUsed_16 = 48,
            En_NotUsed_15 = 47,
            En_NotUsed_14 = 46,
            En_NotUsed_13 = 45,
            En_NotUsed_12 = 44,
            En_NotUsed_11 = 43,
            En_NotUsed_10 = 42,
            En_NotUsed_9 = 41,
            En_NotUsed_8 = 40,
            En_NotUsed_7 = 39,
            En_NotUsed_6 = 38,
            En_NotUsed_5 = 37,
            En_NotUsed_4 = 36,
            En_NotUsed_3 = 35,
            En_NotUsed_2 = 34,
            En_NotUsed_1 = 33,
            En_Indian_English = 32,
            En_Thai = 31,
            En_Slovak = 30,
            En_Arabic = 29,
            En_Taiwanese = 28,
            En_Mandarin_Chinese = 27,
            En_Korean = 26,
            En_AU_English = 25,
            En_Japanese = 24,
            En_Braz_Portuguese = 23,
            En_EU_Portuguese = 22,
            En_Finish = 21,
            En_Norwegian = 20,
            En_Danish = 19,
            En_Swedish = 18,
            En_Hungarian = 17,
            En_Greek = 16,
            En_Czech = 15,
            En_Polish = 14,
            En_Flemish = 13,
            En_Dutch = 12,
            En_Russian = 11,
            En_Turkish = 10,
            En_Mex_Spanish = 9,
            En_EU_Spanish = 8,
            En_Cana_French = 7,
            En_EU_French = 6,
            En_Italian = 5,
            En_German = 4,
            En_NA_English = 3,
            En_UK_English = 2,
            En_Unknown = 1,
            En_Invalid = 0
        };
        
        Mc_VehLangUsrSel_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed_31)) {}
        Mc_VehLangUsrSel_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed_31):
                case static_cast<int32_t>(Literal::En_NotUsed_30):
                case static_cast<int32_t>(Literal::En_NotUsed_29):
                case static_cast<int32_t>(Literal::En_NotUsed_28):
                case static_cast<int32_t>(Literal::En_NotUsed_27):
                case static_cast<int32_t>(Literal::En_NotUsed_26):
                case static_cast<int32_t>(Literal::En_NotUsed_25):
                case static_cast<int32_t>(Literal::En_NotUsed_24):
                case static_cast<int32_t>(Literal::En_NotUsed_23):
                case static_cast<int32_t>(Literal::En_NotUsed_22):
                case static_cast<int32_t>(Literal::En_NotUsed_21):
                case static_cast<int32_t>(Literal::En_NotUsed_20):
                case static_cast<int32_t>(Literal::En_NotUsed_19):
                case static_cast<int32_t>(Literal::En_NotUsed_18):
                case static_cast<int32_t>(Literal::En_NotUsed_17):
                case static_cast<int32_t>(Literal::En_NotUsed_16):
                case static_cast<int32_t>(Literal::En_NotUsed_15):
                case static_cast<int32_t>(Literal::En_NotUsed_14):
                case static_cast<int32_t>(Literal::En_NotUsed_13):
                case static_cast<int32_t>(Literal::En_NotUsed_12):
                case static_cast<int32_t>(Literal::En_NotUsed_11):
                case static_cast<int32_t>(Literal::En_NotUsed_10):
                case static_cast<int32_t>(Literal::En_NotUsed_9):
                case static_cast<int32_t>(Literal::En_NotUsed_8):
                case static_cast<int32_t>(Literal::En_NotUsed_7):
                case static_cast<int32_t>(Literal::En_NotUsed_6):
                case static_cast<int32_t>(Literal::En_NotUsed_5):
                case static_cast<int32_t>(Literal::En_NotUsed_4):
                case static_cast<int32_t>(Literal::En_NotUsed_3):
                case static_cast<int32_t>(Literal::En_NotUsed_2):
                case static_cast<int32_t>(Literal::En_NotUsed_1):
                case static_cast<int32_t>(Literal::En_Indian_English):
                case static_cast<int32_t>(Literal::En_Thai):
                case static_cast<int32_t>(Literal::En_Slovak):
                case static_cast<int32_t>(Literal::En_Arabic):
                case static_cast<int32_t>(Literal::En_Taiwanese):
                case static_cast<int32_t>(Literal::En_Mandarin_Chinese):
                case static_cast<int32_t>(Literal::En_Korean):
                case static_cast<int32_t>(Literal::En_AU_English):
                case static_cast<int32_t>(Literal::En_Japanese):
                case static_cast<int32_t>(Literal::En_Braz_Portuguese):
                case static_cast<int32_t>(Literal::En_EU_Portuguese):
                case static_cast<int32_t>(Literal::En_Finish):
                case static_cast<int32_t>(Literal::En_Norwegian):
                case static_cast<int32_t>(Literal::En_Danish):
                case static_cast<int32_t>(Literal::En_Swedish):
                case static_cast<int32_t>(Literal::En_Hungarian):
                case static_cast<int32_t>(Literal::En_Greek):
                case static_cast<int32_t>(Literal::En_Czech):
                case static_cast<int32_t>(Literal::En_Polish):
                case static_cast<int32_t>(Literal::En_Flemish):
                case static_cast<int32_t>(Literal::En_Dutch):
                case static_cast<int32_t>(Literal::En_Russian):
                case static_cast<int32_t>(Literal::En_Turkish):
                case static_cast<int32_t>(Literal::En_Mex_Spanish):
                case static_cast<int32_t>(Literal::En_EU_Spanish):
                case static_cast<int32_t>(Literal::En_Cana_French):
                case static_cast<int32_t>(Literal::En_EU_French):
                case static_cast<int32_t>(Literal::En_Italian):
                case static_cast<int32_t>(Literal::En_German):
                case static_cast<int32_t>(Literal::En_NA_English):
                case static_cast<int32_t>(Literal::En_UK_English):
                case static_cast<int32_t>(Literal::En_Unknown):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Mc_VehLangUsrSel_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Mc_VehLangUsrSel_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Mc_VehLangUsrSel_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Mc_VehLangUsrSel_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Mc_VehLangUsrSel_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Mc_VehLangUsrSel_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.harman.ford.langdata_types";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct langdata_types

} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for Dsp_LangUpdate_Rsp_enum
    template<>
    struct hash<::v0::org::harman::ford::langdata_types::Dsp_LangUpdate_Rsp_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::langdata_types::Dsp_LangUpdate_Rsp_enum& dsp_LangUpdate_Rsp_enum) const {
            return static_cast<int32_t>(dsp_LangUpdate_Rsp_enum);
        }
    };
    //Hash for LangUpdate_Rsp_enum
    template<>
    struct hash<::v0::org::harman::ford::langdata_types::LangUpdate_Rsp_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::langdata_types::LangUpdate_Rsp_enum& langUpdate_Rsp_enum) const {
            return static_cast<int32_t>(langUpdate_Rsp_enum);
        }
    };
    //Hash for Disp_LangSel_St_enum
    template<>
    struct hash<::v0::org::harman::ford::langdata_types::Disp_LangSel_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::langdata_types::Disp_LangSel_St_enum& disp_LangSel_St_enum) const {
            return static_cast<int32_t>(disp_LangSel_St_enum);
        }
    };
    //Hash for Disp_LangSel2_St_enum
    template<>
    struct hash<::v0::org::harman::ford::langdata_types::Disp_LangSel2_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::langdata_types::Disp_LangSel2_St_enum& disp_LangSel2_St_enum) const {
            return static_cast<int32_t>(disp_LangSel2_St_enum);
        }
    };
    //Hash for Disp_LangSel_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::langdata_types::Disp_LangSel_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::langdata_types::Disp_LangSel_Rq_enum& disp_LangSel_Rq_enum) const {
            return static_cast<int32_t>(disp_LangSel_Rq_enum);
        }
    };
    //Hash for Disp_LangSel2_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::langdata_types::Disp_LangSel2_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::langdata_types::Disp_LangSel2_Rq_enum& disp_LangSel2_Rq_enum) const {
            return static_cast<int32_t>(disp_LangSel2_Rq_enum);
        }
    };
    //Hash for McLangSel2_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::langdata_types::McLangSel2_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::langdata_types::McLangSel2_Rq_enum& mcLangSel2_Rq_enum) const {
            return static_cast<int32_t>(mcLangSel2_Rq_enum);
        }
    };
    //Hash for Mc_LangSel_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::langdata_types::Mc_LangSel_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::langdata_types::Mc_LangSel_Rq_enum& mc_LangSel_Rq_enum) const {
            return static_cast<int32_t>(mc_LangSel_Rq_enum);
        }
    };
    //Hash for Mc_VehLangUsrSel_St_enum
    template<>
    struct hash<::v0::org::harman::ford::langdata_types::Mc_VehLangUsrSel_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::langdata_types::Mc_VehLangUsrSel_St_enum& mc_VehLangUsrSel_St_enum) const {
            return static_cast<int32_t>(mc_VehLangUsrSel_St_enum);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_FORD_langdata_types_HPP_

/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_ORG_HARMAN_FORD_visualparkassist_PROXY_HPP_
#define V0_ORG_HARMAN_FORD_visualparkassist_PROXY_HPP_

#include <v0/org/harman/ford/visualparkassistProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace ford {

template <typename ... _AttributeExtensions>
class visualparkassistProxy
    : virtual public visualparkassist, 
      virtual public visualparkassistProxyBase,
      virtual public _AttributeExtensions... {
public:
    visualparkassistProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~visualparkassistProxy();

    typedef visualparkassist InterfaceType;


    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute prkAidSnsRlCrnr_D_Stat_enum.
     */
    virtual PrkAidSnsRlCrnr_D_Stat_enumAttribute& getPrkAidSnsRlCrnr_D_Stat_enumAttribute() {
        return delegate_->getPrkAidSnsRlCrnr_D_Stat_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute prkAidSnsRlCntr_D_Stat_enum.
     */
    virtual PrkAidSnsRlCntr_D_Stat_enumAttribute& getPrkAidSnsRlCntr_D_Stat_enumAttribute() {
        return delegate_->getPrkAidSnsRlCntr_D_Stat_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute prkAidSnsRrCntr_D_Stat_enum.
     */
    virtual PrkAidSnsRrCntr_D_Stat_enumAttribute& getPrkAidSnsRrCntr_D_Stat_enumAttribute() {
        return delegate_->getPrkAidSnsRrCntr_D_Stat_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute prkAidSnsRrCrnr_D_Stat_enum.
     */
    virtual PrkAidSnsRrCrnr_D_Stat_enumAttribute& getPrkAidSnsRrCrnr_D_Stat_enumAttribute() {
        return delegate_->getPrkAidSnsRrCrnr_D_Stat_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute sidePrkSnsL3_D_Stat_enum.
     */
    virtual SidePrkSnsL3_D_Stat_enumAttribute& getSidePrkSnsL3_D_Stat_enumAttribute() {
        return delegate_->getSidePrkSnsL3_D_Stat_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute sidePrkSnsL4_D_Stat_enum.
     */
    virtual SidePrkSnsL4_D_Stat_enumAttribute& getSidePrkSnsL4_D_Stat_enumAttribute() {
        return delegate_->getSidePrkSnsL4_D_Stat_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute sidePrkSnsR3_D_Stat_enum.
     */
    virtual SidePrkSnsR3_D_Stat_enumAttribute& getSidePrkSnsR3_D_Stat_enumAttribute() {
        return delegate_->getSidePrkSnsR3_D_Stat_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute sidePrkSnsR4_D_Stat_enum.
     */
    virtual SidePrkSnsR4_D_Stat_enumAttribute& getSidePrkSnsR4_D_Stat_enumAttribute() {
        return delegate_->getSidePrkSnsR4_D_Stat_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute ApaBrk_A_Rq.
     */
    virtual ApaBrk_A_RqAttribute& getApaBrk_A_RqAttribute() {
        return delegate_->getApaBrk_A_RqAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute PrkAidMsgTxt_D_Rq.
     */
    virtual PrkAidMsgTxt_D_RqAttribute& getPrkAidMsgTxt_D_RqAttribute() {
        return delegate_->getPrkAidMsgTxt_D_RqAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute prkAidSnsFlCrnr_D_Stat_enum.
     */
    virtual PrkAidSnsFlCrnr_D_Stat_enumAttribute& getPrkAidSnsFlCrnr_D_Stat_enumAttribute() {
        return delegate_->getPrkAidSnsFlCrnr_D_Stat_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute prkAidSnsFlCntr_D_Stat_enum.
     */
    virtual PrkAidSnsFlCntr_D_Stat_enumAttribute& getPrkAidSnsFlCntr_D_Stat_enumAttribute() {
        return delegate_->getPrkAidSnsFlCntr_D_Stat_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute prkAidSnsFrCntr_D_Stat_enum.
     */
    virtual PrkAidSnsFrCntr_D_Stat_enumAttribute& getPrkAidSnsFrCntr_D_Stat_enumAttribute() {
        return delegate_->getPrkAidSnsFrCntr_D_Stat_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute prkAidSnsFrCrnr_D_Stat_enum.
     */
    virtual PrkAidSnsFrCrnr_D_Stat_enumAttribute& getPrkAidSnsFrCrnr_D_Stat_enumAttribute() {
        return delegate_->getPrkAidSnsFrCrnr_D_Stat_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute sidePrkSnsL2_D_Stat_enum.
     */
    virtual SidePrkSnsL2_D_Stat_enumAttribute& getSidePrkSnsL2_D_Stat_enumAttribute() {
        return delegate_->getSidePrkSnsL2_D_Stat_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute sidePrkSnsL1_D_Stat_enum.
     */
    virtual SidePrkSnsL1_D_Stat_enumAttribute& getSidePrkSnsL1_D_Stat_enumAttribute() {
        return delegate_->getSidePrkSnsL1_D_Stat_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute sidePrkSnsR2_D_Stat_enum.
     */
    virtual SidePrkSnsR2_D_Stat_enumAttribute& getSidePrkSnsR2_D_Stat_enumAttribute() {
        return delegate_->getSidePrkSnsR2_D_Stat_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute sidePrkSnsR1_D_Stat_enum.
     */
    virtual SidePrkSnsR1_D_Stat_enumAttribute& getSidePrkSnsR1_D_Stat_enumAttribute() {
        return delegate_->getSidePrkSnsR1_D_Stat_enumAttribute();
    }




    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<visualparkassistProxyBase> delegate_;
};

typedef visualparkassistProxy<> visualparkassistProxyDefault;

namespace visualparkassistExtensions {
    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class PrkAidSnsRlCrnr_D_Stat_enumAttributeExtension {
     public:
        typedef _ExtensionType<visualparkassistProxyBase::PrkAidSnsRlCrnr_D_Stat_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<visualparkassistProxyBase::PrkAidSnsRlCrnr_D_Stat_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PrkAidSnsRlCrnr_D_Stat_enumAttributeExtension() {}
    #endif
    
        PrkAidSnsRlCrnr_D_Stat_enumAttributeExtension(visualparkassistProxyBase& proxy): attributeExtension_(proxy.getPrkAidSnsRlCrnr_D_Stat_enumAttribute()) {
        }
    
        inline extension_type& getPrkAidSnsRlCrnr_D_Stat_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class PrkAidSnsRlCntr_D_Stat_enumAttributeExtension {
     public:
        typedef _ExtensionType<visualparkassistProxyBase::PrkAidSnsRlCntr_D_Stat_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<visualparkassistProxyBase::PrkAidSnsRlCntr_D_Stat_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PrkAidSnsRlCntr_D_Stat_enumAttributeExtension() {}
    #endif
    
        PrkAidSnsRlCntr_D_Stat_enumAttributeExtension(visualparkassistProxyBase& proxy): attributeExtension_(proxy.getPrkAidSnsRlCntr_D_Stat_enumAttribute()) {
        }
    
        inline extension_type& getPrkAidSnsRlCntr_D_Stat_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class PrkAidSnsRrCntr_D_Stat_enumAttributeExtension {
     public:
        typedef _ExtensionType<visualparkassistProxyBase::PrkAidSnsRrCntr_D_Stat_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<visualparkassistProxyBase::PrkAidSnsRrCntr_D_Stat_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PrkAidSnsRrCntr_D_Stat_enumAttributeExtension() {}
    #endif
    
        PrkAidSnsRrCntr_D_Stat_enumAttributeExtension(visualparkassistProxyBase& proxy): attributeExtension_(proxy.getPrkAidSnsRrCntr_D_Stat_enumAttribute()) {
        }
    
        inline extension_type& getPrkAidSnsRrCntr_D_Stat_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class PrkAidSnsRrCrnr_D_Stat_enumAttributeExtension {
     public:
        typedef _ExtensionType<visualparkassistProxyBase::PrkAidSnsRrCrnr_D_Stat_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<visualparkassistProxyBase::PrkAidSnsRrCrnr_D_Stat_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PrkAidSnsRrCrnr_D_Stat_enumAttributeExtension() {}
    #endif
    
        PrkAidSnsRrCrnr_D_Stat_enumAttributeExtension(visualparkassistProxyBase& proxy): attributeExtension_(proxy.getPrkAidSnsRrCrnr_D_Stat_enumAttribute()) {
        }
    
        inline extension_type& getPrkAidSnsRrCrnr_D_Stat_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class SidePrkSnsL3_D_Stat_enumAttributeExtension {
     public:
        typedef _ExtensionType<visualparkassistProxyBase::SidePrkSnsL3_D_Stat_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<visualparkassistProxyBase::SidePrkSnsL3_D_Stat_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SidePrkSnsL3_D_Stat_enumAttributeExtension() {}
    #endif
    
        SidePrkSnsL3_D_Stat_enumAttributeExtension(visualparkassistProxyBase& proxy): attributeExtension_(proxy.getSidePrkSnsL3_D_Stat_enumAttribute()) {
        }
    
        inline extension_type& getSidePrkSnsL3_D_Stat_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class SidePrkSnsL4_D_Stat_enumAttributeExtension {
     public:
        typedef _ExtensionType<visualparkassistProxyBase::SidePrkSnsL4_D_Stat_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<visualparkassistProxyBase::SidePrkSnsL4_D_Stat_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SidePrkSnsL4_D_Stat_enumAttributeExtension() {}
    #endif
    
        SidePrkSnsL4_D_Stat_enumAttributeExtension(visualparkassistProxyBase& proxy): attributeExtension_(proxy.getSidePrkSnsL4_D_Stat_enumAttribute()) {
        }
    
        inline extension_type& getSidePrkSnsL4_D_Stat_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class SidePrkSnsR3_D_Stat_enumAttributeExtension {
     public:
        typedef _ExtensionType<visualparkassistProxyBase::SidePrkSnsR3_D_Stat_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<visualparkassistProxyBase::SidePrkSnsR3_D_Stat_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SidePrkSnsR3_D_Stat_enumAttributeExtension() {}
    #endif
    
        SidePrkSnsR3_D_Stat_enumAttributeExtension(visualparkassistProxyBase& proxy): attributeExtension_(proxy.getSidePrkSnsR3_D_Stat_enumAttribute()) {
        }
    
        inline extension_type& getSidePrkSnsR3_D_Stat_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class SidePrkSnsR4_D_Stat_enumAttributeExtension {
     public:
        typedef _ExtensionType<visualparkassistProxyBase::SidePrkSnsR4_D_Stat_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<visualparkassistProxyBase::SidePrkSnsR4_D_Stat_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SidePrkSnsR4_D_Stat_enumAttributeExtension() {}
    #endif
    
        SidePrkSnsR4_D_Stat_enumAttributeExtension(visualparkassistProxyBase& proxy): attributeExtension_(proxy.getSidePrkSnsR4_D_Stat_enumAttribute()) {
        }
    
        inline extension_type& getSidePrkSnsR4_D_Stat_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class ApaBrk_A_RqAttributeExtension {
     public:
        typedef _ExtensionType<visualparkassistProxyBase::ApaBrk_A_RqAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<visualparkassistProxyBase::ApaBrk_A_RqAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ApaBrk_A_RqAttributeExtension() {}
    #endif
    
        ApaBrk_A_RqAttributeExtension(visualparkassistProxyBase& proxy): attributeExtension_(proxy.getApaBrk_A_RqAttribute()) {
        }
    
        inline extension_type& getApaBrk_A_RqAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class PrkAidMsgTxt_D_RqAttributeExtension {
     public:
        typedef _ExtensionType<visualparkassistProxyBase::PrkAidMsgTxt_D_RqAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<visualparkassistProxyBase::PrkAidMsgTxt_D_RqAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PrkAidMsgTxt_D_RqAttributeExtension() {}
    #endif
    
        PrkAidMsgTxt_D_RqAttributeExtension(visualparkassistProxyBase& proxy): attributeExtension_(proxy.getPrkAidMsgTxt_D_RqAttribute()) {
        }
    
        inline extension_type& getPrkAidMsgTxt_D_RqAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class PrkAidSnsFlCrnr_D_Stat_enumAttributeExtension {
     public:
        typedef _ExtensionType<visualparkassistProxyBase::PrkAidSnsFlCrnr_D_Stat_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<visualparkassistProxyBase::PrkAidSnsFlCrnr_D_Stat_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PrkAidSnsFlCrnr_D_Stat_enumAttributeExtension() {}
    #endif
    
        PrkAidSnsFlCrnr_D_Stat_enumAttributeExtension(visualparkassistProxyBase& proxy): attributeExtension_(proxy.getPrkAidSnsFlCrnr_D_Stat_enumAttribute()) {
        }
    
        inline extension_type& getPrkAidSnsFlCrnr_D_Stat_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class PrkAidSnsFlCntr_D_Stat_enumAttributeExtension {
     public:
        typedef _ExtensionType<visualparkassistProxyBase::PrkAidSnsFlCntr_D_Stat_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<visualparkassistProxyBase::PrkAidSnsFlCntr_D_Stat_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PrkAidSnsFlCntr_D_Stat_enumAttributeExtension() {}
    #endif
    
        PrkAidSnsFlCntr_D_Stat_enumAttributeExtension(visualparkassistProxyBase& proxy): attributeExtension_(proxy.getPrkAidSnsFlCntr_D_Stat_enumAttribute()) {
        }
    
        inline extension_type& getPrkAidSnsFlCntr_D_Stat_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class PrkAidSnsFrCntr_D_Stat_enumAttributeExtension {
     public:
        typedef _ExtensionType<visualparkassistProxyBase::PrkAidSnsFrCntr_D_Stat_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<visualparkassistProxyBase::PrkAidSnsFrCntr_D_Stat_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PrkAidSnsFrCntr_D_Stat_enumAttributeExtension() {}
    #endif
    
        PrkAidSnsFrCntr_D_Stat_enumAttributeExtension(visualparkassistProxyBase& proxy): attributeExtension_(proxy.getPrkAidSnsFrCntr_D_Stat_enumAttribute()) {
        }
    
        inline extension_type& getPrkAidSnsFrCntr_D_Stat_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class PrkAidSnsFrCrnr_D_Stat_enumAttributeExtension {
     public:
        typedef _ExtensionType<visualparkassistProxyBase::PrkAidSnsFrCrnr_D_Stat_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<visualparkassistProxyBase::PrkAidSnsFrCrnr_D_Stat_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PrkAidSnsFrCrnr_D_Stat_enumAttributeExtension() {}
    #endif
    
        PrkAidSnsFrCrnr_D_Stat_enumAttributeExtension(visualparkassistProxyBase& proxy): attributeExtension_(proxy.getPrkAidSnsFrCrnr_D_Stat_enumAttribute()) {
        }
    
        inline extension_type& getPrkAidSnsFrCrnr_D_Stat_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class SidePrkSnsL2_D_Stat_enumAttributeExtension {
     public:
        typedef _ExtensionType<visualparkassistProxyBase::SidePrkSnsL2_D_Stat_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<visualparkassistProxyBase::SidePrkSnsL2_D_Stat_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SidePrkSnsL2_D_Stat_enumAttributeExtension() {}
    #endif
    
        SidePrkSnsL2_D_Stat_enumAttributeExtension(visualparkassistProxyBase& proxy): attributeExtension_(proxy.getSidePrkSnsL2_D_Stat_enumAttribute()) {
        }
    
        inline extension_type& getSidePrkSnsL2_D_Stat_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class SidePrkSnsL1_D_Stat_enumAttributeExtension {
     public:
        typedef _ExtensionType<visualparkassistProxyBase::SidePrkSnsL1_D_Stat_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<visualparkassistProxyBase::SidePrkSnsL1_D_Stat_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SidePrkSnsL1_D_Stat_enumAttributeExtension() {}
    #endif
    
        SidePrkSnsL1_D_Stat_enumAttributeExtension(visualparkassistProxyBase& proxy): attributeExtension_(proxy.getSidePrkSnsL1_D_Stat_enumAttribute()) {
        }
    
        inline extension_type& getSidePrkSnsL1_D_Stat_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class SidePrkSnsR2_D_Stat_enumAttributeExtension {
     public:
        typedef _ExtensionType<visualparkassistProxyBase::SidePrkSnsR2_D_Stat_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<visualparkassistProxyBase::SidePrkSnsR2_D_Stat_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SidePrkSnsR2_D_Stat_enumAttributeExtension() {}
    #endif
    
        SidePrkSnsR2_D_Stat_enumAttributeExtension(visualparkassistProxyBase& proxy): attributeExtension_(proxy.getSidePrkSnsR2_D_Stat_enumAttribute()) {
        }
    
        inline extension_type& getSidePrkSnsR2_D_Stat_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class SidePrkSnsR1_D_Stat_enumAttributeExtension {
     public:
        typedef _ExtensionType<visualparkassistProxyBase::SidePrkSnsR1_D_Stat_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<visualparkassistProxyBase::SidePrkSnsR1_D_Stat_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SidePrkSnsR1_D_Stat_enumAttributeExtension() {}
    #endif
    
        SidePrkSnsR1_D_Stat_enumAttributeExtension(visualparkassistProxyBase& proxy): attributeExtension_(proxy.getSidePrkSnsR1_D_Stat_enumAttribute()) {
        }
    
        inline extension_type& getSidePrkSnsR1_D_Stat_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace visualparkassistExtensions

//
// visualparkassistProxy Implementation
//
template <typename ... _AttributeExtensions>
visualparkassistProxy<_AttributeExtensions...>::visualparkassistProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<visualparkassistProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<visualparkassistProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
visualparkassistProxy<_AttributeExtensions...>::~visualparkassistProxy() {
}


template <typename ... _AttributeExtensions>
const CommonAPI::Address &visualparkassistProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool visualparkassistProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool visualparkassistProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& visualparkassistProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& visualparkassistProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0::org::harman::ford::visualparkassistProxy,
    _AttributeExtension> {
    typedef typename ::v0::org::harman::ford::visualparkassistProxy<
            ::v0::org::harman::ford::visualparkassistExtensions::PrkAidSnsRlCrnr_D_Stat_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::visualparkassistExtensions::PrkAidSnsRlCntr_D_Stat_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::visualparkassistExtensions::PrkAidSnsRrCntr_D_Stat_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::visualparkassistExtensions::PrkAidSnsRrCrnr_D_Stat_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::visualparkassistExtensions::SidePrkSnsL3_D_Stat_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::visualparkassistExtensions::SidePrkSnsL4_D_Stat_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::visualparkassistExtensions::SidePrkSnsR3_D_Stat_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::visualparkassistExtensions::SidePrkSnsR4_D_Stat_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::visualparkassistExtensions::ApaBrk_A_RqAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::visualparkassistExtensions::PrkAidMsgTxt_D_RqAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::visualparkassistExtensions::PrkAidSnsFlCrnr_D_Stat_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::visualparkassistExtensions::PrkAidSnsFlCntr_D_Stat_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::visualparkassistExtensions::PrkAidSnsFrCntr_D_Stat_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::visualparkassistExtensions::PrkAidSnsFrCrnr_D_Stat_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::visualparkassistExtensions::SidePrkSnsL2_D_Stat_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::visualparkassistExtensions::SidePrkSnsL1_D_Stat_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::visualparkassistExtensions::SidePrkSnsR2_D_Stat_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::visualparkassistExtensions::SidePrkSnsR1_D_Stat_enumAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_FORD_visualparkassist_PROXY_HPP_

/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_ORG_HARMAN_FORD_camerainfo_types_HPP_
#define V0_ORG_HARMAN_FORD_camerainfo_types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace ford {

struct camerainfo_types {
    
    struct CamraViewSplit_B_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_On = 1,
            En_Off = 0
        };
        
        CamraViewSplit_B_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_On)) {}
        CamraViewSplit_B_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_On):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CamraViewSplit_B_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CamraViewSplit_B_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CamraViewSplit_B_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CamraViewSplit_B_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CamraViewSplit_B_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CamraViewSplit_B_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CamraOvrlStat_D_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_On = 1,
            En_Off = 0
        };
        
        CamraOvrlStat_D_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_On)) {}
        CamraOvrlStat_D_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_On):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CamraOvrlStat_D_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CamraOvrlStat_D_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CamraOvrlStat_D_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CamraOvrlStat_D_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CamraOvrlStat_D_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CamraOvrlStat_D_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CamraOvrlDyn_D_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_On = 1,
            En_Off = 0
        };
        
        CamraOvrlDyn_D_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_On)) {}
        CamraOvrlDyn_D_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_On):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CamraOvrlDyn_D_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CamraOvrlDyn_D_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CamraOvrlDyn_D_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CamraOvrlDyn_D_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CamraOvrlDyn_D_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CamraOvrlDyn_D_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CamraOvrlTow_D_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_On = 1,
            En_Off = 0
        };
        
        CamraOvrlTow_D_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_On)) {}
        CamraOvrlTow_D_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_On):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CamraOvrlTow_D_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CamraOvrlTow_D_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CamraOvrlTow_D_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CamraOvrlTow_D_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CamraOvrlTow_D_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CamraOvrlTow_D_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CamraZoomMan_D_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unknown = 7,
            En_Invalid = 6,
            En_Zoom_Level_V = 5,
            En_Zoom_Level_IV = 4,
            En_Zoom_Level_III = 3,
            En_Zoom_Level_II = 2,
            En_Zoom_Level_I = 1,
            En_Off = 0
        };
        
        CamraZoomMan_D_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unknown)) {}
        CamraZoomMan_D_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unknown):
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Zoom_Level_V):
                case static_cast<int32_t>(Literal::En_Zoom_Level_IV):
                case static_cast<int32_t>(Literal::En_Zoom_Level_III):
                case static_cast<int32_t>(Literal::En_Zoom_Level_II):
                case static_cast<int32_t>(Literal::En_Zoom_Level_I):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CamraZoomMan_D_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CamraZoomMan_D_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CamraZoomMan_D_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CamraZoomMan_D_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CamraZoomMan_D_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CamraZoomMan_D_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CamraViewSplit_D_Actl_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Inactive = 2,
            En_Active = 1,
            En_Invalid = 0
        };
        
        CamraViewSplit_D_Actl_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Inactive)) {}
        CamraViewSplit_D_Actl_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CamraViewSplit_D_Actl_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CamraViewSplit_D_Actl_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CamraViewSplit_D_Actl_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CamraViewSplit_D_Actl_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CamraViewSplit_D_Actl_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CamraViewSplit_D_Actl_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CamraViewSplit_D_Actl_UB_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fresh_data = 1,
            En_Unchanged_data = 0
        };
        
        CamraViewSplit_D_Actl_UB_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fresh_data)) {}
        CamraViewSplit_D_Actl_UB_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fresh_data):
                case static_cast<int32_t>(Literal::En_Unchanged_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CamraViewSplit_D_Actl_UB_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CamraViewSplit_D_Actl_UB_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CamraViewSplit_D_Actl_UB_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CamraViewSplit_D_Actl_UB_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CamraViewSplit_D_Actl_UB_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CamraViewSplit_D_Actl_UB_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CamraOvrlStat_D_Actl_UB_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fresh_data = 1,
            En_Unchanged_data = 0
        };
        
        CamraOvrlStat_D_Actl_UB_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fresh_data)) {}
        CamraOvrlStat_D_Actl_UB_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fresh_data):
                case static_cast<int32_t>(Literal::En_Unchanged_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CamraOvrlStat_D_Actl_UB_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CamraOvrlStat_D_Actl_UB_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CamraOvrlStat_D_Actl_UB_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CamraOvrlStat_D_Actl_UB_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CamraOvrlStat_D_Actl_UB_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CamraOvrlStat_D_Actl_UB_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CamraOvrlStat_D_Actl_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Not_Used = 3,
            En_Inactive = 2,
            En_Active = 1,
            En_Invalid = 0
        };
        
        CamraOvrlStat_D_Actl_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Not_Used)) {}
        CamraOvrlStat_D_Actl_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Not_Used):
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CamraOvrlStat_D_Actl_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CamraOvrlStat_D_Actl_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CamraOvrlStat_D_Actl_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CamraOvrlStat_D_Actl_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CamraOvrlStat_D_Actl_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CamraOvrlStat_D_Actl_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct VehCharacteristicSet2_HS3_struct : CommonAPI::Struct<CamraOvrlStat_D_Actl_UB_enum, CamraOvrlStat_D_Actl_enum> {
    	
    	VehCharacteristicSet2_HS3_struct() {
    	}
    	VehCharacteristicSet2_HS3_struct(const CamraOvrlStat_D_Actl_UB_enum &_camraOvrlStat_D_Actl_UB_enum, const CamraOvrlStat_D_Actl_enum &_camraOvrlStat_D_Actl_enum)
    	{
    		std::get<0>(values_) = _camraOvrlStat_D_Actl_UB_enum;
    		std::get<1>(values_) = _camraOvrlStat_D_Actl_enum;
    	}
    	inline const CamraOvrlStat_D_Actl_UB_enum &getCamraOvrlStat_D_Actl_UB_enum() const { return std::get<0>(values_); }
    	inline void setCamraOvrlStat_D_Actl_UB_enum(const CamraOvrlStat_D_Actl_UB_enum &_value) { std::get<0>(values_) = _value; }
    	inline const CamraOvrlStat_D_Actl_enum &getCamraOvrlStat_D_Actl_enum() const { return std::get<1>(values_); }
    	inline void setCamraOvrlStat_D_Actl_enum(const CamraOvrlStat_D_Actl_enum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const VehCharacteristicSet2_HS3_struct& _other) const {
                return (getCamraOvrlStat_D_Actl_UB_enum() == _other.getCamraOvrlStat_D_Actl_UB_enum() && getCamraOvrlStat_D_Actl_enum() == _other.getCamraOvrlStat_D_Actl_enum());
        }
    	inline bool operator!=(const VehCharacteristicSet2_HS3_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct CamPDCGuidStat_UB_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fresh_data = 1,
            En_Unchanged_data = 0
        };
        
        CamPDCGuidStat_UB_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fresh_data)) {}
        CamPDCGuidStat_UB_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fresh_data):
                case static_cast<int32_t>(Literal::En_Unchanged_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CamPDCGuidStat_UB_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CamPDCGuidStat_UB_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CamPDCGuidStat_UB_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CamPDCGuidStat_UB_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CamPDCGuidStat_UB_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CamPDCGuidStat_UB_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CamPDCGuidStat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Not_Used = 3,
            En_Inactive = 2,
            En_Active = 1,
            En_Invalid = 0
        };
        
        CamPDCGuidStat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Not_Used)) {}
        CamPDCGuidStat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Not_Used):
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CamPDCGuidStat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CamPDCGuidStat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CamPDCGuidStat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CamPDCGuidStat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CamPDCGuidStat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CamPDCGuidStat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct VehCharacteristicSet2_HS3_sig_0_struct : CommonAPI::Struct<CamPDCGuidStat_enum, CamPDCGuidStat_UB_enum> {
    	
    	VehCharacteristicSet2_HS3_sig_0_struct() {
    	}
    	VehCharacteristicSet2_HS3_sig_0_struct(const CamPDCGuidStat_enum &_camPDCGuidStat_enum, const CamPDCGuidStat_UB_enum &_camPDCGuidStat_UB_enum)
    	{
    		std::get<0>(values_) = _camPDCGuidStat_enum;
    		std::get<1>(values_) = _camPDCGuidStat_UB_enum;
    	}
    	inline const CamPDCGuidStat_enum &getCamPDCGuidStat_enum() const { return std::get<0>(values_); }
    	inline void setCamPDCGuidStat_enum(const CamPDCGuidStat_enum &_value) { std::get<0>(values_) = _value; }
    	inline const CamPDCGuidStat_UB_enum &getCamPDCGuidStat_UB_enum() const { return std::get<1>(values_); }
    	inline void setCamPDCGuidStat_UB_enum(const CamPDCGuidStat_UB_enum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const VehCharacteristicSet2_HS3_sig_0_struct& _other) const {
                return (getCamPDCGuidStat_enum() == _other.getCamPDCGuidStat_enum() && getCamPDCGuidStat_UB_enum() == _other.getCamPDCGuidStat_UB_enum());
        }
    	inline bool operator!=(const VehCharacteristicSet2_HS3_sig_0_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct CamraOvrlDyn_D_Actl_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Not_Used = 3,
            En_Inactive = 2,
            En_Active = 1,
            En_Invalid = 0
        };
        
        CamraOvrlDyn_D_Actl_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Not_Used)) {}
        CamraOvrlDyn_D_Actl_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Not_Used):
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CamraOvrlDyn_D_Actl_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CamraOvrlDyn_D_Actl_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CamraOvrlDyn_D_Actl_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CamraOvrlDyn_D_Actl_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CamraOvrlDyn_D_Actl_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CamraOvrlDyn_D_Actl_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CamraOvrlDyn_D_Actl_UB_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fresh_data = 1,
            En_Unchanged_data = 0
        };
        
        CamraOvrlDyn_D_Actl_UB_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fresh_data)) {}
        CamraOvrlDyn_D_Actl_UB_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fresh_data):
                case static_cast<int32_t>(Literal::En_Unchanged_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CamraOvrlDyn_D_Actl_UB_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CamraOvrlDyn_D_Actl_UB_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CamraOvrlDyn_D_Actl_UB_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CamraOvrlDyn_D_Actl_UB_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CamraOvrlDyn_D_Actl_UB_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CamraOvrlDyn_D_Actl_UB_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct VehCharacteristicSet2_HS3_sig_1_struct : CommonAPI::Struct<CamraOvrlDyn_D_Actl_enum, CamraOvrlDyn_D_Actl_UB_enum> {
    	
    	VehCharacteristicSet2_HS3_sig_1_struct() {
    	}
    	VehCharacteristicSet2_HS3_sig_1_struct(const CamraOvrlDyn_D_Actl_enum &_camraOvrlDyn_D_Actl_enum, const CamraOvrlDyn_D_Actl_UB_enum &_camraOvrlDyn_D_Actl_UB_enum)
    	{
    		std::get<0>(values_) = _camraOvrlDyn_D_Actl_enum;
    		std::get<1>(values_) = _camraOvrlDyn_D_Actl_UB_enum;
    	}
    	inline const CamraOvrlDyn_D_Actl_enum &getCamraOvrlDyn_D_Actl_enum() const { return std::get<0>(values_); }
    	inline void setCamraOvrlDyn_D_Actl_enum(const CamraOvrlDyn_D_Actl_enum &_value) { std::get<0>(values_) = _value; }
    	inline const CamraOvrlDyn_D_Actl_UB_enum &getCamraOvrlDyn_D_Actl_UB_enum() const { return std::get<1>(values_); }
    	inline void setCamraOvrlDyn_D_Actl_UB_enum(const CamraOvrlDyn_D_Actl_UB_enum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const VehCharacteristicSet2_HS3_sig_1_struct& _other) const {
                return (getCamraOvrlDyn_D_Actl_enum() == _other.getCamraOvrlDyn_D_Actl_enum() && getCamraOvrlDyn_D_Actl_UB_enum() == _other.getCamraOvrlDyn_D_Actl_UB_enum());
        }
    	inline bool operator!=(const VehCharacteristicSet2_HS3_sig_1_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct CamraZoomMan_D_Actl_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unknown = 7,
            En_Invalid = 6,
            En_Zoom_Level_V = 5,
            En_Zoom_Level_IV = 4,
            En_Zoom_Level_III = 3,
            En_Zoom_Level_II = 2,
            En_Zoom_Level_I = 1,
            En_Off = 0
        };
        
        CamraZoomMan_D_Actl_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unknown)) {}
        CamraZoomMan_D_Actl_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unknown):
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Zoom_Level_V):
                case static_cast<int32_t>(Literal::En_Zoom_Level_IV):
                case static_cast<int32_t>(Literal::En_Zoom_Level_III):
                case static_cast<int32_t>(Literal::En_Zoom_Level_II):
                case static_cast<int32_t>(Literal::En_Zoom_Level_I):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CamraZoomMan_D_Actl_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CamraZoomMan_D_Actl_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CamraZoomMan_D_Actl_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CamraZoomMan_D_Actl_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CamraZoomMan_D_Actl_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CamraZoomMan_D_Actl_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CamraZoomMan_D_Actl_UB_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fresh_data = 1,
            En_Unchanged_data = 0
        };
        
        CamraZoomMan_D_Actl_UB_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fresh_data)) {}
        CamraZoomMan_D_Actl_UB_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fresh_data):
                case static_cast<int32_t>(Literal::En_Unchanged_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CamraZoomMan_D_Actl_UB_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CamraZoomMan_D_Actl_UB_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CamraZoomMan_D_Actl_UB_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CamraZoomMan_D_Actl_UB_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CamraZoomMan_D_Actl_UB_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CamraZoomMan_D_Actl_UB_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct VehCharacteristicSet2_HS3_sig_2_struct : CommonAPI::Struct<CamraZoomMan_D_Actl_enum, CamraZoomMan_D_Actl_UB_enum> {
    	
    	VehCharacteristicSet2_HS3_sig_2_struct() {
    	}
    	VehCharacteristicSet2_HS3_sig_2_struct(const CamraZoomMan_D_Actl_enum &_camraZoomMan_D_Actl_enum, const CamraZoomMan_D_Actl_UB_enum &_camraZoomMan_D_Actl_UB_enum)
    	{
    		std::get<0>(values_) = _camraZoomMan_D_Actl_enum;
    		std::get<1>(values_) = _camraZoomMan_D_Actl_UB_enum;
    	}
    	inline const CamraZoomMan_D_Actl_enum &getCamraZoomMan_D_Actl_enum() const { return std::get<0>(values_); }
    	inline void setCamraZoomMan_D_Actl_enum(const CamraZoomMan_D_Actl_enum &_value) { std::get<0>(values_) = _value; }
    	inline const CamraZoomMan_D_Actl_UB_enum &getCamraZoomMan_D_Actl_UB_enum() const { return std::get<1>(values_); }
    	inline void setCamraZoomMan_D_Actl_UB_enum(const CamraZoomMan_D_Actl_UB_enum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const VehCharacteristicSet2_HS3_sig_2_struct& _other) const {
                return (getCamraZoomMan_D_Actl_enum() == _other.getCamraZoomMan_D_Actl_enum() && getCamraZoomMan_D_Actl_UB_enum() == _other.getCamraZoomMan_D_Actl_UB_enum());
        }
    	inline bool operator!=(const VehCharacteristicSet2_HS3_sig_2_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct CamZoomActiveState_UB_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fresh_data = 1,
            En_Unchanged_data = 0
        };
        
        CamZoomActiveState_UB_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fresh_data)) {}
        CamZoomActiveState_UB_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fresh_data):
                case static_cast<int32_t>(Literal::En_Unchanged_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CamZoomActiveState_UB_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CamZoomActiveState_UB_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CamZoomActiveState_UB_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CamZoomActiveState_UB_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CamZoomActiveState_UB_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CamZoomActiveState_UB_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CamZoomActiveState_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Not_Used = 3,
            En_Inactive = 2,
            En_Active = 1,
            En_Invalid = 0
        };
        
        CamZoomActiveState_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Not_Used)) {}
        CamZoomActiveState_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Not_Used):
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CamZoomActiveState_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CamZoomActiveState_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CamZoomActiveState_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CamZoomActiveState_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CamZoomActiveState_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CamZoomActiveState_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct VehCharacteristicSet2_HS3_sig_3_struct : CommonAPI::Struct<CamZoomActiveState_enum, CamZoomActiveState_UB_enum> {
    	
    	VehCharacteristicSet2_HS3_sig_3_struct() {
    	}
    	VehCharacteristicSet2_HS3_sig_3_struct(const CamZoomActiveState_enum &_camZoomActiveState_enum, const CamZoomActiveState_UB_enum &_camZoomActiveState_UB_enum)
    	{
    		std::get<0>(values_) = _camZoomActiveState_enum;
    		std::get<1>(values_) = _camZoomActiveState_UB_enum;
    	}
    	inline const CamZoomActiveState_enum &getCamZoomActiveState_enum() const { return std::get<0>(values_); }
    	inline void setCamZoomActiveState_enum(const CamZoomActiveState_enum &_value) { std::get<0>(values_) = _value; }
    	inline const CamZoomActiveState_UB_enum &getCamZoomActiveState_UB_enum() const { return std::get<1>(values_); }
    	inline void setCamZoomActiveState_UB_enum(const CamZoomActiveState_UB_enum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const VehCharacteristicSet2_HS3_sig_3_struct& _other) const {
                return (getCamZoomActiveState_enum() == _other.getCamZoomActiveState_enum() && getCamZoomActiveState_UB_enum() == _other.getCamZoomActiveState_UB_enum());
        }
    	inline bool operator!=(const VehCharacteristicSet2_HS3_sig_3_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct VehLong2_A_Actl_UB_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fresh_data = 1,
            En_Unchanged_data = 0
        };
        
        VehLong2_A_Actl_UB_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fresh_data)) {}
        VehLong2_A_Actl_UB_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fresh_data):
                case static_cast<int32_t>(Literal::En_Unchanged_data):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VehLong2_A_Actl_UB_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VehLong2_A_Actl_UB_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VehLong2_A_Actl_UB_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VehLong2_A_Actl_UB_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VehLong2_A_Actl_UB_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VehLong2_A_Actl_UB_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VehLong2_A_Actl_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Faulty = 8191,
            En_NoDataExists = 8190
        };
        
        VehLong2_A_Actl_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Faulty)) {}
        VehLong2_A_Actl_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Faulty):
                case static_cast<int32_t>(Literal::En_NoDataExists):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VehLong2_A_Actl_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VehLong2_A_Actl_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VehLong2_A_Actl_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VehLong2_A_Actl_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VehLong2_A_Actl_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VehLong2_A_Actl_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct VehCharacteristicSet2_HS3_sig_4_struct : CommonAPI::Struct<VehLong2_A_Actl_enum, VehLong2_A_Actl_UB_enum> {
    	
    	VehCharacteristicSet2_HS3_sig_4_struct() {
    	}
    	VehCharacteristicSet2_HS3_sig_4_struct(const VehLong2_A_Actl_enum &_vehLong2_A_Actl_enum, const VehLong2_A_Actl_UB_enum &_vehLong2_A_Actl_UB_enum)
    	{
    		std::get<0>(values_) = _vehLong2_A_Actl_enum;
    		std::get<1>(values_) = _vehLong2_A_Actl_UB_enum;
    	}
    	inline const VehLong2_A_Actl_enum &getVehLong2_A_Actl_enum() const { return std::get<0>(values_); }
    	inline void setVehLong2_A_Actl_enum(const VehLong2_A_Actl_enum &_value) { std::get<0>(values_) = _value; }
    	inline const VehLong2_A_Actl_UB_enum &getVehLong2_A_Actl_UB_enum() const { return std::get<1>(values_); }
    	inline void setVehLong2_A_Actl_UB_enum(const VehLong2_A_Actl_UB_enum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const VehCharacteristicSet2_HS3_sig_4_struct& _other) const {
                return (getVehLong2_A_Actl_enum() == _other.getVehLong2_A_Actl_enum() && getVehLong2_A_Actl_UB_enum() == _other.getVehLong2_A_Actl_UB_enum());
        }
    	inline bool operator!=(const VehCharacteristicSet2_HS3_sig_4_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct PAC_Send_Signals_sig_0_struct : CommonAPI::Struct<CamraViewSplit_D_Actl_enum, CamraViewSplit_D_Actl_UB_enum> {
    	
    	PAC_Send_Signals_sig_0_struct() {
    	}
    	PAC_Send_Signals_sig_0_struct(const CamraViewSplit_D_Actl_enum &_camraViewSplit_D_Actl_enum, const CamraViewSplit_D_Actl_UB_enum &_camraViewSplit_D_Actl_UB_enum)
    	{
    		std::get<0>(values_) = _camraViewSplit_D_Actl_enum;
    		std::get<1>(values_) = _camraViewSplit_D_Actl_UB_enum;
    	}
    	inline const CamraViewSplit_D_Actl_enum &getCamraViewSplit_D_Actl_enum() const { return std::get<0>(values_); }
    	inline void setCamraViewSplit_D_Actl_enum(const CamraViewSplit_D_Actl_enum &_value) { std::get<0>(values_) = _value; }
    	inline const CamraViewSplit_D_Actl_UB_enum &getCamraViewSplit_D_Actl_UB_enum() const { return std::get<1>(values_); }
    	inline void setCamraViewSplit_D_Actl_UB_enum(const CamraViewSplit_D_Actl_UB_enum &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const PAC_Send_Signals_sig_0_struct& _other) const {
                return (getCamraViewSplit_D_Actl_enum() == _other.getCamraViewSplit_D_Actl_enum() && getCamraViewSplit_D_Actl_UB_enum() == _other.getCamraViewSplit_D_Actl_UB_enum());
        }
    	inline bool operator!=(const PAC_Send_Signals_sig_0_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.harman.ford.camerainfo_types";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct camerainfo_types

} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for CamraViewSplit_B_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::camerainfo_types::CamraViewSplit_B_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::camerainfo_types::CamraViewSplit_B_Rq_enum& camraViewSplit_B_Rq_enum) const {
            return static_cast<int32_t>(camraViewSplit_B_Rq_enum);
        }
    };
    //Hash for CamraOvrlStat_D_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::camerainfo_types::CamraOvrlStat_D_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::camerainfo_types::CamraOvrlStat_D_Rq_enum& camraOvrlStat_D_Rq_enum) const {
            return static_cast<int32_t>(camraOvrlStat_D_Rq_enum);
        }
    };
    //Hash for CamraOvrlDyn_D_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::camerainfo_types::CamraOvrlDyn_D_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::camerainfo_types::CamraOvrlDyn_D_Rq_enum& camraOvrlDyn_D_Rq_enum) const {
            return static_cast<int32_t>(camraOvrlDyn_D_Rq_enum);
        }
    };
    //Hash for CamraOvrlTow_D_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::camerainfo_types::CamraOvrlTow_D_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::camerainfo_types::CamraOvrlTow_D_Rq_enum& camraOvrlTow_D_Rq_enum) const {
            return static_cast<int32_t>(camraOvrlTow_D_Rq_enum);
        }
    };
    //Hash for CamraZoomMan_D_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::camerainfo_types::CamraZoomMan_D_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::camerainfo_types::CamraZoomMan_D_Rq_enum& camraZoomMan_D_Rq_enum) const {
            return static_cast<int32_t>(camraZoomMan_D_Rq_enum);
        }
    };
    //Hash for CamraViewSplit_D_Actl_enum
    template<>
    struct hash<::v0::org::harman::ford::camerainfo_types::CamraViewSplit_D_Actl_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::camerainfo_types::CamraViewSplit_D_Actl_enum& camraViewSplit_D_Actl_enum) const {
            return static_cast<int32_t>(camraViewSplit_D_Actl_enum);
        }
    };
    //Hash for CamraViewSplit_D_Actl_UB_enum
    template<>
    struct hash<::v0::org::harman::ford::camerainfo_types::CamraViewSplit_D_Actl_UB_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::camerainfo_types::CamraViewSplit_D_Actl_UB_enum& camraViewSplit_D_Actl_UB_enum) const {
            return static_cast<int32_t>(camraViewSplit_D_Actl_UB_enum);
        }
    };
    //Hash for CamPDCGuidStat_UB_enum
    template<>
    struct hash<::v0::org::harman::ford::camerainfo_types::CamPDCGuidStat_UB_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::camerainfo_types::CamPDCGuidStat_UB_enum& camPDCGuidStat_UB_enum) const {
            return static_cast<int32_t>(camPDCGuidStat_UB_enum);
        }
    };
    //Hash for CamraOvrlDyn_D_Actl_enum
    template<>
    struct hash<::v0::org::harman::ford::camerainfo_types::CamraOvrlDyn_D_Actl_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::camerainfo_types::CamraOvrlDyn_D_Actl_enum& camraOvrlDyn_D_Actl_enum) const {
            return static_cast<int32_t>(camraOvrlDyn_D_Actl_enum);
        }
    };
    //Hash for CamraZoomMan_D_Actl_enum
    template<>
    struct hash<::v0::org::harman::ford::camerainfo_types::CamraZoomMan_D_Actl_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::camerainfo_types::CamraZoomMan_D_Actl_enum& camraZoomMan_D_Actl_enum) const {
            return static_cast<int32_t>(camraZoomMan_D_Actl_enum);
        }
    };
    //Hash for CamPDCGuidStat_enum
    template<>
    struct hash<::v0::org::harman::ford::camerainfo_types::CamPDCGuidStat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::camerainfo_types::CamPDCGuidStat_enum& camPDCGuidStat_enum) const {
            return static_cast<int32_t>(camPDCGuidStat_enum);
        }
    };
    //Hash for CamraOvrlDyn_D_Actl_UB_enum
    template<>
    struct hash<::v0::org::harman::ford::camerainfo_types::CamraOvrlDyn_D_Actl_UB_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::camerainfo_types::CamraOvrlDyn_D_Actl_UB_enum& camraOvrlDyn_D_Actl_UB_enum) const {
            return static_cast<int32_t>(camraOvrlDyn_D_Actl_UB_enum);
        }
    };
    //Hash for CamraOvrlStat_D_Actl_UB_enum
    template<>
    struct hash<::v0::org::harman::ford::camerainfo_types::CamraOvrlStat_D_Actl_UB_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::camerainfo_types::CamraOvrlStat_D_Actl_UB_enum& camraOvrlStat_D_Actl_UB_enum) const {
            return static_cast<int32_t>(camraOvrlStat_D_Actl_UB_enum);
        }
    };
    //Hash for CamraZoomMan_D_Actl_UB_enum
    template<>
    struct hash<::v0::org::harman::ford::camerainfo_types::CamraZoomMan_D_Actl_UB_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::camerainfo_types::CamraZoomMan_D_Actl_UB_enum& camraZoomMan_D_Actl_UB_enum) const {
            return static_cast<int32_t>(camraZoomMan_D_Actl_UB_enum);
        }
    };
    //Hash for CamZoomActiveState_UB_enum
    template<>
    struct hash<::v0::org::harman::ford::camerainfo_types::CamZoomActiveState_UB_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::camerainfo_types::CamZoomActiveState_UB_enum& camZoomActiveState_UB_enum) const {
            return static_cast<int32_t>(camZoomActiveState_UB_enum);
        }
    };
    //Hash for CamZoomActiveState_enum
    template<>
    struct hash<::v0::org::harman::ford::camerainfo_types::CamZoomActiveState_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::camerainfo_types::CamZoomActiveState_enum& camZoomActiveState_enum) const {
            return static_cast<int32_t>(camZoomActiveState_enum);
        }
    };
    //Hash for CamraOvrlStat_D_Actl_enum
    template<>
    struct hash<::v0::org::harman::ford::camerainfo_types::CamraOvrlStat_D_Actl_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::camerainfo_types::CamraOvrlStat_D_Actl_enum& camraOvrlStat_D_Actl_enum) const {
            return static_cast<int32_t>(camraOvrlStat_D_Actl_enum);
        }
    };
    //Hash for VehLong2_A_Actl_UB_enum
    template<>
    struct hash<::v0::org::harman::ford::camerainfo_types::VehLong2_A_Actl_UB_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::camerainfo_types::VehLong2_A_Actl_UB_enum& vehLong2_A_Actl_UB_enum) const {
            return static_cast<int32_t>(vehLong2_A_Actl_UB_enum);
        }
    };
    //Hash for VehLong2_A_Actl_enum
    template<>
    struct hash<::v0::org::harman::ford::camerainfo_types::VehLong2_A_Actl_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::camerainfo_types::VehLong2_A_Actl_enum& vehLong2_A_Actl_enum) const {
            return static_cast<int32_t>(vehLong2_A_Actl_enum);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_FORD_camerainfo_types_HPP_

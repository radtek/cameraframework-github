/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_ORG_HARMAN_FORD_emergassist_types_HPP_
#define V0_ORG_HARMAN_FORD_emergassist_types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace ford {

struct emergassist_types {
    
    struct EmgcyAsstActv_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_ConfiguredOff = 3,
            En_Active = 2,
            En_Inactive = 1,
            En_Null = 0
        };
        
        EmgcyAsstActv_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_ConfiguredOff)) {}
        EmgcyAsstActv_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_ConfiguredOff):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EmgcyAsstActv_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EmgcyAsstActv_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EmgcyAsstActv_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EmgcyAsstActv_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EmgcyAsstActv_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EmgcyAsstActv_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsRw1DrvBckl_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotBelted = 2,
            En_Belted = 1,
            En_NoEvent = 0
        };
        
        VedsRw1DrvBckl_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsRw1DrvBckl_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotBelted):
                case static_cast<int32_t>(Literal::En_Belted):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsRw1DrvBckl_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsRw1DrvBckl_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsRw1DrvBckl_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsRw1DrvBckl_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsRw1DrvBckl_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsRw1DrvBckl_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsRw1PasBckl_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotBelted = 2,
            En_Belted = 1,
            En_NoEvent = 0
        };
        
        VedsRw1PasBckl_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsRw1PasBckl_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotBelted):
                case static_cast<int32_t>(Literal::En_Belted):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsRw1PasBckl_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsRw1PasBckl_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsRw1PasBckl_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsRw1PasBckl_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsRw1PasBckl_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsRw1PasBckl_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsRw1PasChld_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_ChildNotDetected = 2,
            En_ChildDetected = 1,
            En_NoEvent = 0
        };
        
        VedsRw1PasChld_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsRw1PasChld_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_ChildNotDetected):
                case static_cast<int32_t>(Literal::En_ChildDetected):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsRw1PasChld_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsRw1PasChld_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsRw1PasChld_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsRw1PasChld_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsRw1PasChld_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsRw1PasChld_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsRw2dBckl_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotBelted = 2,
            En_Belted = 1,
            En_NoEvent = 0
        };
        
        VedsRw2dBckl_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsRw2dBckl_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotBelted):
                case static_cast<int32_t>(Literal::En_Belted):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsRw2dBckl_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsRw2dBckl_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsRw2dBckl_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsRw2dBckl_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsRw2dBckl_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsRw2dBckl_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsRw2mBckl_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotBelted = 2,
            En_Belted = 1,
            En_NoEvent = 0
        };
        
        VedsRw2mBckl_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsRw2mBckl_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotBelted):
                case static_cast<int32_t>(Literal::En_Belted):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsRw2mBckl_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsRw2mBckl_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsRw2mBckl_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsRw2mBckl_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsRw2mBckl_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsRw2mBckl_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsRw2pBckl_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotBelted = 2,
            En_Belted = 1,
            En_NoEvent = 0
        };
        
        VedsRw2pBckl_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsRw2pBckl_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotBelted):
                case static_cast<int32_t>(Literal::En_Belted):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsRw2pBckl_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsRw2pBckl_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsRw2pBckl_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsRw2pBckl_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsRw2pBckl_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsRw2pBckl_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsRw3dBckl_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotBelted = 2,
            En_Belted = 1,
            En_NoEvent = 0
        };
        
        VedsRw3dBckl_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsRw3dBckl_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotBelted):
                case static_cast<int32_t>(Literal::En_Belted):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsRw3dBckl_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsRw3dBckl_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsRw3dBckl_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsRw3dBckl_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsRw3dBckl_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsRw3dBckl_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsRw3mBckl_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotBelted = 2,
            En_Belted = 1,
            En_NoEvent = 0
        };
        
        VedsRw3mBckl_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsRw3mBckl_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotBelted):
                case static_cast<int32_t>(Literal::En_Belted):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsRw3mBckl_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsRw3mBckl_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsRw3mBckl_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsRw3mBckl_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsRw3mBckl_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsRw3mBckl_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsRw2dRib_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotDeployed = 2,
            En_Deployed = 1,
            En_NoEvent = 0
        };
        
        VedsRw2dRib_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsRw2dRib_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotDeployed):
                case static_cast<int32_t>(Literal::En_Deployed):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsRw2dRib_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsRw2dRib_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsRw2dRib_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsRw2dRib_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsRw2dRib_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsRw2dRib_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsRw3pBckl_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotBelted = 2,
            En_Belted = 1,
            En_NoEvent = 0
        };
        
        VedsRw3pBckl_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsRw3pBckl_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotBelted):
                case static_cast<int32_t>(Literal::En_Belted):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsRw3pBckl_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsRw3pBckl_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsRw3pBckl_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsRw3pBckl_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsRw3pBckl_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsRw3pBckl_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsRw1mBelt_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotDeployed = 2,
            En_Deployed = 1,
            En_NoEvent = 0
        };
        
        VedsRw1mBelt_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsRw1mBelt_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotDeployed):
                case static_cast<int32_t>(Literal::En_Deployed):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsRw1mBelt_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsRw1mBelt_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsRw1mBelt_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsRw1mBelt_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsRw1mBelt_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsRw1mBelt_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsRw2pRib_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotDeployed = 2,
            En_Deployed = 1,
            En_NoEvent = 0
        };
        
        VedsRw2pRib_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsRw2pRib_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotDeployed):
                case static_cast<int32_t>(Literal::En_Deployed):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsRw2pRib_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsRw2pRib_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsRw2pRib_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsRw2pRib_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsRw2pRib_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsRw2pRib_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsPasKneeBag_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotDeployed = 2,
            En_Deployed = 1,
            En_NoEvent = 0
        };
        
        VedsPasKneeBag_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsPasKneeBag_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotDeployed):
                case static_cast<int32_t>(Literal::En_Deployed):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsPasKneeBag_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsPasKneeBag_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsPasKneeBag_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsPasKneeBag_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsPasKneeBag_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsPasKneeBag_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsRw1mBckl_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotBelted = 2,
            En_Belted = 1,
            En_NoEvent = 0
        };
        
        VedsRw1mBckl_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsRw1mBckl_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotBelted):
                case static_cast<int32_t>(Literal::En_Belted):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsRw1mBckl_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsRw1mBckl_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsRw1mBckl_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsRw1mBckl_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsRw1mBckl_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsRw1mBckl_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsRw3pRib_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotDeployed = 2,
            En_Deployed = 1,
            En_NoEvent = 0
        };
        
        VedsRw3pRib_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsRw3pRib_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotDeployed):
                case static_cast<int32_t>(Literal::En_Deployed):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsRw3pRib_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsRw3pRib_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsRw3pRib_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsRw3pRib_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsRw3pRib_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsRw3pRib_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsRw3dRib_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotDeployed = 2,
            En_Deployed = 1,
            En_NoEvent = 0
        };
        
        VedsRw3dRib_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsRw3dRib_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotDeployed):
                case static_cast<int32_t>(Literal::En_Deployed):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsRw3dRib_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsRw3dRib_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsRw3dRib_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsRw3dRib_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsRw3dRib_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsRw3dRib_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct VehEmergencyData2_HS3_struct : CommonAPI::Struct<VedsRw1DrvBckl_D_Ltchd_enum, VedsRw1PasBckl_D_Ltchd_enum, VedsRw1PasChld_D_Ltchd_enum, VedsRw2dBckl_D_Ltchd_enum, VedsRw2mBckl_D_Ltchd_enum, VedsRw2pBckl_D_Ltchd_enum, VedsRw3dBckl_D_Ltchd_enum, VedsRw3mBckl_D_Ltchd_enum, VedsRw2dRib_D_Ltchd_enum, VedsRw3pBckl_D_Ltchd_enum, VedsRw1mBelt_D_Ltchd_enum, VedsRw2pRib_D_Ltchd_enum, VedsPasKneeBag_D_Ltchd_enum, VedsRw1mBckl_D_Ltchd_enum, VedsRw3pRib_D_Ltchd_enum, VedsRw3dRib_D_Ltchd_enum, uint8_t> {
    	
    	VehEmergencyData2_HS3_struct() {
    	}
    	VehEmergencyData2_HS3_struct(const VedsRw1DrvBckl_D_Ltchd_enum &_vedsRw1DrvBckl_D_Ltchd_enum, const VedsRw1PasBckl_D_Ltchd_enum &_vedsRw1PasBckl_D_Ltchd_enum, const VedsRw1PasChld_D_Ltchd_enum &_vedsRw1PasChld_D_Ltchd_enum, const VedsRw2dBckl_D_Ltchd_enum &_vedsRw2dBckl_D_Ltchd_enum, const VedsRw2mBckl_D_Ltchd_enum &_vedsRw2mBckl_D_Ltchd_enum, const VedsRw2pBckl_D_Ltchd_enum &_vedsRw2pBckl_D_Ltchd_enum, const VedsRw3dBckl_D_Ltchd_enum &_vedsRw3dBckl_D_Ltchd_enum, const VedsRw3mBckl_D_Ltchd_enum &_vedsRw3mBckl_D_Ltchd_enum, const VedsRw2dRib_D_Ltchd_enum &_vedsRw2dRib_D_Ltchd_enum, const VedsRw3pBckl_D_Ltchd_enum &_vedsRw3pBckl_D_Ltchd_enum, const VedsRw1mBelt_D_Ltchd_enum &_vedsRw1mBelt_D_Ltchd_enum, const VedsRw2pRib_D_Ltchd_enum &_vedsRw2pRib_D_Ltchd_enum, const VedsPasKneeBag_D_Ltchd_enum &_vedsPasKneeBag_D_Ltchd_enum, const VedsRw1mBckl_D_Ltchd_enum &_vedsRw1mBckl_D_Ltchd_enum, const VedsRw3pRib_D_Ltchd_enum &_vedsRw3pRib_D_Ltchd_enum, const VedsRw3dRib_D_Ltchd_enum &_vedsRw3dRib_D_Ltchd_enum, const uint8_t &_status)
    	{
    		std::get<0>(values_) = _vedsRw1DrvBckl_D_Ltchd_enum;
    		std::get<1>(values_) = _vedsRw1PasBckl_D_Ltchd_enum;
    		std::get<2>(values_) = _vedsRw1PasChld_D_Ltchd_enum;
    		std::get<3>(values_) = _vedsRw2dBckl_D_Ltchd_enum;
    		std::get<4>(values_) = _vedsRw2mBckl_D_Ltchd_enum;
    		std::get<5>(values_) = _vedsRw2pBckl_D_Ltchd_enum;
    		std::get<6>(values_) = _vedsRw3dBckl_D_Ltchd_enum;
    		std::get<7>(values_) = _vedsRw3mBckl_D_Ltchd_enum;
    		std::get<8>(values_) = _vedsRw2dRib_D_Ltchd_enum;
    		std::get<9>(values_) = _vedsRw3pBckl_D_Ltchd_enum;
    		std::get<10>(values_) = _vedsRw1mBelt_D_Ltchd_enum;
    		std::get<11>(values_) = _vedsRw2pRib_D_Ltchd_enum;
    		std::get<12>(values_) = _vedsPasKneeBag_D_Ltchd_enum;
    		std::get<13>(values_) = _vedsRw1mBckl_D_Ltchd_enum;
    		std::get<14>(values_) = _vedsRw3pRib_D_Ltchd_enum;
    		std::get<15>(values_) = _vedsRw3dRib_D_Ltchd_enum;
    		std::get<16>(values_) = _status;
    	}
    	inline const VedsRw1DrvBckl_D_Ltchd_enum &getVedsRw1DrvBckl_D_Ltchd_enum() const { return std::get<0>(values_); }
    	inline void setVedsRw1DrvBckl_D_Ltchd_enum(const VedsRw1DrvBckl_D_Ltchd_enum &_value) { std::get<0>(values_) = _value; }
    	inline const VedsRw1PasBckl_D_Ltchd_enum &getVedsRw1PasBckl_D_Ltchd_enum() const { return std::get<1>(values_); }
    	inline void setVedsRw1PasBckl_D_Ltchd_enum(const VedsRw1PasBckl_D_Ltchd_enum &_value) { std::get<1>(values_) = _value; }
    	inline const VedsRw1PasChld_D_Ltchd_enum &getVedsRw1PasChld_D_Ltchd_enum() const { return std::get<2>(values_); }
    	inline void setVedsRw1PasChld_D_Ltchd_enum(const VedsRw1PasChld_D_Ltchd_enum &_value) { std::get<2>(values_) = _value; }
    	inline const VedsRw2dBckl_D_Ltchd_enum &getVedsRw2dBckl_D_Ltchd_enum() const { return std::get<3>(values_); }
    	inline void setVedsRw2dBckl_D_Ltchd_enum(const VedsRw2dBckl_D_Ltchd_enum &_value) { std::get<3>(values_) = _value; }
    	inline const VedsRw2mBckl_D_Ltchd_enum &getVedsRw2mBckl_D_Ltchd_enum() const { return std::get<4>(values_); }
    	inline void setVedsRw2mBckl_D_Ltchd_enum(const VedsRw2mBckl_D_Ltchd_enum &_value) { std::get<4>(values_) = _value; }
    	inline const VedsRw2pBckl_D_Ltchd_enum &getVedsRw2pBckl_D_Ltchd_enum() const { return std::get<5>(values_); }
    	inline void setVedsRw2pBckl_D_Ltchd_enum(const VedsRw2pBckl_D_Ltchd_enum &_value) { std::get<5>(values_) = _value; }
    	inline const VedsRw3dBckl_D_Ltchd_enum &getVedsRw3dBckl_D_Ltchd_enum() const { return std::get<6>(values_); }
    	inline void setVedsRw3dBckl_D_Ltchd_enum(const VedsRw3dBckl_D_Ltchd_enum &_value) { std::get<6>(values_) = _value; }
    	inline const VedsRw3mBckl_D_Ltchd_enum &getVedsRw3mBckl_D_Ltchd_enum() const { return std::get<7>(values_); }
    	inline void setVedsRw3mBckl_D_Ltchd_enum(const VedsRw3mBckl_D_Ltchd_enum &_value) { std::get<7>(values_) = _value; }
    	inline const VedsRw2dRib_D_Ltchd_enum &getVedsRw2dRib_D_Ltchd_enum() const { return std::get<8>(values_); }
    	inline void setVedsRw2dRib_D_Ltchd_enum(const VedsRw2dRib_D_Ltchd_enum &_value) { std::get<8>(values_) = _value; }
    	inline const VedsRw3pBckl_D_Ltchd_enum &getVedsRw3pBckl_D_Ltchd_enum() const { return std::get<9>(values_); }
    	inline void setVedsRw3pBckl_D_Ltchd_enum(const VedsRw3pBckl_D_Ltchd_enum &_value) { std::get<9>(values_) = _value; }
    	inline const VedsRw1mBelt_D_Ltchd_enum &getVedsRw1mBelt_D_Ltchd_enum() const { return std::get<10>(values_); }
    	inline void setVedsRw1mBelt_D_Ltchd_enum(const VedsRw1mBelt_D_Ltchd_enum &_value) { std::get<10>(values_) = _value; }
    	inline const VedsRw2pRib_D_Ltchd_enum &getVedsRw2pRib_D_Ltchd_enum() const { return std::get<11>(values_); }
    	inline void setVedsRw2pRib_D_Ltchd_enum(const VedsRw2pRib_D_Ltchd_enum &_value) { std::get<11>(values_) = _value; }
    	inline const VedsPasKneeBag_D_Ltchd_enum &getVedsPasKneeBag_D_Ltchd_enum() const { return std::get<12>(values_); }
    	inline void setVedsPasKneeBag_D_Ltchd_enum(const VedsPasKneeBag_D_Ltchd_enum &_value) { std::get<12>(values_) = _value; }
    	inline const VedsRw1mBckl_D_Ltchd_enum &getVedsRw1mBckl_D_Ltchd_enum() const { return std::get<13>(values_); }
    	inline void setVedsRw1mBckl_D_Ltchd_enum(const VedsRw1mBckl_D_Ltchd_enum &_value) { std::get<13>(values_) = _value; }
    	inline const VedsRw3pRib_D_Ltchd_enum &getVedsRw3pRib_D_Ltchd_enum() const { return std::get<14>(values_); }
    	inline void setVedsRw3pRib_D_Ltchd_enum(const VedsRw3pRib_D_Ltchd_enum &_value) { std::get<14>(values_) = _value; }
    	inline const VedsRw3dRib_D_Ltchd_enum &getVedsRw3dRib_D_Ltchd_enum() const { return std::get<15>(values_); }
    	inline void setVedsRw3dRib_D_Ltchd_enum(const VedsRw3dRib_D_Ltchd_enum &_value) { std::get<15>(values_) = _value; }
    	inline const uint8_t &getStatus() const { return std::get<16>(values_); }
    	inline void setStatus(const uint8_t &_value) { std::get<16>(values_) = _value; }
    	inline bool operator==(const VehEmergencyData2_HS3_struct& _other) const {
                return (getVedsRw1DrvBckl_D_Ltchd_enum() == _other.getVedsRw1DrvBckl_D_Ltchd_enum() && getVedsRw1PasBckl_D_Ltchd_enum() == _other.getVedsRw1PasBckl_D_Ltchd_enum() && getVedsRw1PasChld_D_Ltchd_enum() == _other.getVedsRw1PasChld_D_Ltchd_enum() && getVedsRw2dBckl_D_Ltchd_enum() == _other.getVedsRw2dBckl_D_Ltchd_enum() && getVedsRw2mBckl_D_Ltchd_enum() == _other.getVedsRw2mBckl_D_Ltchd_enum() && getVedsRw2pBckl_D_Ltchd_enum() == _other.getVedsRw2pBckl_D_Ltchd_enum() && getVedsRw3dBckl_D_Ltchd_enum() == _other.getVedsRw3dBckl_D_Ltchd_enum() && getVedsRw3mBckl_D_Ltchd_enum() == _other.getVedsRw3mBckl_D_Ltchd_enum() && getVedsRw2dRib_D_Ltchd_enum() == _other.getVedsRw2dRib_D_Ltchd_enum() && getVedsRw3pBckl_D_Ltchd_enum() == _other.getVedsRw3pBckl_D_Ltchd_enum() && getVedsRw1mBelt_D_Ltchd_enum() == _other.getVedsRw1mBelt_D_Ltchd_enum() && getVedsRw2pRib_D_Ltchd_enum() == _other.getVedsRw2pRib_D_Ltchd_enum() && getVedsPasKneeBag_D_Ltchd_enum() == _other.getVedsPasKneeBag_D_Ltchd_enum() && getVedsRw1mBckl_D_Ltchd_enum() == _other.getVedsRw1mBckl_D_Ltchd_enum() && getVedsRw3pRib_D_Ltchd_enum() == _other.getVedsRw3pRib_D_Ltchd_enum() && getVedsRw3dRib_D_Ltchd_enum() == _other.getVedsRw3dRib_D_Ltchd_enum() && getStatus() == _other.getStatus());
        }
    	inline bool operator!=(const VehEmergencyData2_HS3_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct MyKey_e911Override_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_On = 2,
            En_Off = 1,
            En_No_Data_Exists = 0
        };
        
        MyKey_e911Override_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_On)) {}
        MyKey_e911Override_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_On):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_No_Data_Exists):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MyKey_e911Override_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MyKey_e911Override_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MyKey_e911Override_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MyKey_e911Override_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MyKey_e911Override_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MyKey_e911Override_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct Mc_Send_Signals_3_struct : CommonAPI::Struct<MyKey_e911Override_St_enum> {
    	
    	Mc_Send_Signals_3_struct() {
    	}
    	Mc_Send_Signals_3_struct(const MyKey_e911Override_St_enum &_myKey_e911Override_St_enum)
    	{
    		std::get<0>(values_) = _myKey_e911Override_St_enum;
    	}
    	inline const MyKey_e911Override_St_enum &getMyKey_e911Override_St_enum() const { return std::get<0>(values_); }
    	inline void setMyKey_e911Override_St_enum(const MyKey_e911Override_St_enum &_value) { std::get<0>(values_) = _value; }
    	inline bool operator==(const Mc_Send_Signals_3_struct& _other) const {
                return (getMyKey_e911Override_St_enum() == _other.getMyKey_e911Override_St_enum());
        }
    	inline bool operator!=(const Mc_Send_Signals_3_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct VedsDrvBag_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotDeployed = 2,
            En_Deployed = 1,
            En_NoEvent = 0
        };
        
        VedsDrvBag_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsDrvBag_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotDeployed):
                case static_cast<int32_t>(Literal::En_Deployed):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsDrvBag_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsDrvBag_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsDrvBag_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsDrvBag_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsDrvBag_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsDrvBag_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsDrvBelt_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotDeployed = 2,
            En_Deployed = 1,
            En_NoEvent = 0
        };
        
        VedsDrvBelt_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsDrvBelt_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotDeployed):
                case static_cast<int32_t>(Literal::En_Deployed):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsDrvBelt_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsDrvBelt_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsDrvBelt_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsDrvBelt_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsDrvBelt_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsDrvBelt_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsDrvCrtnBag_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotDeployed = 2,
            En_Deployed = 1,
            En_NoEvent = 0
        };
        
        VedsDrvCrtnBag_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsDrvCrtnBag_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotDeployed):
                case static_cast<int32_t>(Literal::En_Deployed):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsDrvCrtnBag_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsDrvCrtnBag_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsDrvCrtnBag_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsDrvCrtnBag_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsDrvCrtnBag_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsDrvCrtnBag_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsDrvSideBag_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotDeployed = 2,
            En_Deployed = 1,
            En_NoEvent = 0
        };
        
        VedsDrvSideBag_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsDrvSideBag_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotDeployed):
                case static_cast<int32_t>(Literal::En_Deployed):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsDrvSideBag_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsDrvSideBag_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsDrvSideBag_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsDrvSideBag_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsDrvSideBag_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsDrvSideBag_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsEvntRoll_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_Yes = 2,
            En_No = 1,
            En_NoEvent = 0
        };
        
        VedsEvntRoll_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsEvntRoll_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_Yes):
                case static_cast<int32_t>(Literal::En_No):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsEvntRoll_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsEvntRoll_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsEvntRoll_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsEvntRoll_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsEvntRoll_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsEvntRoll_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsEvntType_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused = 5,
            En_Rollover = 4,
            En_Rear = 3,
            En_Side = 2,
            En_Frontal = 1,
            En_NoEvent = 0
        };
        
        VedsEvntType_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsEvntType_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused):
                case static_cast<int32_t>(Literal::En_Rollover):
                case static_cast<int32_t>(Literal::En_Rear):
                case static_cast<int32_t>(Literal::En_Side):
                case static_cast<int32_t>(Literal::En_Frontal):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsEvntType_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsEvntType_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsEvntType_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsEvntType_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsEvntType_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsEvntType_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsMaxDeltaV_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 255,
            En_NotSupported = 254,
            En_NoEvent = 0
        };
        
        VedsMaxDeltaV_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsMaxDeltaV_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsMaxDeltaV_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsMaxDeltaV_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsMaxDeltaV_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsMaxDeltaV_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsMaxDeltaV_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsMaxDeltaV_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsMultiEvnt_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_Yes = 2,
            En_No = 1,
            En_NoEvent = 0
        };
        
        VedsMultiEvnt_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsMultiEvnt_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_Yes):
                case static_cast<int32_t>(Literal::En_No):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsMultiEvnt_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsMultiEvnt_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsMultiEvnt_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsMultiEvnt_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsMultiEvnt_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsMultiEvnt_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsPasBag_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotDeployed = 2,
            En_Deployed = 1,
            En_NoEvent = 0
        };
        
        VedsPasBag_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsPasBag_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotDeployed):
                case static_cast<int32_t>(Literal::En_Deployed):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsPasBag_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsPasBag_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsPasBag_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsPasBag_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsPasBag_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsPasBag_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsPasBelt_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotDeployed = 2,
            En_Deployed = 1,
            En_NoEvent = 0
        };
        
        VedsPasBelt_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsPasBelt_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotDeployed):
                case static_cast<int32_t>(Literal::En_Deployed):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsPasBelt_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsPasBelt_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsPasBelt_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsPasBelt_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsPasBelt_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsPasBelt_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsPasCrtnBag_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotDeployed = 2,
            En_Deployed = 1,
            En_NoEvent = 0
        };
        
        VedsPasCrtnBag_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsPasCrtnBag_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotDeployed):
                case static_cast<int32_t>(Literal::En_Deployed):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsPasCrtnBag_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsPasCrtnBag_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsPasCrtnBag_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsPasCrtnBag_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsPasCrtnBag_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsPasCrtnBag_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsPasSideBag_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotDeployed = 2,
            En_Deployed = 1,
            En_NoEvent = 0
        };
        
        VedsPasSideBag_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsPasSideBag_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotDeployed):
                case static_cast<int32_t>(Literal::En_Deployed):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsPasSideBag_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsPasSideBag_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsPasSideBag_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsPasSideBag_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsPasSideBag_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsPasSideBag_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VedsDrvKneeBag_D_Ltchd_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Fault = 7,
            En_NotSupported = 6,
            En_Unused_3 = 5,
            En_Unused_2 = 4,
            En_Unused_1 = 3,
            En_NotDeployed = 2,
            En_Deployed = 1,
            En_NoEvent = 0
        };
        
        VedsDrvKneeBag_D_Ltchd_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Fault)) {}
        VedsDrvKneeBag_D_Ltchd_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Fault):
                case static_cast<int32_t>(Literal::En_NotSupported):
                case static_cast<int32_t>(Literal::En_Unused_3):
                case static_cast<int32_t>(Literal::En_Unused_2):
                case static_cast<int32_t>(Literal::En_Unused_1):
                case static_cast<int32_t>(Literal::En_NotDeployed):
                case static_cast<int32_t>(Literal::En_Deployed):
                case static_cast<int32_t>(Literal::En_NoEvent):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VedsDrvKneeBag_D_Ltchd_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VedsDrvKneeBag_D_Ltchd_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VedsDrvKneeBag_D_Ltchd_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VedsDrvKneeBag_D_Ltchd_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VedsDrvKneeBag_D_Ltchd_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VedsDrvKneeBag_D_Ltchd_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct VehEmergencyData1_HS3_struct : CommonAPI::Struct<VedsDrvBag_D_Ltchd_enum, VedsDrvBelt_D_Ltchd_enum, VedsDrvCrtnBag_D_Ltchd_enum, VedsDrvSideBag_D_Ltchd_enum, VedsEvntRoll_D_Ltchd_enum, VedsEvntType_D_Ltchd_enum, VedsMaxDeltaV_D_Ltchd_enum, VedsMultiEvnt_D_Ltchd_enum, VedsPasBag_D_Ltchd_enum, VedsPasBelt_D_Ltchd_enum, VedsPasCrtnBag_D_Ltchd_enum, VedsPasSideBag_D_Ltchd_enum, VedsDrvKneeBag_D_Ltchd_enum, uint8_t> {
    	
    	VehEmergencyData1_HS3_struct() {
    	}
    	VehEmergencyData1_HS3_struct(const VedsDrvBag_D_Ltchd_enum &_vedsDrvBag_D_Ltchd_enum, const VedsDrvBelt_D_Ltchd_enum &_vedsDrvBelt_D_Ltchd_enum, const VedsDrvCrtnBag_D_Ltchd_enum &_vedsDrvCrtnBag_D_Ltchd_enum, const VedsDrvSideBag_D_Ltchd_enum &_vedsDrvSideBag_D_Ltchd_enum, const VedsEvntRoll_D_Ltchd_enum &_vedsEvntRoll_D_Ltchd_enum, const VedsEvntType_D_Ltchd_enum &_vedsEvntType_D_Ltchd_enum, const VedsMaxDeltaV_D_Ltchd_enum &_vedsMaxDeltaV_D_Ltchd_enum, const VedsMultiEvnt_D_Ltchd_enum &_vedsMultiEvnt_D_Ltchd_enum, const VedsPasBag_D_Ltchd_enum &_vedsPasBag_D_Ltchd_enum, const VedsPasBelt_D_Ltchd_enum &_vedsPasBelt_D_Ltchd_enum, const VedsPasCrtnBag_D_Ltchd_enum &_vedsPasCrtnBag_D_Ltchd_enum, const VedsPasSideBag_D_Ltchd_enum &_vedsPasSideBag_D_Ltchd_enum, const VedsDrvKneeBag_D_Ltchd_enum &_vedsDrvKneeBag_D_Ltchd_enum, const uint8_t &_status)
    	{
    		std::get<0>(values_) = _vedsDrvBag_D_Ltchd_enum;
    		std::get<1>(values_) = _vedsDrvBelt_D_Ltchd_enum;
    		std::get<2>(values_) = _vedsDrvCrtnBag_D_Ltchd_enum;
    		std::get<3>(values_) = _vedsDrvSideBag_D_Ltchd_enum;
    		std::get<4>(values_) = _vedsEvntRoll_D_Ltchd_enum;
    		std::get<5>(values_) = _vedsEvntType_D_Ltchd_enum;
    		std::get<6>(values_) = _vedsMaxDeltaV_D_Ltchd_enum;
    		std::get<7>(values_) = _vedsMultiEvnt_D_Ltchd_enum;
    		std::get<8>(values_) = _vedsPasBag_D_Ltchd_enum;
    		std::get<9>(values_) = _vedsPasBelt_D_Ltchd_enum;
    		std::get<10>(values_) = _vedsPasCrtnBag_D_Ltchd_enum;
    		std::get<11>(values_) = _vedsPasSideBag_D_Ltchd_enum;
    		std::get<12>(values_) = _vedsDrvKneeBag_D_Ltchd_enum;
    		std::get<13>(values_) = _status;
    	}
    	inline const VedsDrvBag_D_Ltchd_enum &getVedsDrvBag_D_Ltchd_enum() const { return std::get<0>(values_); }
    	inline void setVedsDrvBag_D_Ltchd_enum(const VedsDrvBag_D_Ltchd_enum &_value) { std::get<0>(values_) = _value; }
    	inline const VedsDrvBelt_D_Ltchd_enum &getVedsDrvBelt_D_Ltchd_enum() const { return std::get<1>(values_); }
    	inline void setVedsDrvBelt_D_Ltchd_enum(const VedsDrvBelt_D_Ltchd_enum &_value) { std::get<1>(values_) = _value; }
    	inline const VedsDrvCrtnBag_D_Ltchd_enum &getVedsDrvCrtnBag_D_Ltchd_enum() const { return std::get<2>(values_); }
    	inline void setVedsDrvCrtnBag_D_Ltchd_enum(const VedsDrvCrtnBag_D_Ltchd_enum &_value) { std::get<2>(values_) = _value; }
    	inline const VedsDrvSideBag_D_Ltchd_enum &getVedsDrvSideBag_D_Ltchd_enum() const { return std::get<3>(values_); }
    	inline void setVedsDrvSideBag_D_Ltchd_enum(const VedsDrvSideBag_D_Ltchd_enum &_value) { std::get<3>(values_) = _value; }
    	inline const VedsEvntRoll_D_Ltchd_enum &getVedsEvntRoll_D_Ltchd_enum() const { return std::get<4>(values_); }
    	inline void setVedsEvntRoll_D_Ltchd_enum(const VedsEvntRoll_D_Ltchd_enum &_value) { std::get<4>(values_) = _value; }
    	inline const VedsEvntType_D_Ltchd_enum &getVedsEvntType_D_Ltchd_enum() const { return std::get<5>(values_); }
    	inline void setVedsEvntType_D_Ltchd_enum(const VedsEvntType_D_Ltchd_enum &_value) { std::get<5>(values_) = _value; }
    	inline const VedsMaxDeltaV_D_Ltchd_enum &getVedsMaxDeltaV_D_Ltchd_enum() const { return std::get<6>(values_); }
    	inline void setVedsMaxDeltaV_D_Ltchd_enum(const VedsMaxDeltaV_D_Ltchd_enum &_value) { std::get<6>(values_) = _value; }
    	inline const VedsMultiEvnt_D_Ltchd_enum &getVedsMultiEvnt_D_Ltchd_enum() const { return std::get<7>(values_); }
    	inline void setVedsMultiEvnt_D_Ltchd_enum(const VedsMultiEvnt_D_Ltchd_enum &_value) { std::get<7>(values_) = _value; }
    	inline const VedsPasBag_D_Ltchd_enum &getVedsPasBag_D_Ltchd_enum() const { return std::get<8>(values_); }
    	inline void setVedsPasBag_D_Ltchd_enum(const VedsPasBag_D_Ltchd_enum &_value) { std::get<8>(values_) = _value; }
    	inline const VedsPasBelt_D_Ltchd_enum &getVedsPasBelt_D_Ltchd_enum() const { return std::get<9>(values_); }
    	inline void setVedsPasBelt_D_Ltchd_enum(const VedsPasBelt_D_Ltchd_enum &_value) { std::get<9>(values_) = _value; }
    	inline const VedsPasCrtnBag_D_Ltchd_enum &getVedsPasCrtnBag_D_Ltchd_enum() const { return std::get<10>(values_); }
    	inline void setVedsPasCrtnBag_D_Ltchd_enum(const VedsPasCrtnBag_D_Ltchd_enum &_value) { std::get<10>(values_) = _value; }
    	inline const VedsPasSideBag_D_Ltchd_enum &getVedsPasSideBag_D_Ltchd_enum() const { return std::get<11>(values_); }
    	inline void setVedsPasSideBag_D_Ltchd_enum(const VedsPasSideBag_D_Ltchd_enum &_value) { std::get<11>(values_) = _value; }
    	inline const VedsDrvKneeBag_D_Ltchd_enum &getVedsDrvKneeBag_D_Ltchd_enum() const { return std::get<12>(values_); }
    	inline void setVedsDrvKneeBag_D_Ltchd_enum(const VedsDrvKneeBag_D_Ltchd_enum &_value) { std::get<12>(values_) = _value; }
    	inline const uint8_t &getStatus() const { return std::get<13>(values_); }
    	inline void setStatus(const uint8_t &_value) { std::get<13>(values_) = _value; }
    	inline bool operator==(const VehEmergencyData1_HS3_struct& _other) const {
                return (getVedsDrvBag_D_Ltchd_enum() == _other.getVedsDrvBag_D_Ltchd_enum() && getVedsDrvBelt_D_Ltchd_enum() == _other.getVedsDrvBelt_D_Ltchd_enum() && getVedsDrvCrtnBag_D_Ltchd_enum() == _other.getVedsDrvCrtnBag_D_Ltchd_enum() && getVedsDrvSideBag_D_Ltchd_enum() == _other.getVedsDrvSideBag_D_Ltchd_enum() && getVedsEvntRoll_D_Ltchd_enum() == _other.getVedsEvntRoll_D_Ltchd_enum() && getVedsEvntType_D_Ltchd_enum() == _other.getVedsEvntType_D_Ltchd_enum() && getVedsMaxDeltaV_D_Ltchd_enum() == _other.getVedsMaxDeltaV_D_Ltchd_enum() && getVedsMultiEvnt_D_Ltchd_enum() == _other.getVedsMultiEvnt_D_Ltchd_enum() && getVedsPasBag_D_Ltchd_enum() == _other.getVedsPasBag_D_Ltchd_enum() && getVedsPasBelt_D_Ltchd_enum() == _other.getVedsPasBelt_D_Ltchd_enum() && getVedsPasCrtnBag_D_Ltchd_enum() == _other.getVedsPasCrtnBag_D_Ltchd_enum() && getVedsPasSideBag_D_Ltchd_enum() == _other.getVedsPasSideBag_D_Ltchd_enum() && getVedsDrvKneeBag_D_Ltchd_enum() == _other.getVedsDrvKneeBag_D_Ltchd_enum() && getStatus() == _other.getStatus());
        }
    	inline bool operator!=(const VehEmergencyData1_HS3_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.harman.ford.emergassist_types";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct emergassist_types

} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for EmgcyAsstActv_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::EmgcyAsstActv_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::EmgcyAsstActv_D_Stat_enum& emgcyAsstActv_D_Stat_enum) const {
            return static_cast<int32_t>(emgcyAsstActv_D_Stat_enum);
        }
    };
    //Hash for VedsRw1DrvBckl_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsRw1DrvBckl_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsRw1DrvBckl_D_Ltchd_enum& vedsRw1DrvBckl_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsRw1DrvBckl_D_Ltchd_enum);
        }
    };
    //Hash for VedsRw1PasBckl_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsRw1PasBckl_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsRw1PasBckl_D_Ltchd_enum& vedsRw1PasBckl_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsRw1PasBckl_D_Ltchd_enum);
        }
    };
    //Hash for VedsRw1PasChld_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsRw1PasChld_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsRw1PasChld_D_Ltchd_enum& vedsRw1PasChld_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsRw1PasChld_D_Ltchd_enum);
        }
    };
    //Hash for VedsRw2dBckl_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsRw2dBckl_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsRw2dBckl_D_Ltchd_enum& vedsRw2dBckl_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsRw2dBckl_D_Ltchd_enum);
        }
    };
    //Hash for VedsRw2mBckl_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsRw2mBckl_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsRw2mBckl_D_Ltchd_enum& vedsRw2mBckl_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsRw2mBckl_D_Ltchd_enum);
        }
    };
    //Hash for VedsRw2pBckl_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsRw2pBckl_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsRw2pBckl_D_Ltchd_enum& vedsRw2pBckl_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsRw2pBckl_D_Ltchd_enum);
        }
    };
    //Hash for VedsRw3dBckl_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsRw3dBckl_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsRw3dBckl_D_Ltchd_enum& vedsRw3dBckl_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsRw3dBckl_D_Ltchd_enum);
        }
    };
    //Hash for VedsRw3mBckl_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsRw3mBckl_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsRw3mBckl_D_Ltchd_enum& vedsRw3mBckl_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsRw3mBckl_D_Ltchd_enum);
        }
    };
    //Hash for VedsRw2dRib_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsRw2dRib_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsRw2dRib_D_Ltchd_enum& vedsRw2dRib_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsRw2dRib_D_Ltchd_enum);
        }
    };
    //Hash for VedsRw3pBckl_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsRw3pBckl_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsRw3pBckl_D_Ltchd_enum& vedsRw3pBckl_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsRw3pBckl_D_Ltchd_enum);
        }
    };
    //Hash for VedsRw1mBelt_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsRw1mBelt_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsRw1mBelt_D_Ltchd_enum& vedsRw1mBelt_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsRw1mBelt_D_Ltchd_enum);
        }
    };
    //Hash for VedsRw2pRib_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsRw2pRib_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsRw2pRib_D_Ltchd_enum& vedsRw2pRib_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsRw2pRib_D_Ltchd_enum);
        }
    };
    //Hash for VedsPasKneeBag_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsPasKneeBag_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsPasKneeBag_D_Ltchd_enum& vedsPasKneeBag_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsPasKneeBag_D_Ltchd_enum);
        }
    };
    //Hash for VedsRw1mBckl_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsRw1mBckl_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsRw1mBckl_D_Ltchd_enum& vedsRw1mBckl_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsRw1mBckl_D_Ltchd_enum);
        }
    };
    //Hash for VedsRw3pRib_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsRw3pRib_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsRw3pRib_D_Ltchd_enum& vedsRw3pRib_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsRw3pRib_D_Ltchd_enum);
        }
    };
    //Hash for VedsRw3dRib_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsRw3dRib_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsRw3dRib_D_Ltchd_enum& vedsRw3dRib_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsRw3dRib_D_Ltchd_enum);
        }
    };
    //Hash for MyKey_e911Override_St_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::MyKey_e911Override_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::MyKey_e911Override_St_enum& myKey_e911Override_St_enum) const {
            return static_cast<int32_t>(myKey_e911Override_St_enum);
        }
    };
    //Hash for VedsDrvBag_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsDrvBag_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsDrvBag_D_Ltchd_enum& vedsDrvBag_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsDrvBag_D_Ltchd_enum);
        }
    };
    //Hash for VedsDrvBelt_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsDrvBelt_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsDrvBelt_D_Ltchd_enum& vedsDrvBelt_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsDrvBelt_D_Ltchd_enum);
        }
    };
    //Hash for VedsDrvCrtnBag_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsDrvCrtnBag_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsDrvCrtnBag_D_Ltchd_enum& vedsDrvCrtnBag_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsDrvCrtnBag_D_Ltchd_enum);
        }
    };
    //Hash for VedsDrvSideBag_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsDrvSideBag_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsDrvSideBag_D_Ltchd_enum& vedsDrvSideBag_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsDrvSideBag_D_Ltchd_enum);
        }
    };
    //Hash for VedsEvntRoll_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsEvntRoll_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsEvntRoll_D_Ltchd_enum& vedsEvntRoll_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsEvntRoll_D_Ltchd_enum);
        }
    };
    //Hash for VedsEvntType_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsEvntType_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsEvntType_D_Ltchd_enum& vedsEvntType_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsEvntType_D_Ltchd_enum);
        }
    };
    //Hash for VedsMaxDeltaV_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsMaxDeltaV_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsMaxDeltaV_D_Ltchd_enum& vedsMaxDeltaV_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsMaxDeltaV_D_Ltchd_enum);
        }
    };
    //Hash for VedsMultiEvnt_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsMultiEvnt_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsMultiEvnt_D_Ltchd_enum& vedsMultiEvnt_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsMultiEvnt_D_Ltchd_enum);
        }
    };
    //Hash for VedsPasBag_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsPasBag_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsPasBag_D_Ltchd_enum& vedsPasBag_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsPasBag_D_Ltchd_enum);
        }
    };
    //Hash for VedsPasBelt_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsPasBelt_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsPasBelt_D_Ltchd_enum& vedsPasBelt_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsPasBelt_D_Ltchd_enum);
        }
    };
    //Hash for VedsPasCrtnBag_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsPasCrtnBag_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsPasCrtnBag_D_Ltchd_enum& vedsPasCrtnBag_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsPasCrtnBag_D_Ltchd_enum);
        }
    };
    //Hash for VedsPasSideBag_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsPasSideBag_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsPasSideBag_D_Ltchd_enum& vedsPasSideBag_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsPasSideBag_D_Ltchd_enum);
        }
    };
    //Hash for VedsDrvKneeBag_D_Ltchd_enum
    template<>
    struct hash<::v0::org::harman::ford::emergassist_types::VedsDrvKneeBag_D_Ltchd_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::emergassist_types::VedsDrvKneeBag_D_Ltchd_enum& vedsDrvKneeBag_D_Ltchd_enum) const {
            return static_cast<int32_t>(vedsDrvKneeBag_D_Ltchd_enum);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_FORD_emergassist_types_HPP_

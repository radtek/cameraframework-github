/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_ORG_HARMAN_FORD_audio_types_HPP_
#define V0_ORG_HARMAN_FORD_audio_types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace ford {

struct audio_types {
    
    struct IPC_New_Attn_Event_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Active = 1,
            En_Inactive = 0
        };
        
        IPC_New_Attn_Event_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Active)) {}
        IPC_New_Attn_Event_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const IPC_New_Attn_Event_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const IPC_New_Attn_Event_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const IPC_New_Attn_Event_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const IPC_New_Attn_Event_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const IPC_New_Attn_Event_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const IPC_New_Attn_Event_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct IPC_Attn_Info_Audio_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unknown = 7,
            En_Attenuation_6 = 6,
            En_Attenuation_5 = 5,
            En_Attenuation_4 = 4,
            En_Attenuation_3 = 3,
            En_Attenuation_2 = 2,
            En_Attenuation_1 = 1,
            En_Inactive = 0
        };
        
        IPC_Attn_Info_Audio_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unknown)) {}
        IPC_Attn_Info_Audio_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unknown):
                case static_cast<int32_t>(Literal::En_Attenuation_6):
                case static_cast<int32_t>(Literal::En_Attenuation_5):
                case static_cast<int32_t>(Literal::En_Attenuation_4):
                case static_cast<int32_t>(Literal::En_Attenuation_3):
                case static_cast<int32_t>(Literal::En_Attenuation_2):
                case static_cast<int32_t>(Literal::En_Attenuation_1):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const IPC_Attn_Info_Audio_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const IPC_Attn_Info_Audio_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const IPC_Attn_Info_Audio_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const IPC_Attn_Info_Audio_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const IPC_Attn_Info_Audio_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const IPC_Attn_Info_Audio_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct BeltminderAudioMute_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Invalid = 0,
            En_Off = 1,
            En_On = 2
        };
        
        BeltminderAudioMute_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Invalid)) {}
        BeltminderAudioMute_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_On):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const BeltminderAudioMute_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const BeltminderAudioMute_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const BeltminderAudioMute_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const BeltminderAudioMute_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const BeltminderAudioMute_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const BeltminderAudioMute_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct IPC_MyKeyVolLimit_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Invalid = 0,
            En_Off = 1,
            En_On = 2
        };
        
        IPC_MyKeyVolLimit_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Invalid)) {}
        IPC_MyKeyVolLimit_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_On):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const IPC_MyKeyVolLimit_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const IPC_MyKeyVolLimit_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const IPC_MyKeyVolLimit_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const IPC_MyKeyVolLimit_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const IPC_MyKeyVolLimit_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const IPC_MyKeyVolLimit_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Chime_Source_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Cluster = 2,
            En_Infotainment_Sys = 1,
            En_Invalid = 0
        };
        
        Chime_Source_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Cluster)) {}
        Chime_Source_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Cluster):
                case static_cast<int32_t>(Literal::En_Infotainment_Sys):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Chime_Source_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Chime_Source_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Chime_Source_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Chime_Source_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Chime_Source_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Chime_Source_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Power_Up_Chime_Modules_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Active = 1,
            En_Inactive = 0
        };
        
        Power_Up_Chime_Modules_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Active)) {}
        Power_Up_Chime_Modules_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Power_Up_Chime_Modules_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Power_Up_Chime_Modules_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Power_Up_Chime_Modules_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Power_Up_Chime_Modules_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Power_Up_Chime_Modules_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Power_Up_Chime_Modules_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct IPC_Infotainment_struct : CommonAPI::Struct<IPC_New_Attn_Event_enum, IPC_Attn_Info_Audio_enum, BeltminderAudioMute_enum, IPC_MyKeyVolLimit_St_enum, Chime_Source_enum, Power_Up_Chime_Modules_enum> {
    	
    	IPC_Infotainment_struct() {
    	}
    	IPC_Infotainment_struct(const IPC_New_Attn_Event_enum &_iPC_New_Attn_Event_enum, const IPC_Attn_Info_Audio_enum &_iPC_Attn_Info_Audio_enum, const BeltminderAudioMute_enum &_beltminderAudioMute_enum, const IPC_MyKeyVolLimit_St_enum &_iPC_MyKeyVolLimit_St_enum, const Chime_Source_enum &_chime_Source_enum, const Power_Up_Chime_Modules_enum &_power_Up_Chime_Modules_enum)
    	{
    		std::get<0>(values_) = _iPC_New_Attn_Event_enum;
    		std::get<1>(values_) = _iPC_Attn_Info_Audio_enum;
    		std::get<2>(values_) = _beltminderAudioMute_enum;
    		std::get<3>(values_) = _iPC_MyKeyVolLimit_St_enum;
    		std::get<4>(values_) = _chime_Source_enum;
    		std::get<5>(values_) = _power_Up_Chime_Modules_enum;
    	}
    	inline const IPC_New_Attn_Event_enum &getIPC_New_Attn_Event_enum() const { return std::get<0>(values_); }
    	inline void setIPC_New_Attn_Event_enum(const IPC_New_Attn_Event_enum &_value) { std::get<0>(values_) = _value; }
    	inline const IPC_Attn_Info_Audio_enum &getIPC_Attn_Info_Audio_enum() const { return std::get<1>(values_); }
    	inline void setIPC_Attn_Info_Audio_enum(const IPC_Attn_Info_Audio_enum &_value) { std::get<1>(values_) = _value; }
    	inline const BeltminderAudioMute_enum &getBeltminderAudioMute_enum() const { return std::get<2>(values_); }
    	inline void setBeltminderAudioMute_enum(const BeltminderAudioMute_enum &_value) { std::get<2>(values_) = _value; }
    	inline const IPC_MyKeyVolLimit_St_enum &getIPC_MyKeyVolLimit_St_enum() const { return std::get<3>(values_); }
    	inline void setIPC_MyKeyVolLimit_St_enum(const IPC_MyKeyVolLimit_St_enum &_value) { std::get<3>(values_) = _value; }
    	inline const Chime_Source_enum &getChime_Source_enum() const { return std::get<4>(values_); }
    	inline void setChime_Source_enum(const Chime_Source_enum &_value) { std::get<4>(values_) = _value; }
    	inline const Power_Up_Chime_Modules_enum &getPower_Up_Chime_Modules_enum() const { return std::get<5>(values_); }
    	inline void setPower_Up_Chime_Modules_enum(const Power_Up_Chime_Modules_enum &_value) { std::get<5>(values_) = _value; }
    	inline bool operator==(const IPC_Infotainment_struct& _other) const {
                return (getIPC_New_Attn_Event_enum() == _other.getIPC_New_Attn_Event_enum() && getIPC_Attn_Info_Audio_enum() == _other.getIPC_Attn_Info_Audio_enum() && getBeltminderAudioMute_enum() == _other.getBeltminderAudioMute_enum() && getIPC_MyKeyVolLimit_St_enum() == _other.getIPC_MyKeyVolLimit_St_enum() && getChime_Source_enum() == _other.getChime_Source_enum() && getPower_Up_Chime_Modules_enum() == _other.getPower_Up_Chime_Modules_enum());
        }
    	inline bool operator!=(const IPC_Infotainment_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.harman.ford.audio_types";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct audio_types

} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for IPC_New_Attn_Event_enum
    template<>
    struct hash<::v0::org::harman::ford::audio_types::IPC_New_Attn_Event_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::audio_types::IPC_New_Attn_Event_enum& iPC_New_Attn_Event_enum) const {
            return static_cast<int32_t>(iPC_New_Attn_Event_enum);
        }
    };
    //Hash for IPC_Attn_Info_Audio_enum
    template<>
    struct hash<::v0::org::harman::ford::audio_types::IPC_Attn_Info_Audio_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::audio_types::IPC_Attn_Info_Audio_enum& iPC_Attn_Info_Audio_enum) const {
            return static_cast<int32_t>(iPC_Attn_Info_Audio_enum);
        }
    };
    //Hash for BeltminderAudioMute_enum
    template<>
    struct hash<::v0::org::harman::ford::audio_types::BeltminderAudioMute_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::audio_types::BeltminderAudioMute_enum& beltminderAudioMute_enum) const {
            return static_cast<int32_t>(beltminderAudioMute_enum);
        }
    };
    //Hash for IPC_MyKeyVolLimit_St_enum
    template<>
    struct hash<::v0::org::harman::ford::audio_types::IPC_MyKeyVolLimit_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::audio_types::IPC_MyKeyVolLimit_St_enum& iPC_MyKeyVolLimit_St_enum) const {
            return static_cast<int32_t>(iPC_MyKeyVolLimit_St_enum);
        }
    };
    //Hash for Chime_Source_enum
    template<>
    struct hash<::v0::org::harman::ford::audio_types::Chime_Source_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::audio_types::Chime_Source_enum& chime_Source_enum) const {
            return static_cast<int32_t>(chime_Source_enum);
        }
    };
    //Hash for Power_Up_Chime_Modules_enum
    template<>
    struct hash<::v0::org::harman::ford::audio_types::Power_Up_Chime_Modules_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::audio_types::Power_Up_Chime_Modules_enum& power_Up_Chime_Modules_enum) const {
            return static_cast<int32_t>(power_Up_Chime_Modules_enum);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_FORD_audio_types_HPP_

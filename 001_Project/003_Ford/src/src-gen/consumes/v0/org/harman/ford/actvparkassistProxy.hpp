/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_ORG_HARMAN_FORD_actvparkassist_PROXY_HPP_
#define V0_ORG_HARMAN_FORD_actvparkassist_PROXY_HPP_

#include <v0/org/harman/ford/actvparkassistProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace ford {

template <typename ... _AttributeExtensions>
class actvparkassistProxy
    : virtual public actvparkassist, 
      virtual public actvparkassistProxyBase,
      virtual public _AttributeExtensions... {
public:
    actvparkassistProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~actvparkassistProxy();

    typedef actvparkassist InterfaceType;


    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute prkAidDrvDir_D_Stat_enum.
     */
    virtual PrkAidDrvDir_D_Stat_enumAttribute& getPrkAidDrvDir_D_Stat_enumAttribute() {
        return delegate_->getPrkAidDrvDir_D_Stat_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute ApaMde_D_Stat.
     */
    virtual ApaMde_D_StatAttribute& getApaMde_D_StatAttribute() {
        return delegate_->getApaMde_D_StatAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute apaMdeStat_D_RqDrv_enum.
     */
    virtual ApaMdeStat_D_RqDrv_enumAttribute& getApaMdeStat_D_RqDrv_enumAttribute() {
        return delegate_->getApaMdeStat_D_RqDrv_enumAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute ParkAid_Data_HS3.
     */
    virtual ParkAid_Data_HS3Attribute& getParkAid_Data_HS3Attribute() {
        return delegate_->getParkAid_Data_HS3Attribute();
    }




    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<actvparkassistProxyBase> delegate_;
};

typedef actvparkassistProxy<> actvparkassistProxyDefault;

namespace actvparkassistExtensions {
    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class PrkAidDrvDir_D_Stat_enumAttributeExtension {
     public:
        typedef _ExtensionType<actvparkassistProxyBase::PrkAidDrvDir_D_Stat_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<actvparkassistProxyBase::PrkAidDrvDir_D_Stat_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PrkAidDrvDir_D_Stat_enumAttributeExtension() {}
    #endif
    
        PrkAidDrvDir_D_Stat_enumAttributeExtension(actvparkassistProxyBase& proxy): attributeExtension_(proxy.getPrkAidDrvDir_D_Stat_enumAttribute()) {
        }
    
        inline extension_type& getPrkAidDrvDir_D_Stat_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class ApaMde_D_StatAttributeExtension {
     public:
        typedef _ExtensionType<actvparkassistProxyBase::ApaMde_D_StatAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<actvparkassistProxyBase::ApaMde_D_StatAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ApaMde_D_StatAttributeExtension() {}
    #endif
    
        ApaMde_D_StatAttributeExtension(actvparkassistProxyBase& proxy): attributeExtension_(proxy.getApaMde_D_StatAttribute()) {
        }
    
        inline extension_type& getApaMde_D_StatAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class ApaMdeStat_D_RqDrv_enumAttributeExtension {
     public:
        typedef _ExtensionType<actvparkassistProxyBase::ApaMdeStat_D_RqDrv_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<actvparkassistProxyBase::ApaMdeStat_D_RqDrv_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ApaMdeStat_D_RqDrv_enumAttributeExtension() {}
    #endif
    
        ApaMdeStat_D_RqDrv_enumAttributeExtension(actvparkassistProxyBase& proxy): attributeExtension_(proxy.getApaMdeStat_D_RqDrv_enumAttribute()) {
        }
    
        inline extension_type& getApaMdeStat_D_RqDrv_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class ParkAid_Data_HS3AttributeExtension {
     public:
        typedef _ExtensionType<actvparkassistProxyBase::ParkAid_Data_HS3Attribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<actvparkassistProxyBase::ParkAid_Data_HS3Attribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ParkAid_Data_HS3AttributeExtension() {}
    #endif
    
        ParkAid_Data_HS3AttributeExtension(actvparkassistProxyBase& proxy): attributeExtension_(proxy.getParkAid_Data_HS3Attribute()) {
        }
    
        inline extension_type& getParkAid_Data_HS3AttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace actvparkassistExtensions

//
// actvparkassistProxy Implementation
//
template <typename ... _AttributeExtensions>
actvparkassistProxy<_AttributeExtensions...>::actvparkassistProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<actvparkassistProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<actvparkassistProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
actvparkassistProxy<_AttributeExtensions...>::~actvparkassistProxy() {
}


template <typename ... _AttributeExtensions>
const CommonAPI::Address &actvparkassistProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool actvparkassistProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool actvparkassistProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& actvparkassistProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& actvparkassistProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0::org::harman::ford::actvparkassistProxy,
    _AttributeExtension> {
    typedef typename ::v0::org::harman::ford::actvparkassistProxy<
            ::v0::org::harman::ford::actvparkassistExtensions::PrkAidDrvDir_D_Stat_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::actvparkassistExtensions::ApaMde_D_StatAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::actvparkassistExtensions::ApaMdeStat_D_RqDrv_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::actvparkassistExtensions::ParkAid_Data_HS3AttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_FORD_actvparkassist_PROXY_HPP_

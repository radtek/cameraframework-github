/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_ORG_HARMAN_FORD_camerainfo_PROXY_HPP_
#define V0_ORG_HARMAN_FORD_camerainfo_PROXY_HPP_

#include <v0/org/harman/ford/camerainfoProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace ford {

template <typename ... _AttributeExtensions>
class camerainfoProxy
    : virtual public camerainfo, 
      virtual public camerainfoProxyBase,
      virtual public _AttributeExtensions... {
public:
    camerainfoProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~camerainfoProxy();

    typedef camerainfo InterfaceType;


    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute camraViewSplit_B_Rq_enum.
     */
    virtual CamraViewSplit_B_Rq_enumAttribute& getCamraViewSplit_B_Rq_enumAttribute() {
        return delegate_->getCamraViewSplit_B_Rq_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute camraOvrlStat_D_Rq_enum.
     */
    virtual CamraOvrlStat_D_Rq_enumAttribute& getCamraOvrlStat_D_Rq_enumAttribute() {
        return delegate_->getCamraOvrlStat_D_Rq_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute camraOvrlDyn_D_Rq_enum.
     */
    virtual CamraOvrlDyn_D_Rq_enumAttribute& getCamraOvrlDyn_D_Rq_enumAttribute() {
        return delegate_->getCamraOvrlDyn_D_Rq_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute camraOvrlTow_D_Rq_enum.
     */
    virtual CamraOvrlTow_D_Rq_enumAttribute& getCamraOvrlTow_D_Rq_enumAttribute() {
        return delegate_->getCamraOvrlTow_D_Rq_enumAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute camraZoomMan_D_Rq_enum.
     */
    virtual CamraZoomMan_D_Rq_enumAttribute& getCamraZoomMan_D_Rq_enumAttribute() {
        return delegate_->getCamraZoomMan_D_Rq_enumAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute VehCharacteristicSet2_HS3.
     */
    virtual VehCharacteristicSet2_HS3Attribute& getVehCharacteristicSet2_HS3Attribute() {
        return delegate_->getVehCharacteristicSet2_HS3Attribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute vehCharacteristicSet2_HS3_sig_0.
     */
    virtual VehCharacteristicSet2_HS3_sig_0Attribute& getVehCharacteristicSet2_HS3_sig_0Attribute() {
        return delegate_->getVehCharacteristicSet2_HS3_sig_0Attribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute vehCharacteristicSet2_HS3_sig_1.
     */
    virtual VehCharacteristicSet2_HS3_sig_1Attribute& getVehCharacteristicSet2_HS3_sig_1Attribute() {
        return delegate_->getVehCharacteristicSet2_HS3_sig_1Attribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute vehCharacteristicSet2_HS3_sig_2.
     */
    virtual VehCharacteristicSet2_HS3_sig_2Attribute& getVehCharacteristicSet2_HS3_sig_2Attribute() {
        return delegate_->getVehCharacteristicSet2_HS3_sig_2Attribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute vehCharacteristicSet2_HS3_sig_3.
     */
    virtual VehCharacteristicSet2_HS3_sig_3Attribute& getVehCharacteristicSet2_HS3_sig_3Attribute() {
        return delegate_->getVehCharacteristicSet2_HS3_sig_3Attribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute vehCharacteristicSet2_HS3_sig_4.
     */
    virtual VehCharacteristicSet2_HS3_sig_4Attribute& getVehCharacteristicSet2_HS3_sig_4Attribute() {
        return delegate_->getVehCharacteristicSet2_HS3_sig_4Attribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute pAC_Send_Signals_sig_0.
     */
    virtual PAC_Send_Signals_sig_0Attribute& getPAC_Send_Signals_sig_0Attribute() {
        return delegate_->getPAC_Send_Signals_sig_0Attribute();
    }




    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<camerainfoProxyBase> delegate_;
};

typedef camerainfoProxy<> camerainfoProxyDefault;

namespace camerainfoExtensions {
    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class CamraViewSplit_B_Rq_enumAttributeExtension {
     public:
        typedef _ExtensionType<camerainfoProxyBase::CamraViewSplit_B_Rq_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<camerainfoProxyBase::CamraViewSplit_B_Rq_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CamraViewSplit_B_Rq_enumAttributeExtension() {}
    #endif
    
        CamraViewSplit_B_Rq_enumAttributeExtension(camerainfoProxyBase& proxy): attributeExtension_(proxy.getCamraViewSplit_B_Rq_enumAttribute()) {
        }
    
        inline extension_type& getCamraViewSplit_B_Rq_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class CamraOvrlStat_D_Rq_enumAttributeExtension {
     public:
        typedef _ExtensionType<camerainfoProxyBase::CamraOvrlStat_D_Rq_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<camerainfoProxyBase::CamraOvrlStat_D_Rq_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CamraOvrlStat_D_Rq_enumAttributeExtension() {}
    #endif
    
        CamraOvrlStat_D_Rq_enumAttributeExtension(camerainfoProxyBase& proxy): attributeExtension_(proxy.getCamraOvrlStat_D_Rq_enumAttribute()) {
        }
    
        inline extension_type& getCamraOvrlStat_D_Rq_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class CamraOvrlDyn_D_Rq_enumAttributeExtension {
     public:
        typedef _ExtensionType<camerainfoProxyBase::CamraOvrlDyn_D_Rq_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<camerainfoProxyBase::CamraOvrlDyn_D_Rq_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CamraOvrlDyn_D_Rq_enumAttributeExtension() {}
    #endif
    
        CamraOvrlDyn_D_Rq_enumAttributeExtension(camerainfoProxyBase& proxy): attributeExtension_(proxy.getCamraOvrlDyn_D_Rq_enumAttribute()) {
        }
    
        inline extension_type& getCamraOvrlDyn_D_Rq_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class CamraOvrlTow_D_Rq_enumAttributeExtension {
     public:
        typedef _ExtensionType<camerainfoProxyBase::CamraOvrlTow_D_Rq_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<camerainfoProxyBase::CamraOvrlTow_D_Rq_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CamraOvrlTow_D_Rq_enumAttributeExtension() {}
    #endif
    
        CamraOvrlTow_D_Rq_enumAttributeExtension(camerainfoProxyBase& proxy): attributeExtension_(proxy.getCamraOvrlTow_D_Rq_enumAttribute()) {
        }
    
        inline extension_type& getCamraOvrlTow_D_Rq_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class CamraZoomMan_D_Rq_enumAttributeExtension {
     public:
        typedef _ExtensionType<camerainfoProxyBase::CamraZoomMan_D_Rq_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<camerainfoProxyBase::CamraZoomMan_D_Rq_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CamraZoomMan_D_Rq_enumAttributeExtension() {}
    #endif
    
        CamraZoomMan_D_Rq_enumAttributeExtension(camerainfoProxyBase& proxy): attributeExtension_(proxy.getCamraZoomMan_D_Rq_enumAttribute()) {
        }
    
        inline extension_type& getCamraZoomMan_D_Rq_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class VehCharacteristicSet2_HS3AttributeExtension {
     public:
        typedef _ExtensionType<camerainfoProxyBase::VehCharacteristicSet2_HS3Attribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<camerainfoProxyBase::VehCharacteristicSet2_HS3Attribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        VehCharacteristicSet2_HS3AttributeExtension() {}
    #endif
    
        VehCharacteristicSet2_HS3AttributeExtension(camerainfoProxyBase& proxy): attributeExtension_(proxy.getVehCharacteristicSet2_HS3Attribute()) {
        }
    
        inline extension_type& getVehCharacteristicSet2_HS3AttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class VehCharacteristicSet2_HS3_sig_0AttributeExtension {
     public:
        typedef _ExtensionType<camerainfoProxyBase::VehCharacteristicSet2_HS3_sig_0Attribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<camerainfoProxyBase::VehCharacteristicSet2_HS3_sig_0Attribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        VehCharacteristicSet2_HS3_sig_0AttributeExtension() {}
    #endif
    
        VehCharacteristicSet2_HS3_sig_0AttributeExtension(camerainfoProxyBase& proxy): attributeExtension_(proxy.getVehCharacteristicSet2_HS3_sig_0Attribute()) {
        }
    
        inline extension_type& getVehCharacteristicSet2_HS3_sig_0AttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class VehCharacteristicSet2_HS3_sig_1AttributeExtension {
     public:
        typedef _ExtensionType<camerainfoProxyBase::VehCharacteristicSet2_HS3_sig_1Attribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<camerainfoProxyBase::VehCharacteristicSet2_HS3_sig_1Attribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        VehCharacteristicSet2_HS3_sig_1AttributeExtension() {}
    #endif
    
        VehCharacteristicSet2_HS3_sig_1AttributeExtension(camerainfoProxyBase& proxy): attributeExtension_(proxy.getVehCharacteristicSet2_HS3_sig_1Attribute()) {
        }
    
        inline extension_type& getVehCharacteristicSet2_HS3_sig_1AttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class VehCharacteristicSet2_HS3_sig_2AttributeExtension {
     public:
        typedef _ExtensionType<camerainfoProxyBase::VehCharacteristicSet2_HS3_sig_2Attribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<camerainfoProxyBase::VehCharacteristicSet2_HS3_sig_2Attribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        VehCharacteristicSet2_HS3_sig_2AttributeExtension() {}
    #endif
    
        VehCharacteristicSet2_HS3_sig_2AttributeExtension(camerainfoProxyBase& proxy): attributeExtension_(proxy.getVehCharacteristicSet2_HS3_sig_2Attribute()) {
        }
    
        inline extension_type& getVehCharacteristicSet2_HS3_sig_2AttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class VehCharacteristicSet2_HS3_sig_3AttributeExtension {
     public:
        typedef _ExtensionType<camerainfoProxyBase::VehCharacteristicSet2_HS3_sig_3Attribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<camerainfoProxyBase::VehCharacteristicSet2_HS3_sig_3Attribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        VehCharacteristicSet2_HS3_sig_3AttributeExtension() {}
    #endif
    
        VehCharacteristicSet2_HS3_sig_3AttributeExtension(camerainfoProxyBase& proxy): attributeExtension_(proxy.getVehCharacteristicSet2_HS3_sig_3Attribute()) {
        }
    
        inline extension_type& getVehCharacteristicSet2_HS3_sig_3AttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class VehCharacteristicSet2_HS3_sig_4AttributeExtension {
     public:
        typedef _ExtensionType<camerainfoProxyBase::VehCharacteristicSet2_HS3_sig_4Attribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<camerainfoProxyBase::VehCharacteristicSet2_HS3_sig_4Attribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        VehCharacteristicSet2_HS3_sig_4AttributeExtension() {}
    #endif
    
        VehCharacteristicSet2_HS3_sig_4AttributeExtension(camerainfoProxyBase& proxy): attributeExtension_(proxy.getVehCharacteristicSet2_HS3_sig_4Attribute()) {
        }
    
        inline extension_type& getVehCharacteristicSet2_HS3_sig_4AttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class PAC_Send_Signals_sig_0AttributeExtension {
     public:
        typedef _ExtensionType<camerainfoProxyBase::PAC_Send_Signals_sig_0Attribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<camerainfoProxyBase::PAC_Send_Signals_sig_0Attribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PAC_Send_Signals_sig_0AttributeExtension() {}
    #endif
    
        PAC_Send_Signals_sig_0AttributeExtension(camerainfoProxyBase& proxy): attributeExtension_(proxy.getPAC_Send_Signals_sig_0Attribute()) {
        }
    
        inline extension_type& getPAC_Send_Signals_sig_0AttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace camerainfoExtensions

//
// camerainfoProxy Implementation
//
template <typename ... _AttributeExtensions>
camerainfoProxy<_AttributeExtensions...>::camerainfoProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<camerainfoProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<camerainfoProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
camerainfoProxy<_AttributeExtensions...>::~camerainfoProxy() {
}


template <typename ... _AttributeExtensions>
const CommonAPI::Address &camerainfoProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool camerainfoProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool camerainfoProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& camerainfoProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& camerainfoProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0::org::harman::ford::camerainfoProxy,
    _AttributeExtension> {
    typedef typename ::v0::org::harman::ford::camerainfoProxy<
            ::v0::org::harman::ford::camerainfoExtensions::CamraViewSplit_B_Rq_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::camerainfoExtensions::CamraOvrlStat_D_Rq_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::camerainfoExtensions::CamraOvrlDyn_D_Rq_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::camerainfoExtensions::CamraOvrlTow_D_Rq_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::camerainfoExtensions::CamraZoomMan_D_Rq_enumAttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::camerainfoExtensions::VehCharacteristicSet2_HS3AttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::camerainfoExtensions::VehCharacteristicSet2_HS3_sig_0AttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::camerainfoExtensions::VehCharacteristicSet2_HS3_sig_1AttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::camerainfoExtensions::VehCharacteristicSet2_HS3_sig_2AttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::camerainfoExtensions::VehCharacteristicSet2_HS3_sig_3AttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::camerainfoExtensions::VehCharacteristicSet2_HS3_sig_4AttributeExtension<_AttributeExtension>, 
            ::v0::org::harman::ford::camerainfoExtensions::PAC_Send_Signals_sig_0AttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_FORD_camerainfo_PROXY_HPP_

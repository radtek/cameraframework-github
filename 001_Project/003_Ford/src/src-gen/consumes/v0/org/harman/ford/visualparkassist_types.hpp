/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_ORG_HARMAN_FORD_visualparkassist_types_HPP_
#define V0_ORG_HARMAN_FORD_visualparkassist_types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace ford {

struct visualparkassist_types {
    
    struct PrkAidSnsRlCrnr_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Zone_15 = 15,
            En_Zone_14 = 14,
            En_Zone_13 = 13,
            En_Zone_12 = 12,
            En_Zone_11 = 11,
            En_Zone_10 = 10,
            En_Zone_9 = 9,
            En_Zone_8 = 8,
            En_Zone_7 = 7,
            En_Zone_6 = 6,
            En_Zone_5 = 5,
            En_Zone_4 = 4,
            En_Zone_3 = 3,
            En_Zone_2 = 2,
            En_Zone_1 = 1,
            En_Off = 0
        };
        
        PrkAidSnsRlCrnr_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Zone_15)) {}
        PrkAidSnsRlCrnr_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Zone_15):
                case static_cast<int32_t>(Literal::En_Zone_14):
                case static_cast<int32_t>(Literal::En_Zone_13):
                case static_cast<int32_t>(Literal::En_Zone_12):
                case static_cast<int32_t>(Literal::En_Zone_11):
                case static_cast<int32_t>(Literal::En_Zone_10):
                case static_cast<int32_t>(Literal::En_Zone_9):
                case static_cast<int32_t>(Literal::En_Zone_8):
                case static_cast<int32_t>(Literal::En_Zone_7):
                case static_cast<int32_t>(Literal::En_Zone_6):
                case static_cast<int32_t>(Literal::En_Zone_5):
                case static_cast<int32_t>(Literal::En_Zone_4):
                case static_cast<int32_t>(Literal::En_Zone_3):
                case static_cast<int32_t>(Literal::En_Zone_2):
                case static_cast<int32_t>(Literal::En_Zone_1):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PrkAidSnsRlCrnr_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PrkAidSnsRlCrnr_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PrkAidSnsRlCrnr_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PrkAidSnsRlCrnr_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PrkAidSnsRlCrnr_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PrkAidSnsRlCrnr_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PrkAidSnsRlCntr_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Zone_15 = 15,
            En_Zone_14 = 14,
            En_Zone_13 = 13,
            En_Zone_12 = 12,
            En_Zone_11 = 11,
            En_Zone_10 = 10,
            En_Zone_9 = 9,
            En_Zone_8 = 8,
            En_Zone_7 = 7,
            En_Zone_6 = 6,
            En_Zone_5 = 5,
            En_Zone_4 = 4,
            En_Zone_3 = 3,
            En_Zone_2 = 2,
            En_Zone_1 = 1,
            En_Off = 0
        };
        
        PrkAidSnsRlCntr_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Zone_15)) {}
        PrkAidSnsRlCntr_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Zone_15):
                case static_cast<int32_t>(Literal::En_Zone_14):
                case static_cast<int32_t>(Literal::En_Zone_13):
                case static_cast<int32_t>(Literal::En_Zone_12):
                case static_cast<int32_t>(Literal::En_Zone_11):
                case static_cast<int32_t>(Literal::En_Zone_10):
                case static_cast<int32_t>(Literal::En_Zone_9):
                case static_cast<int32_t>(Literal::En_Zone_8):
                case static_cast<int32_t>(Literal::En_Zone_7):
                case static_cast<int32_t>(Literal::En_Zone_6):
                case static_cast<int32_t>(Literal::En_Zone_5):
                case static_cast<int32_t>(Literal::En_Zone_4):
                case static_cast<int32_t>(Literal::En_Zone_3):
                case static_cast<int32_t>(Literal::En_Zone_2):
                case static_cast<int32_t>(Literal::En_Zone_1):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PrkAidSnsRlCntr_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PrkAidSnsRlCntr_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PrkAidSnsRlCntr_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PrkAidSnsRlCntr_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PrkAidSnsRlCntr_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PrkAidSnsRlCntr_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PrkAidSnsRrCntr_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Zone_15 = 15,
            En_Zone_14 = 14,
            En_Zone_13 = 13,
            En_Zone_12 = 12,
            En_Zone_11 = 11,
            En_Zone_10 = 10,
            En_Zone_9 = 9,
            En_Zone_8 = 8,
            En_Zone_7 = 7,
            En_Zone_6 = 6,
            En_Zone_5 = 5,
            En_Zone_4 = 4,
            En_Zone_3 = 3,
            En_Zone_2 = 2,
            En_Zone_1 = 1,
            En_Off = 0
        };
        
        PrkAidSnsRrCntr_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Zone_15)) {}
        PrkAidSnsRrCntr_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Zone_15):
                case static_cast<int32_t>(Literal::En_Zone_14):
                case static_cast<int32_t>(Literal::En_Zone_13):
                case static_cast<int32_t>(Literal::En_Zone_12):
                case static_cast<int32_t>(Literal::En_Zone_11):
                case static_cast<int32_t>(Literal::En_Zone_10):
                case static_cast<int32_t>(Literal::En_Zone_9):
                case static_cast<int32_t>(Literal::En_Zone_8):
                case static_cast<int32_t>(Literal::En_Zone_7):
                case static_cast<int32_t>(Literal::En_Zone_6):
                case static_cast<int32_t>(Literal::En_Zone_5):
                case static_cast<int32_t>(Literal::En_Zone_4):
                case static_cast<int32_t>(Literal::En_Zone_3):
                case static_cast<int32_t>(Literal::En_Zone_2):
                case static_cast<int32_t>(Literal::En_Zone_1):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PrkAidSnsRrCntr_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PrkAidSnsRrCntr_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PrkAidSnsRrCntr_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PrkAidSnsRrCntr_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PrkAidSnsRrCntr_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PrkAidSnsRrCntr_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PrkAidSnsRrCrnr_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Zone_15 = 15,
            En_Zone_14 = 14,
            En_Zone_13 = 13,
            En_Zone_12 = 12,
            En_Zone_11 = 11,
            En_Zone_10 = 10,
            En_Zone_9 = 9,
            En_Zone_8 = 8,
            En_Zone_7 = 7,
            En_Zone_6 = 6,
            En_Zone_5 = 5,
            En_Zone_4 = 4,
            En_Zone_3 = 3,
            En_Zone_2 = 2,
            En_Zone_1 = 1,
            En_Off = 0
        };
        
        PrkAidSnsRrCrnr_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Zone_15)) {}
        PrkAidSnsRrCrnr_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Zone_15):
                case static_cast<int32_t>(Literal::En_Zone_14):
                case static_cast<int32_t>(Literal::En_Zone_13):
                case static_cast<int32_t>(Literal::En_Zone_12):
                case static_cast<int32_t>(Literal::En_Zone_11):
                case static_cast<int32_t>(Literal::En_Zone_10):
                case static_cast<int32_t>(Literal::En_Zone_9):
                case static_cast<int32_t>(Literal::En_Zone_8):
                case static_cast<int32_t>(Literal::En_Zone_7):
                case static_cast<int32_t>(Literal::En_Zone_6):
                case static_cast<int32_t>(Literal::En_Zone_5):
                case static_cast<int32_t>(Literal::En_Zone_4):
                case static_cast<int32_t>(Literal::En_Zone_3):
                case static_cast<int32_t>(Literal::En_Zone_2):
                case static_cast<int32_t>(Literal::En_Zone_1):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PrkAidSnsRrCrnr_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PrkAidSnsRrCrnr_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PrkAidSnsRrCrnr_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PrkAidSnsRrCrnr_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PrkAidSnsRrCrnr_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PrkAidSnsRrCrnr_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct SidePrkSnsL3_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed = 15,
            En_NotFullyScannedYet = 14,
            En_NoObjectInSector = 13,
            En_Zone12 = 12,
            En_Zone11 = 11,
            En_Zone10 = 10,
            En_Zone9 = 9,
            En_Zone8 = 8,
            En_Zone7 = 7,
            En_Zone6 = 6,
            En_Zone5 = 5,
            En_Zone4 = 4,
            En_Zone3 = 3,
            En_Zone2 = 2,
            En_Zone1 = 1,
            En_Off = 0
        };
        
        SidePrkSnsL3_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed)) {}
        SidePrkSnsL3_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed):
                case static_cast<int32_t>(Literal::En_NotFullyScannedYet):
                case static_cast<int32_t>(Literal::En_NoObjectInSector):
                case static_cast<int32_t>(Literal::En_Zone12):
                case static_cast<int32_t>(Literal::En_Zone11):
                case static_cast<int32_t>(Literal::En_Zone10):
                case static_cast<int32_t>(Literal::En_Zone9):
                case static_cast<int32_t>(Literal::En_Zone8):
                case static_cast<int32_t>(Literal::En_Zone7):
                case static_cast<int32_t>(Literal::En_Zone6):
                case static_cast<int32_t>(Literal::En_Zone5):
                case static_cast<int32_t>(Literal::En_Zone4):
                case static_cast<int32_t>(Literal::En_Zone3):
                case static_cast<int32_t>(Literal::En_Zone2):
                case static_cast<int32_t>(Literal::En_Zone1):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SidePrkSnsL3_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SidePrkSnsL3_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SidePrkSnsL3_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SidePrkSnsL3_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SidePrkSnsL3_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SidePrkSnsL3_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct SidePrkSnsL4_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed = 15,
            En_NotFullyScannedYet = 14,
            En_NoObjectInSector = 13,
            En_Zone12 = 12,
            En_Zone11 = 11,
            En_Zone10 = 10,
            En_Zone9 = 9,
            En_Zone8 = 8,
            En_Zone7 = 7,
            En_Zone6 = 6,
            En_Zone5 = 5,
            En_Zone4 = 4,
            En_Zone3 = 3,
            En_Zone2 = 2,
            En_Zone1 = 1,
            En_Off = 0
        };
        
        SidePrkSnsL4_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed)) {}
        SidePrkSnsL4_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed):
                case static_cast<int32_t>(Literal::En_NotFullyScannedYet):
                case static_cast<int32_t>(Literal::En_NoObjectInSector):
                case static_cast<int32_t>(Literal::En_Zone12):
                case static_cast<int32_t>(Literal::En_Zone11):
                case static_cast<int32_t>(Literal::En_Zone10):
                case static_cast<int32_t>(Literal::En_Zone9):
                case static_cast<int32_t>(Literal::En_Zone8):
                case static_cast<int32_t>(Literal::En_Zone7):
                case static_cast<int32_t>(Literal::En_Zone6):
                case static_cast<int32_t>(Literal::En_Zone5):
                case static_cast<int32_t>(Literal::En_Zone4):
                case static_cast<int32_t>(Literal::En_Zone3):
                case static_cast<int32_t>(Literal::En_Zone2):
                case static_cast<int32_t>(Literal::En_Zone1):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SidePrkSnsL4_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SidePrkSnsL4_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SidePrkSnsL4_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SidePrkSnsL4_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SidePrkSnsL4_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SidePrkSnsL4_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct SidePrkSnsR3_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed = 15,
            En_NotFullyScannedYet = 14,
            En_NoObjectInSector = 13,
            En_Zone12 = 12,
            En_Zone11 = 11,
            En_Zone10 = 10,
            En_Zone9 = 9,
            En_Zone8 = 8,
            En_Zone7 = 7,
            En_Zone6 = 6,
            En_Zone5 = 5,
            En_Zone4 = 4,
            En_Zone3 = 3,
            En_Zone2 = 2,
            En_Zone1 = 1,
            En_Off = 0
        };
        
        SidePrkSnsR3_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed)) {}
        SidePrkSnsR3_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed):
                case static_cast<int32_t>(Literal::En_NotFullyScannedYet):
                case static_cast<int32_t>(Literal::En_NoObjectInSector):
                case static_cast<int32_t>(Literal::En_Zone12):
                case static_cast<int32_t>(Literal::En_Zone11):
                case static_cast<int32_t>(Literal::En_Zone10):
                case static_cast<int32_t>(Literal::En_Zone9):
                case static_cast<int32_t>(Literal::En_Zone8):
                case static_cast<int32_t>(Literal::En_Zone7):
                case static_cast<int32_t>(Literal::En_Zone6):
                case static_cast<int32_t>(Literal::En_Zone5):
                case static_cast<int32_t>(Literal::En_Zone4):
                case static_cast<int32_t>(Literal::En_Zone3):
                case static_cast<int32_t>(Literal::En_Zone2):
                case static_cast<int32_t>(Literal::En_Zone1):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SidePrkSnsR3_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SidePrkSnsR3_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SidePrkSnsR3_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SidePrkSnsR3_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SidePrkSnsR3_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SidePrkSnsR3_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct SidePrkSnsR4_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed = 15,
            En_NotFullyScannedYet = 14,
            En_NoObjectInSector = 13,
            En_Zone12 = 12,
            En_Zone11 = 11,
            En_Zone10 = 10,
            En_Zone9 = 9,
            En_Zone8 = 8,
            En_Zone7 = 7,
            En_Zone6 = 6,
            En_Zone5 = 5,
            En_Zone4 = 4,
            En_Zone3 = 3,
            En_Zone2 = 2,
            En_Zone1 = 1,
            En_Off = 0
        };
        
        SidePrkSnsR4_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed)) {}
        SidePrkSnsR4_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed):
                case static_cast<int32_t>(Literal::En_NotFullyScannedYet):
                case static_cast<int32_t>(Literal::En_NoObjectInSector):
                case static_cast<int32_t>(Literal::En_Zone12):
                case static_cast<int32_t>(Literal::En_Zone11):
                case static_cast<int32_t>(Literal::En_Zone10):
                case static_cast<int32_t>(Literal::En_Zone9):
                case static_cast<int32_t>(Literal::En_Zone8):
                case static_cast<int32_t>(Literal::En_Zone7):
                case static_cast<int32_t>(Literal::En_Zone6):
                case static_cast<int32_t>(Literal::En_Zone5):
                case static_cast<int32_t>(Literal::En_Zone4):
                case static_cast<int32_t>(Literal::En_Zone3):
                case static_cast<int32_t>(Literal::En_Zone2):
                case static_cast<int32_t>(Literal::En_Zone1):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SidePrkSnsR4_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SidePrkSnsR4_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SidePrkSnsR4_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SidePrkSnsR4_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SidePrkSnsR4_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SidePrkSnsR4_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PrkAidMsgTxt_D_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_All_Sns_Blk = 15,
            En_R_Sns_ON_F_Sns_Blk = 14,
            En_R_Sns_Blk_F_Sns_ON = 13,
            En_R_Sns_Inactive_Trlr_atch = 12,
            En_Not_Avail_Trlr_attchd = 11,
            En_Fail_Mode_no_Chime = 10,
            En_Fail_Mode_with_Chime = 9,
            En_R_Sns_Trlr_F_Sns_Blk = 8,
            En_NotUsed3 = 7,
            En_Park_Sys_Alternate_Mode = 6,
            En_R_Snsrs_On_F_Snsrs_On = 5,
            En_NotUsed2 = 4,
            En_Reset_Message_Warn = 3,
            En_R_Snsrs_Off_F_Snsrs_On = 2,
            En_R_Snsrs_On_F_Snsrs_Off = 1,
            En_All_Park_Sensors_Off = 0
        };
        
        PrkAidMsgTxt_D_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_All_Sns_Blk)) {}
        PrkAidMsgTxt_D_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_All_Sns_Blk):
                case static_cast<int32_t>(Literal::En_R_Sns_ON_F_Sns_Blk):
                case static_cast<int32_t>(Literal::En_R_Sns_Blk_F_Sns_ON):
                case static_cast<int32_t>(Literal::En_R_Sns_Inactive_Trlr_atch):
                case static_cast<int32_t>(Literal::En_Not_Avail_Trlr_attchd):
                case static_cast<int32_t>(Literal::En_Fail_Mode_no_Chime):
                case static_cast<int32_t>(Literal::En_Fail_Mode_with_Chime):
                case static_cast<int32_t>(Literal::En_R_Sns_Trlr_F_Sns_Blk):
                case static_cast<int32_t>(Literal::En_NotUsed3):
                case static_cast<int32_t>(Literal::En_Park_Sys_Alternate_Mode):
                case static_cast<int32_t>(Literal::En_R_Snsrs_On_F_Snsrs_On):
                case static_cast<int32_t>(Literal::En_NotUsed2):
                case static_cast<int32_t>(Literal::En_Reset_Message_Warn):
                case static_cast<int32_t>(Literal::En_R_Snsrs_Off_F_Snsrs_On):
                case static_cast<int32_t>(Literal::En_R_Snsrs_On_F_Snsrs_Off):
                case static_cast<int32_t>(Literal::En_All_Park_Sensors_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PrkAidMsgTxt_D_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PrkAidMsgTxt_D_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PrkAidMsgTxt_D_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PrkAidMsgTxt_D_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PrkAidMsgTxt_D_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PrkAidMsgTxt_D_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct PrkAidMsgTxt_D_Rq_struct : CommonAPI::Struct<PrkAidMsgTxt_D_Rq_enum, uint8_t> {
    	
    	PrkAidMsgTxt_D_Rq_struct() {
    	}
    	PrkAidMsgTxt_D_Rq_struct(const PrkAidMsgTxt_D_Rq_enum &_prkAidMsgTxt_D_Rq_enum, const uint8_t &_status)
    	{
    		std::get<0>(values_) = _prkAidMsgTxt_D_Rq_enum;
    		std::get<1>(values_) = _status;
    	}
    	inline const PrkAidMsgTxt_D_Rq_enum &getPrkAidMsgTxt_D_Rq_enum() const { return std::get<0>(values_); }
    	inline void setPrkAidMsgTxt_D_Rq_enum(const PrkAidMsgTxt_D_Rq_enum &_value) { std::get<0>(values_) = _value; }
    	inline const uint8_t &getStatus() const { return std::get<1>(values_); }
    	inline void setStatus(const uint8_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const PrkAidMsgTxt_D_Rq_struct& _other) const {
                return (getPrkAidMsgTxt_D_Rq_enum() == _other.getPrkAidMsgTxt_D_Rq_enum() && getStatus() == _other.getStatus());
        }
    	inline bool operator!=(const PrkAidMsgTxt_D_Rq_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct PrkAidSnsFlCrnr_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Zone_15 = 15,
            En_Zone_14 = 14,
            En_Zone_13 = 13,
            En_Zone_12 = 12,
            En_Zone_11 = 11,
            En_Zone_10 = 10,
            En_Zone_9 = 9,
            En_Zone_8 = 8,
            En_Zone_7 = 7,
            En_Zone_6 = 6,
            En_Zone_5 = 5,
            En_Zone_4 = 4,
            En_Zone_3 = 3,
            En_Zone_2 = 2,
            En_Zone_1 = 1,
            En_Off = 0
        };
        
        PrkAidSnsFlCrnr_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Zone_15)) {}
        PrkAidSnsFlCrnr_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Zone_15):
                case static_cast<int32_t>(Literal::En_Zone_14):
                case static_cast<int32_t>(Literal::En_Zone_13):
                case static_cast<int32_t>(Literal::En_Zone_12):
                case static_cast<int32_t>(Literal::En_Zone_11):
                case static_cast<int32_t>(Literal::En_Zone_10):
                case static_cast<int32_t>(Literal::En_Zone_9):
                case static_cast<int32_t>(Literal::En_Zone_8):
                case static_cast<int32_t>(Literal::En_Zone_7):
                case static_cast<int32_t>(Literal::En_Zone_6):
                case static_cast<int32_t>(Literal::En_Zone_5):
                case static_cast<int32_t>(Literal::En_Zone_4):
                case static_cast<int32_t>(Literal::En_Zone_3):
                case static_cast<int32_t>(Literal::En_Zone_2):
                case static_cast<int32_t>(Literal::En_Zone_1):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PrkAidSnsFlCrnr_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PrkAidSnsFlCrnr_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PrkAidSnsFlCrnr_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PrkAidSnsFlCrnr_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PrkAidSnsFlCrnr_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PrkAidSnsFlCrnr_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PrkAidSnsFlCntr_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Zone_15 = 15,
            En_Zone_14 = 14,
            En_Zone_13 = 13,
            En_Zone_12 = 12,
            En_Zone_11 = 11,
            En_Zone_10 = 10,
            En_Zone_9 = 9,
            En_Zone_8 = 8,
            En_Zone_7 = 7,
            En_Zone_6 = 6,
            En_Zone_5 = 5,
            En_Zone_4 = 4,
            En_Zone_3 = 3,
            En_Zone_2 = 2,
            En_Zone_1 = 1,
            En_Off = 0
        };
        
        PrkAidSnsFlCntr_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Zone_15)) {}
        PrkAidSnsFlCntr_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Zone_15):
                case static_cast<int32_t>(Literal::En_Zone_14):
                case static_cast<int32_t>(Literal::En_Zone_13):
                case static_cast<int32_t>(Literal::En_Zone_12):
                case static_cast<int32_t>(Literal::En_Zone_11):
                case static_cast<int32_t>(Literal::En_Zone_10):
                case static_cast<int32_t>(Literal::En_Zone_9):
                case static_cast<int32_t>(Literal::En_Zone_8):
                case static_cast<int32_t>(Literal::En_Zone_7):
                case static_cast<int32_t>(Literal::En_Zone_6):
                case static_cast<int32_t>(Literal::En_Zone_5):
                case static_cast<int32_t>(Literal::En_Zone_4):
                case static_cast<int32_t>(Literal::En_Zone_3):
                case static_cast<int32_t>(Literal::En_Zone_2):
                case static_cast<int32_t>(Literal::En_Zone_1):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PrkAidSnsFlCntr_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PrkAidSnsFlCntr_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PrkAidSnsFlCntr_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PrkAidSnsFlCntr_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PrkAidSnsFlCntr_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PrkAidSnsFlCntr_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PrkAidSnsFrCntr_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Zone_15 = 15,
            En_Zone_14 = 14,
            En_Zone_13 = 13,
            En_Zone_12 = 12,
            En_Zone_11 = 11,
            En_Zone_10 = 10,
            En_Zone_9 = 9,
            En_Zone_8 = 8,
            En_Zone_7 = 7,
            En_Zone_6 = 6,
            En_Zone_5 = 5,
            En_Zone_4 = 4,
            En_Zone_3 = 3,
            En_Zone_2 = 2,
            En_Zone_1 = 1,
            En_Off = 0
        };
        
        PrkAidSnsFrCntr_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Zone_15)) {}
        PrkAidSnsFrCntr_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Zone_15):
                case static_cast<int32_t>(Literal::En_Zone_14):
                case static_cast<int32_t>(Literal::En_Zone_13):
                case static_cast<int32_t>(Literal::En_Zone_12):
                case static_cast<int32_t>(Literal::En_Zone_11):
                case static_cast<int32_t>(Literal::En_Zone_10):
                case static_cast<int32_t>(Literal::En_Zone_9):
                case static_cast<int32_t>(Literal::En_Zone_8):
                case static_cast<int32_t>(Literal::En_Zone_7):
                case static_cast<int32_t>(Literal::En_Zone_6):
                case static_cast<int32_t>(Literal::En_Zone_5):
                case static_cast<int32_t>(Literal::En_Zone_4):
                case static_cast<int32_t>(Literal::En_Zone_3):
                case static_cast<int32_t>(Literal::En_Zone_2):
                case static_cast<int32_t>(Literal::En_Zone_1):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PrkAidSnsFrCntr_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PrkAidSnsFrCntr_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PrkAidSnsFrCntr_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PrkAidSnsFrCntr_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PrkAidSnsFrCntr_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PrkAidSnsFrCntr_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PrkAidSnsFrCrnr_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Zone_15 = 15,
            En_Zone_14 = 14,
            En_Zone_13 = 13,
            En_Zone_12 = 12,
            En_Zone_11 = 11,
            En_Zone_10 = 10,
            En_Zone_9 = 9,
            En_Zone_8 = 8,
            En_Zone_7 = 7,
            En_Zone_6 = 6,
            En_Zone_5 = 5,
            En_Zone_4 = 4,
            En_Zone_3 = 3,
            En_Zone_2 = 2,
            En_Zone_1 = 1,
            En_Off = 0
        };
        
        PrkAidSnsFrCrnr_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Zone_15)) {}
        PrkAidSnsFrCrnr_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Zone_15):
                case static_cast<int32_t>(Literal::En_Zone_14):
                case static_cast<int32_t>(Literal::En_Zone_13):
                case static_cast<int32_t>(Literal::En_Zone_12):
                case static_cast<int32_t>(Literal::En_Zone_11):
                case static_cast<int32_t>(Literal::En_Zone_10):
                case static_cast<int32_t>(Literal::En_Zone_9):
                case static_cast<int32_t>(Literal::En_Zone_8):
                case static_cast<int32_t>(Literal::En_Zone_7):
                case static_cast<int32_t>(Literal::En_Zone_6):
                case static_cast<int32_t>(Literal::En_Zone_5):
                case static_cast<int32_t>(Literal::En_Zone_4):
                case static_cast<int32_t>(Literal::En_Zone_3):
                case static_cast<int32_t>(Literal::En_Zone_2):
                case static_cast<int32_t>(Literal::En_Zone_1):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PrkAidSnsFrCrnr_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PrkAidSnsFrCrnr_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PrkAidSnsFrCrnr_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PrkAidSnsFrCrnr_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PrkAidSnsFrCrnr_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PrkAidSnsFrCrnr_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct SidePrkSnsL2_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed = 15,
            En_NotFullyScannedYet = 14,
            En_NoObjectInSector = 13,
            En_Zone12 = 12,
            En_Zone11 = 11,
            En_Zone10 = 10,
            En_Zone9 = 9,
            En_Zone8 = 8,
            En_Zone7 = 7,
            En_Zone6 = 6,
            En_Zone5 = 5,
            En_Zone4 = 4,
            En_Zone3 = 3,
            En_Zone2 = 2,
            En_Zone1 = 1,
            En_Off = 0
        };
        
        SidePrkSnsL2_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed)) {}
        SidePrkSnsL2_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed):
                case static_cast<int32_t>(Literal::En_NotFullyScannedYet):
                case static_cast<int32_t>(Literal::En_NoObjectInSector):
                case static_cast<int32_t>(Literal::En_Zone12):
                case static_cast<int32_t>(Literal::En_Zone11):
                case static_cast<int32_t>(Literal::En_Zone10):
                case static_cast<int32_t>(Literal::En_Zone9):
                case static_cast<int32_t>(Literal::En_Zone8):
                case static_cast<int32_t>(Literal::En_Zone7):
                case static_cast<int32_t>(Literal::En_Zone6):
                case static_cast<int32_t>(Literal::En_Zone5):
                case static_cast<int32_t>(Literal::En_Zone4):
                case static_cast<int32_t>(Literal::En_Zone3):
                case static_cast<int32_t>(Literal::En_Zone2):
                case static_cast<int32_t>(Literal::En_Zone1):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SidePrkSnsL2_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SidePrkSnsL2_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SidePrkSnsL2_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SidePrkSnsL2_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SidePrkSnsL2_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SidePrkSnsL2_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct SidePrkSnsL1_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed = 15,
            En_NotFullyScannedYet = 14,
            En_NoObjectInSector = 13,
            En_Zone12 = 12,
            En_Zone11 = 11,
            En_Zone10 = 10,
            En_Zone9 = 9,
            En_Zone8 = 8,
            En_Zone7 = 7,
            En_Zone6 = 6,
            En_Zone5 = 5,
            En_Zone4 = 4,
            En_Zone3 = 3,
            En_Zone2 = 2,
            En_Zone1 = 1,
            En_Off = 0
        };
        
        SidePrkSnsL1_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed)) {}
        SidePrkSnsL1_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed):
                case static_cast<int32_t>(Literal::En_NotFullyScannedYet):
                case static_cast<int32_t>(Literal::En_NoObjectInSector):
                case static_cast<int32_t>(Literal::En_Zone12):
                case static_cast<int32_t>(Literal::En_Zone11):
                case static_cast<int32_t>(Literal::En_Zone10):
                case static_cast<int32_t>(Literal::En_Zone9):
                case static_cast<int32_t>(Literal::En_Zone8):
                case static_cast<int32_t>(Literal::En_Zone7):
                case static_cast<int32_t>(Literal::En_Zone6):
                case static_cast<int32_t>(Literal::En_Zone5):
                case static_cast<int32_t>(Literal::En_Zone4):
                case static_cast<int32_t>(Literal::En_Zone3):
                case static_cast<int32_t>(Literal::En_Zone2):
                case static_cast<int32_t>(Literal::En_Zone1):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SidePrkSnsL1_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SidePrkSnsL1_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SidePrkSnsL1_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SidePrkSnsL1_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SidePrkSnsL1_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SidePrkSnsL1_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct SidePrkSnsR2_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed = 15,
            En_NotFullyScannedYet = 14,
            En_NoObjectInSector = 13,
            En_Zone12 = 12,
            En_Zone11 = 11,
            En_Zone10 = 10,
            En_Zone9 = 9,
            En_Zone8 = 8,
            En_Zone7 = 7,
            En_Zone6 = 6,
            En_Zone5 = 5,
            En_Zone4 = 4,
            En_Zone3 = 3,
            En_Zone2 = 2,
            En_Zone1 = 1,
            En_Off = 0
        };
        
        SidePrkSnsR2_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed)) {}
        SidePrkSnsR2_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed):
                case static_cast<int32_t>(Literal::En_NotFullyScannedYet):
                case static_cast<int32_t>(Literal::En_NoObjectInSector):
                case static_cast<int32_t>(Literal::En_Zone12):
                case static_cast<int32_t>(Literal::En_Zone11):
                case static_cast<int32_t>(Literal::En_Zone10):
                case static_cast<int32_t>(Literal::En_Zone9):
                case static_cast<int32_t>(Literal::En_Zone8):
                case static_cast<int32_t>(Literal::En_Zone7):
                case static_cast<int32_t>(Literal::En_Zone6):
                case static_cast<int32_t>(Literal::En_Zone5):
                case static_cast<int32_t>(Literal::En_Zone4):
                case static_cast<int32_t>(Literal::En_Zone3):
                case static_cast<int32_t>(Literal::En_Zone2):
                case static_cast<int32_t>(Literal::En_Zone1):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SidePrkSnsR2_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SidePrkSnsR2_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SidePrkSnsR2_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SidePrkSnsR2_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SidePrkSnsR2_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SidePrkSnsR2_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct SidePrkSnsR1_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed = 15,
            En_NotFullyScannedYet = 14,
            En_NoObjectInSector = 13,
            En_Zone12 = 12,
            En_Zone11 = 11,
            En_Zone10 = 10,
            En_Zone9 = 9,
            En_Zone8 = 8,
            En_Zone7 = 7,
            En_Zone6 = 6,
            En_Zone5 = 5,
            En_Zone4 = 4,
            En_Zone3 = 3,
            En_Zone2 = 2,
            En_Zone1 = 1,
            En_Off = 0
        };
        
        SidePrkSnsR1_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed)) {}
        SidePrkSnsR1_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed):
                case static_cast<int32_t>(Literal::En_NotFullyScannedYet):
                case static_cast<int32_t>(Literal::En_NoObjectInSector):
                case static_cast<int32_t>(Literal::En_Zone12):
                case static_cast<int32_t>(Literal::En_Zone11):
                case static_cast<int32_t>(Literal::En_Zone10):
                case static_cast<int32_t>(Literal::En_Zone9):
                case static_cast<int32_t>(Literal::En_Zone8):
                case static_cast<int32_t>(Literal::En_Zone7):
                case static_cast<int32_t>(Literal::En_Zone6):
                case static_cast<int32_t>(Literal::En_Zone5):
                case static_cast<int32_t>(Literal::En_Zone4):
                case static_cast<int32_t>(Literal::En_Zone3):
                case static_cast<int32_t>(Literal::En_Zone2):
                case static_cast<int32_t>(Literal::En_Zone1):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SidePrkSnsR1_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SidePrkSnsR1_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SidePrkSnsR1_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SidePrkSnsR1_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SidePrkSnsR1_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SidePrkSnsR1_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.harman.ford.visualparkassist_types";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct visualparkassist_types

} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for PrkAidSnsRlCrnr_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::visualparkassist_types::PrkAidSnsRlCrnr_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::visualparkassist_types::PrkAidSnsRlCrnr_D_Stat_enum& prkAidSnsRlCrnr_D_Stat_enum) const {
            return static_cast<int32_t>(prkAidSnsRlCrnr_D_Stat_enum);
        }
    };
    //Hash for PrkAidSnsRlCntr_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::visualparkassist_types::PrkAidSnsRlCntr_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::visualparkassist_types::PrkAidSnsRlCntr_D_Stat_enum& prkAidSnsRlCntr_D_Stat_enum) const {
            return static_cast<int32_t>(prkAidSnsRlCntr_D_Stat_enum);
        }
    };
    //Hash for PrkAidSnsRrCntr_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::visualparkassist_types::PrkAidSnsRrCntr_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::visualparkassist_types::PrkAidSnsRrCntr_D_Stat_enum& prkAidSnsRrCntr_D_Stat_enum) const {
            return static_cast<int32_t>(prkAidSnsRrCntr_D_Stat_enum);
        }
    };
    //Hash for PrkAidSnsRrCrnr_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::visualparkassist_types::PrkAidSnsRrCrnr_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::visualparkassist_types::PrkAidSnsRrCrnr_D_Stat_enum& prkAidSnsRrCrnr_D_Stat_enum) const {
            return static_cast<int32_t>(prkAidSnsRrCrnr_D_Stat_enum);
        }
    };
    //Hash for SidePrkSnsL3_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::visualparkassist_types::SidePrkSnsL3_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::visualparkassist_types::SidePrkSnsL3_D_Stat_enum& sidePrkSnsL3_D_Stat_enum) const {
            return static_cast<int32_t>(sidePrkSnsL3_D_Stat_enum);
        }
    };
    //Hash for SidePrkSnsL4_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::visualparkassist_types::SidePrkSnsL4_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::visualparkassist_types::SidePrkSnsL4_D_Stat_enum& sidePrkSnsL4_D_Stat_enum) const {
            return static_cast<int32_t>(sidePrkSnsL4_D_Stat_enum);
        }
    };
    //Hash for SidePrkSnsR3_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::visualparkassist_types::SidePrkSnsR3_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::visualparkassist_types::SidePrkSnsR3_D_Stat_enum& sidePrkSnsR3_D_Stat_enum) const {
            return static_cast<int32_t>(sidePrkSnsR3_D_Stat_enum);
        }
    };
    //Hash for SidePrkSnsR4_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::visualparkassist_types::SidePrkSnsR4_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::visualparkassist_types::SidePrkSnsR4_D_Stat_enum& sidePrkSnsR4_D_Stat_enum) const {
            return static_cast<int32_t>(sidePrkSnsR4_D_Stat_enum);
        }
    };
    //Hash for PrkAidMsgTxt_D_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::visualparkassist_types::PrkAidMsgTxt_D_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::visualparkassist_types::PrkAidMsgTxt_D_Rq_enum& prkAidMsgTxt_D_Rq_enum) const {
            return static_cast<int32_t>(prkAidMsgTxt_D_Rq_enum);
        }
    };
    //Hash for PrkAidSnsFlCrnr_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::visualparkassist_types::PrkAidSnsFlCrnr_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::visualparkassist_types::PrkAidSnsFlCrnr_D_Stat_enum& prkAidSnsFlCrnr_D_Stat_enum) const {
            return static_cast<int32_t>(prkAidSnsFlCrnr_D_Stat_enum);
        }
    };
    //Hash for PrkAidSnsFlCntr_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::visualparkassist_types::PrkAidSnsFlCntr_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::visualparkassist_types::PrkAidSnsFlCntr_D_Stat_enum& prkAidSnsFlCntr_D_Stat_enum) const {
            return static_cast<int32_t>(prkAidSnsFlCntr_D_Stat_enum);
        }
    };
    //Hash for PrkAidSnsFrCntr_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::visualparkassist_types::PrkAidSnsFrCntr_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::visualparkassist_types::PrkAidSnsFrCntr_D_Stat_enum& prkAidSnsFrCntr_D_Stat_enum) const {
            return static_cast<int32_t>(prkAidSnsFrCntr_D_Stat_enum);
        }
    };
    //Hash for PrkAidSnsFrCrnr_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::visualparkassist_types::PrkAidSnsFrCrnr_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::visualparkassist_types::PrkAidSnsFrCrnr_D_Stat_enum& prkAidSnsFrCrnr_D_Stat_enum) const {
            return static_cast<int32_t>(prkAidSnsFrCrnr_D_Stat_enum);
        }
    };
    //Hash for SidePrkSnsL2_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::visualparkassist_types::SidePrkSnsL2_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::visualparkassist_types::SidePrkSnsL2_D_Stat_enum& sidePrkSnsL2_D_Stat_enum) const {
            return static_cast<int32_t>(sidePrkSnsL2_D_Stat_enum);
        }
    };
    //Hash for SidePrkSnsL1_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::visualparkassist_types::SidePrkSnsL1_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::visualparkassist_types::SidePrkSnsL1_D_Stat_enum& sidePrkSnsL1_D_Stat_enum) const {
            return static_cast<int32_t>(sidePrkSnsL1_D_Stat_enum);
        }
    };
    //Hash for SidePrkSnsR2_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::visualparkassist_types::SidePrkSnsR2_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::visualparkassist_types::SidePrkSnsR2_D_Stat_enum& sidePrkSnsR2_D_Stat_enum) const {
            return static_cast<int32_t>(sidePrkSnsR2_D_Stat_enum);
        }
    };
    //Hash for SidePrkSnsR1_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::visualparkassist_types::SidePrkSnsR1_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::visualparkassist_types::SidePrkSnsR1_D_Stat_enum& sidePrkSnsR1_D_Stat_enum) const {
            return static_cast<int32_t>(sidePrkSnsR1_D_Stat_enum);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_FORD_visualparkassist_types_HPP_

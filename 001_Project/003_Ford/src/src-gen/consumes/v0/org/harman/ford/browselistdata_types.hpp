/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_ORG_HARMAN_FORD_browselistdata_types_HPP_
#define V0_ORG_HARMAN_FORD_browselistdata_types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace ford {

struct browselistdata_types {
    
    struct LBS1_ListStatus_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Reserved = 3,
            En_Updating = 2,
            En_Valid = 1,
            En_Inactive = 0
        };
        
        LBS1_ListStatus_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Reserved)) {}
        LBS1_ListStatus_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Reserved):
                case static_cast<int32_t>(Literal::En_Updating):
                case static_cast<int32_t>(Literal::En_Valid):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const LBS1_ListStatus_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const LBS1_ListStatus_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const LBS1_ListStatus_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const LBS1_ListStatus_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const LBS1_ListStatus_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const LBS1_ListStatus_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct LBClient1_Request_Signals_struct : CommonAPI::Struct<uint16_t, uint16_t, uint8_t, uint8_t, uint8_t, uint16_t> {
    	
    	LBClient1_Request_Signals_struct() {
    	}
    	LBClient1_Request_Signals_struct(const uint16_t &_LBC1_ActiveListID, const uint16_t &_LBC1_ItemIndex, const uint8_t &_LBC1_NbrOfItems, const uint8_t &_LBC1_Opcode, const uint8_t &_LBC1_SetListServ, const uint16_t &_LBC1_StartItemInd)
    	{
    		std::get<0>(values_) = _LBC1_ActiveListID;
    		std::get<1>(values_) = _LBC1_ItemIndex;
    		std::get<2>(values_) = _LBC1_NbrOfItems;
    		std::get<3>(values_) = _LBC1_Opcode;
    		std::get<4>(values_) = _LBC1_SetListServ;
    		std::get<5>(values_) = _LBC1_StartItemInd;
    	}
    	inline const uint16_t &getLBC1_ActiveListID() const { return std::get<0>(values_); }
    	inline void setLBC1_ActiveListID(const uint16_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint16_t &getLBC1_ItemIndex() const { return std::get<1>(values_); }
    	inline void setLBC1_ItemIndex(const uint16_t &_value) { std::get<1>(values_) = _value; }
    	inline const uint8_t &getLBC1_NbrOfItems() const { return std::get<2>(values_); }
    	inline void setLBC1_NbrOfItems(const uint8_t &_value) { std::get<2>(values_) = _value; }
    	inline const uint8_t &getLBC1_Opcode() const { return std::get<3>(values_); }
    	inline void setLBC1_Opcode(const uint8_t &_value) { std::get<3>(values_) = _value; }
    	inline const uint8_t &getLBC1_SetListServ() const { return std::get<4>(values_); }
    	inline void setLBC1_SetListServ(const uint8_t &_value) { std::get<4>(values_) = _value; }
    	inline const uint16_t &getLBC1_StartItemInd() const { return std::get<5>(values_); }
    	inline void setLBC1_StartItemInd(const uint16_t &_value) { std::get<5>(values_) = _value; }
    	inline bool operator==(const LBClient1_Request_Signals_struct& _other) const {
                return (getLBC1_ActiveListID() == _other.getLBC1_ActiveListID() && getLBC1_ItemIndex() == _other.getLBC1_ItemIndex() && getLBC1_NbrOfItems() == _other.getLBC1_NbrOfItems() && getLBC1_Opcode() == _other.getLBC1_Opcode() && getLBC1_SetListServ() == _other.getLBC1_SetListServ() && getLBC1_StartItemInd() == _other.getLBC1_StartItemInd());
        }
    	inline bool operator!=(const LBClient1_Request_Signals_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.harman.ford.browselistdata_types";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct browselistdata_types

} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for LBS1_ListStatus_enum
    template<>
    struct hash<::v0::org::harman::ford::browselistdata_types::LBS1_ListStatus_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::browselistdata_types::LBS1_ListStatus_enum& lBS1_ListStatus_enum) const {
            return static_cast<int32_t>(lBS1_ListStatus_enum);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_FORD_browselistdata_types_HPP_

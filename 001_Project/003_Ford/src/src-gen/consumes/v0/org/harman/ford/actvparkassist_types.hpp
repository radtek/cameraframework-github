/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_ORG_HARMAN_FORD_actvparkassist_types_HPP_
#define V0_ORG_HARMAN_FORD_actvparkassist_types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace ford {

struct actvparkassist_types {
    
    struct PrkAidDrvDir_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed_2 = 7,
            En_NotUsed_1 = 6,
            En_BackwardNegative = 5,
            En_ForwardNegative = 4,
            En_BackwardPositive = 3,
            En_ForwardPositive = 2,
            En_NoMotion = 1,
            En_DirectionNotKnown = 0
        };
        
        PrkAidDrvDir_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed_2)) {}
        PrkAidDrvDir_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed_2):
                case static_cast<int32_t>(Literal::En_NotUsed_1):
                case static_cast<int32_t>(Literal::En_BackwardNegative):
                case static_cast<int32_t>(Literal::En_ForwardNegative):
                case static_cast<int32_t>(Literal::En_BackwardPositive):
                case static_cast<int32_t>(Literal::En_ForwardPositive):
                case static_cast<int32_t>(Literal::En_NoMotion):
                case static_cast<int32_t>(Literal::En_DirectionNotKnown):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PrkAidDrvDir_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PrkAidDrvDir_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PrkAidDrvDir_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PrkAidDrvDir_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PrkAidDrvDir_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PrkAidDrvDir_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ApaMde_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed3 = 7,
            En_NotUsed2 = 6,
            En_NotUsed1 = 5,
            En_POA = 4,
            En_PPA = 3,
            En_SAPP = 2,
            En_Off = 1,
            En_Null = 0
        };
        
        ApaMde_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed3)) {}
        ApaMde_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed3):
                case static_cast<int32_t>(Literal::En_NotUsed2):
                case static_cast<int32_t>(Literal::En_NotUsed1):
                case static_cast<int32_t>(Literal::En_POA):
                case static_cast<int32_t>(Literal::En_PPA):
                case static_cast<int32_t>(Literal::En_SAPP):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ApaMde_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ApaMde_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ApaMde_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ApaMde_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ApaMde_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ApaMde_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct ApaMde_D_Stat_struct : CommonAPI::Struct<ApaMde_D_Stat_enum, uint8_t> {
    	
    	ApaMde_D_Stat_struct() {
    	}
    	ApaMde_D_Stat_struct(const ApaMde_D_Stat_enum &_apaMde_D_Stat_enum, const uint8_t &_status)
    	{
    		std::get<0>(values_) = _apaMde_D_Stat_enum;
    		std::get<1>(values_) = _status;
    	}
    	inline const ApaMde_D_Stat_enum &getApaMde_D_Stat_enum() const { return std::get<0>(values_); }
    	inline void setApaMde_D_Stat_enum(const ApaMde_D_Stat_enum &_value) { std::get<0>(values_) = _value; }
    	inline const uint8_t &getStatus() const { return std::get<1>(values_); }
    	inline void setStatus(const uint8_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const ApaMde_D_Stat_struct& _other) const {
                return (getApaMde_D_Stat_enum() == _other.getApaMde_D_Stat_enum() && getStatus() == _other.getStatus());
        }
    	inline bool operator!=(const ApaMde_D_Stat_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct ApaMdeStat_D_RqDrv_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Faulty = 7,
            En_Off = 6,
            En_NotUsed2 = 5,
            En_NotUsed1 = 4,
            En_POA = 3,
            En_PPA = 2,
            En_SAPP = 1,
            En_Inactive = 0
        };
        
        ApaMdeStat_D_RqDrv_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Faulty)) {}
        ApaMdeStat_D_RqDrv_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Faulty):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_NotUsed2):
                case static_cast<int32_t>(Literal::En_NotUsed1):
                case static_cast<int32_t>(Literal::En_POA):
                case static_cast<int32_t>(Literal::En_PPA):
                case static_cast<int32_t>(Literal::En_SAPP):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ApaMdeStat_D_RqDrv_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ApaMdeStat_D_RqDrv_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ApaMdeStat_D_RqDrv_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ApaMdeStat_D_RqDrv_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ApaMdeStat_D_RqDrv_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ApaMdeStat_D_RqDrv_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ApaTrgtDist_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Step15 = 15,
            En_Step14 = 14,
            En_Step13 = 13,
            En_Step12 = 12,
            En_Step11 = 11,
            En_Step10 = 10,
            En_Step9 = 9,
            En_Step8 = 8,
            En_Step7 = 7,
            En_Step6 = 6,
            En_Step5 = 5,
            En_Step4 = 4,
            En_Step3 = 3,
            En_Step2 = 2,
            En_Step1 = 1,
            En_Off = 0
        };
        
        ApaTrgtDist_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Step15)) {}
        ApaTrgtDist_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Step15):
                case static_cast<int32_t>(Literal::En_Step14):
                case static_cast<int32_t>(Literal::En_Step13):
                case static_cast<int32_t>(Literal::En_Step12):
                case static_cast<int32_t>(Literal::En_Step11):
                case static_cast<int32_t>(Literal::En_Step10):
                case static_cast<int32_t>(Literal::En_Step9):
                case static_cast<int32_t>(Literal::En_Step8):
                case static_cast<int32_t>(Literal::En_Step7):
                case static_cast<int32_t>(Literal::En_Step6):
                case static_cast<int32_t>(Literal::En_Step5):
                case static_cast<int32_t>(Literal::En_Step4):
                case static_cast<int32_t>(Literal::En_Step3):
                case static_cast<int32_t>(Literal::En_Step2):
                case static_cast<int32_t>(Literal::En_Step1):
                case static_cast<int32_t>(Literal::En_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ApaTrgtDist_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ApaTrgtDist_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ApaTrgtDist_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ApaTrgtDist_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ApaTrgtDist_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ApaTrgtDist_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ApaMsgTxt_D_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed = 10,
            En_AccelPedalInactive = 9,
            En_WrongDirection = 8,
            En_SteeringInteraction = 7,
            En_BrakingActive = 6,
            En_HighInclination = 5,
            En_SpeedLimitExceeded = 4,
            En_TcsDisabled = 3,
            En_WheelSlip = 2,
            En_None = 1,
            En_Null = 0
        };
        
        ApaMsgTxt_D_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed)) {}
        ApaMsgTxt_D_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed):
                case static_cast<int32_t>(Literal::En_AccelPedalInactive):
                case static_cast<int32_t>(Literal::En_WrongDirection):
                case static_cast<int32_t>(Literal::En_SteeringInteraction):
                case static_cast<int32_t>(Literal::En_BrakingActive):
                case static_cast<int32_t>(Literal::En_HighInclination):
                case static_cast<int32_t>(Literal::En_SpeedLimitExceeded):
                case static_cast<int32_t>(Literal::En_TcsDisabled):
                case static_cast<int32_t>(Literal::En_WheelSlip):
                case static_cast<int32_t>(Literal::En_None):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ApaMsgTxt_D_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ApaMsgTxt_D_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ApaMsgTxt_D_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ApaMsgTxt_D_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ApaMsgTxt_D_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ApaMsgTxt_D_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ApaActvSide2_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NoSide = 3,
            En_Right = 2,
            En_Left = 1,
            En_Null = 0
        };
        
        ApaActvSide2_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NoSide)) {}
        ApaActvSide2_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NoSide):
                case static_cast<int32_t>(Literal::En_Right):
                case static_cast<int32_t>(Literal::En_Left):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ApaActvSide2_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ApaActvSide2_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ApaActvSide2_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ApaActvSide2_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ApaActvSide2_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ApaActvSide2_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ApaAcsy_D_RqDrv_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_CloseDoor = 7,
            En_SelectSideRight = 6,
            En_SelectSideLeft = 5,
            En_CheckForObject = 4,
            En_PressApaButton = 3,
            En_SelectSide = 2,
            En_NoRequest = 1,
            En_Null = 0
        };
        
        ApaAcsy_D_RqDrv_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_CloseDoor)) {}
        ApaAcsy_D_RqDrv_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_CloseDoor):
                case static_cast<int32_t>(Literal::En_SelectSideRight):
                case static_cast<int32_t>(Literal::En_SelectSideLeft):
                case static_cast<int32_t>(Literal::En_CheckForObject):
                case static_cast<int32_t>(Literal::En_PressApaButton):
                case static_cast<int32_t>(Literal::En_SelectSide):
                case static_cast<int32_t>(Literal::En_NoRequest):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ApaAcsy_D_RqDrv_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ApaAcsy_D_RqDrv_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ApaAcsy_D_RqDrv_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ApaAcsy_D_RqDrv_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ApaAcsy_D_RqDrv_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ApaAcsy_D_RqDrv_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ApaScan_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_ParkSlotReady = 3,
            En_ParkSlotFound = 2,
            En_NoParkSlot = 1,
            En_Null = 0
        };
        
        ApaScan_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_ParkSlotReady)) {}
        ApaScan_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_ParkSlotReady):
                case static_cast<int32_t>(Literal::En_ParkSlotFound):
                case static_cast<int32_t>(Literal::En_NoParkSlot):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ApaScan_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ApaScan_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ApaScan_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ApaScan_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ApaScan_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ApaScan_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ApaLongCtl_D_RqDrv_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed_3 = 7,
            En_NotUsed_2 = 6,
            En_ReleaseBrake = 5,
            En_DriveBackward = 4,
            En_DriveForward = 3,
            En_Stop = 2,
            En_NoRequest = 1,
            En_Null = 0
        };
        
        ApaLongCtl_D_RqDrv_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed_3)) {}
        ApaLongCtl_D_RqDrv_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed_3):
                case static_cast<int32_t>(Literal::En_NotUsed_2):
                case static_cast<int32_t>(Literal::En_ReleaseBrake):
                case static_cast<int32_t>(Literal::En_DriveBackward):
                case static_cast<int32_t>(Literal::En_DriveForward):
                case static_cast<int32_t>(Literal::En_Stop):
                case static_cast<int32_t>(Literal::En_NoRequest):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ApaLongCtl_D_RqDrv_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ApaLongCtl_D_RqDrv_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ApaLongCtl_D_RqDrv_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ApaLongCtl_D_RqDrv_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ApaLongCtl_D_RqDrv_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ApaLongCtl_D_RqDrv_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ApaGearShif_D_RqDrv_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed_2 = 7,
            En_NotUsed_1 = 6,
            En_ShiftToP = 5,
            En_ShiftToN = 4,
            En_ShiftToD = 3,
            En_ShiftToR = 2,
            En_NoRequest = 1,
            En_Null = 0
        };
        
        ApaGearShif_D_RqDrv_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed_2)) {}
        ApaGearShif_D_RqDrv_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed_2):
                case static_cast<int32_t>(Literal::En_NotUsed_1):
                case static_cast<int32_t>(Literal::En_ShiftToP):
                case static_cast<int32_t>(Literal::En_ShiftToN):
                case static_cast<int32_t>(Literal::En_ShiftToD):
                case static_cast<int32_t>(Literal::En_ShiftToR):
                case static_cast<int32_t>(Literal::En_NoRequest):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ApaGearShif_D_RqDrv_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ApaGearShif_D_RqDrv_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ApaGearShif_D_RqDrv_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ApaGearShif_D_RqDrv_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ApaGearShif_D_RqDrv_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ApaGearShif_D_RqDrv_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ApaSteScanMde_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Steering = 3,
            En_Scanning = 2,
            En_NotScanning = 1,
            En_Null = 0
        };
        
        ApaSteScanMde_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Steering)) {}
        ApaSteScanMde_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Steering):
                case static_cast<int32_t>(Literal::En_Scanning):
                case static_cast<int32_t>(Literal::En_NotScanning):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ApaSteScanMde_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ApaSteScanMde_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ApaSteScanMde_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ApaSteScanMde_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ApaSteScanMde_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ApaSteScanMde_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ApaSelSapp_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotConfigured = 3,
            En_NotSelectable = 2,
            En_Selectable = 1,
            En_Null = 0
        };
        
        ApaSelSapp_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotConfigured)) {}
        ApaSelSapp_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotConfigured):
                case static_cast<int32_t>(Literal::En_NotSelectable):
                case static_cast<int32_t>(Literal::En_Selectable):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ApaSelSapp_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ApaSelSapp_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ApaSelSapp_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ApaSelSapp_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ApaSelSapp_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ApaSelSapp_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ApaSelPpa_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotConfigured = 3,
            En_NotSelectable = 2,
            En_Selectable = 1,
            En_Null = 0
        };
        
        ApaSelPpa_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotConfigured)) {}
        ApaSelPpa_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotConfigured):
                case static_cast<int32_t>(Literal::En_NotSelectable):
                case static_cast<int32_t>(Literal::En_Selectable):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ApaSelPpa_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ApaSelPpa_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ApaSelPpa_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ApaSelPpa_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ApaSelPpa_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ApaSelPpa_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ApaSelPoa_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotConfigured = 3,
            En_NotSelectable = 2,
            En_Selectable = 1,
            En_Null = 0
        };
        
        ApaSelPoa_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotConfigured)) {}
        ApaSelPoa_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotConfigured):
                case static_cast<int32_t>(Literal::En_NotSelectable):
                case static_cast<int32_t>(Literal::En_Selectable):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ApaSelPoa_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ApaSelPoa_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ApaSelPoa_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ApaSelPoa_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ApaSelPoa_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ApaSelPoa_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ApaSys_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Faulty = 7,
            En_Finished = 6,
            En_NotAccessible = 5,
            En_ApaCancelled = 4,
            En_Overspeed = 3,
            En_On = 2,
            En_Off = 1,
            En_Null = 0
        };
        
        ApaSys_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Faulty)) {}
        ApaSys_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Faulty):
                case static_cast<int32_t>(Literal::En_Finished):
                case static_cast<int32_t>(Literal::En_NotAccessible):
                case static_cast<int32_t>(Literal::En_ApaCancelled):
                case static_cast<int32_t>(Literal::En_Overspeed):
                case static_cast<int32_t>(Literal::En_On):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ApaSys_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ApaSys_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ApaSys_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ApaSys_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ApaSys_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ApaSys_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ApaSteWhl_D_RqDrv_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_TakeControl = 3,
            En_RemoveHands = 2,
            En_NoRequest = 1,
            En_Null = 0
        };
        
        ApaSteWhl_D_RqDrv_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_TakeControl)) {}
        ApaSteWhl_D_RqDrv_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_TakeControl):
                case static_cast<int32_t>(Literal::En_RemoveHands):
                case static_cast<int32_t>(Literal::En_NoRequest):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ApaSteWhl_D_RqDrv_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ApaSteWhl_D_RqDrv_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ApaSteWhl_D_RqDrv_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ApaSteWhl_D_RqDrv_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ApaSteWhl_D_RqDrv_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ApaSteWhl_D_RqDrv_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct ParkAid_Data_HS3_struct : CommonAPI::Struct<ApaTrgtDist_D_Stat_enum, ApaMsgTxt_D_Rq_enum, ApaActvSide2_D_Stat_enum, ApaAcsy_D_RqDrv_enum, ApaScan_D_Stat_enum, ApaLongCtl_D_RqDrv_enum, ApaGearShif_D_RqDrv_enum, ApaSteScanMde_D_Stat_enum, ApaSelSapp_D_Stat_enum, ApaSelPpa_D_Stat_enum, ApaSelPoa_D_Stat_enum, ApaSys_D_Stat_enum, ApaSteWhl_D_RqDrv_enum> {
    	
    	ParkAid_Data_HS3_struct() {
    	}
    	ParkAid_Data_HS3_struct(const ApaTrgtDist_D_Stat_enum &_apaTrgtDist_D_Stat_enum, const ApaMsgTxt_D_Rq_enum &_apaMsgTxt_D_Rq_enum, const ApaActvSide2_D_Stat_enum &_apaActvSide2_D_Stat_enum, const ApaAcsy_D_RqDrv_enum &_apaAcsy_D_RqDrv_enum, const ApaScan_D_Stat_enum &_apaScan_D_Stat_enum, const ApaLongCtl_D_RqDrv_enum &_apaLongCtl_D_RqDrv_enum, const ApaGearShif_D_RqDrv_enum &_apaGearShif_D_RqDrv_enum, const ApaSteScanMde_D_Stat_enum &_apaSteScanMde_D_Stat_enum, const ApaSelSapp_D_Stat_enum &_apaSelSapp_D_Stat_enum, const ApaSelPpa_D_Stat_enum &_apaSelPpa_D_Stat_enum, const ApaSelPoa_D_Stat_enum &_apaSelPoa_D_Stat_enum, const ApaSys_D_Stat_enum &_apaSys_D_Stat_enum, const ApaSteWhl_D_RqDrv_enum &_apaSteWhl_D_RqDrv_enum)
    	{
    		std::get<0>(values_) = _apaTrgtDist_D_Stat_enum;
    		std::get<1>(values_) = _apaMsgTxt_D_Rq_enum;
    		std::get<2>(values_) = _apaActvSide2_D_Stat_enum;
    		std::get<3>(values_) = _apaAcsy_D_RqDrv_enum;
    		std::get<4>(values_) = _apaScan_D_Stat_enum;
    		std::get<5>(values_) = _apaLongCtl_D_RqDrv_enum;
    		std::get<6>(values_) = _apaGearShif_D_RqDrv_enum;
    		std::get<7>(values_) = _apaSteScanMde_D_Stat_enum;
    		std::get<8>(values_) = _apaSelSapp_D_Stat_enum;
    		std::get<9>(values_) = _apaSelPpa_D_Stat_enum;
    		std::get<10>(values_) = _apaSelPoa_D_Stat_enum;
    		std::get<11>(values_) = _apaSys_D_Stat_enum;
    		std::get<12>(values_) = _apaSteWhl_D_RqDrv_enum;
    	}
    	inline const ApaTrgtDist_D_Stat_enum &getApaTrgtDist_D_Stat_enum() const { return std::get<0>(values_); }
    	inline void setApaTrgtDist_D_Stat_enum(const ApaTrgtDist_D_Stat_enum &_value) { std::get<0>(values_) = _value; }
    	inline const ApaMsgTxt_D_Rq_enum &getApaMsgTxt_D_Rq_enum() const { return std::get<1>(values_); }
    	inline void setApaMsgTxt_D_Rq_enum(const ApaMsgTxt_D_Rq_enum &_value) { std::get<1>(values_) = _value; }
    	inline const ApaActvSide2_D_Stat_enum &getApaActvSide2_D_Stat_enum() const { return std::get<2>(values_); }
    	inline void setApaActvSide2_D_Stat_enum(const ApaActvSide2_D_Stat_enum &_value) { std::get<2>(values_) = _value; }
    	inline const ApaAcsy_D_RqDrv_enum &getApaAcsy_D_RqDrv_enum() const { return std::get<3>(values_); }
    	inline void setApaAcsy_D_RqDrv_enum(const ApaAcsy_D_RqDrv_enum &_value) { std::get<3>(values_) = _value; }
    	inline const ApaScan_D_Stat_enum &getApaScan_D_Stat_enum() const { return std::get<4>(values_); }
    	inline void setApaScan_D_Stat_enum(const ApaScan_D_Stat_enum &_value) { std::get<4>(values_) = _value; }
    	inline const ApaLongCtl_D_RqDrv_enum &getApaLongCtl_D_RqDrv_enum() const { return std::get<5>(values_); }
    	inline void setApaLongCtl_D_RqDrv_enum(const ApaLongCtl_D_RqDrv_enum &_value) { std::get<5>(values_) = _value; }
    	inline const ApaGearShif_D_RqDrv_enum &getApaGearShif_D_RqDrv_enum() const { return std::get<6>(values_); }
    	inline void setApaGearShif_D_RqDrv_enum(const ApaGearShif_D_RqDrv_enum &_value) { std::get<6>(values_) = _value; }
    	inline const ApaSteScanMde_D_Stat_enum &getApaSteScanMde_D_Stat_enum() const { return std::get<7>(values_); }
    	inline void setApaSteScanMde_D_Stat_enum(const ApaSteScanMde_D_Stat_enum &_value) { std::get<7>(values_) = _value; }
    	inline const ApaSelSapp_D_Stat_enum &getApaSelSapp_D_Stat_enum() const { return std::get<8>(values_); }
    	inline void setApaSelSapp_D_Stat_enum(const ApaSelSapp_D_Stat_enum &_value) { std::get<8>(values_) = _value; }
    	inline const ApaSelPpa_D_Stat_enum &getApaSelPpa_D_Stat_enum() const { return std::get<9>(values_); }
    	inline void setApaSelPpa_D_Stat_enum(const ApaSelPpa_D_Stat_enum &_value) { std::get<9>(values_) = _value; }
    	inline const ApaSelPoa_D_Stat_enum &getApaSelPoa_D_Stat_enum() const { return std::get<10>(values_); }
    	inline void setApaSelPoa_D_Stat_enum(const ApaSelPoa_D_Stat_enum &_value) { std::get<10>(values_) = _value; }
    	inline const ApaSys_D_Stat_enum &getApaSys_D_Stat_enum() const { return std::get<11>(values_); }
    	inline void setApaSys_D_Stat_enum(const ApaSys_D_Stat_enum &_value) { std::get<11>(values_) = _value; }
    	inline const ApaSteWhl_D_RqDrv_enum &getApaSteWhl_D_RqDrv_enum() const { return std::get<12>(values_); }
    	inline void setApaSteWhl_D_RqDrv_enum(const ApaSteWhl_D_RqDrv_enum &_value) { std::get<12>(values_) = _value; }
    	inline bool operator==(const ParkAid_Data_HS3_struct& _other) const {
                return (getApaTrgtDist_D_Stat_enum() == _other.getApaTrgtDist_D_Stat_enum() && getApaMsgTxt_D_Rq_enum() == _other.getApaMsgTxt_D_Rq_enum() && getApaActvSide2_D_Stat_enum() == _other.getApaActvSide2_D_Stat_enum() && getApaAcsy_D_RqDrv_enum() == _other.getApaAcsy_D_RqDrv_enum() && getApaScan_D_Stat_enum() == _other.getApaScan_D_Stat_enum() && getApaLongCtl_D_RqDrv_enum() == _other.getApaLongCtl_D_RqDrv_enum() && getApaGearShif_D_RqDrv_enum() == _other.getApaGearShif_D_RqDrv_enum() && getApaSteScanMde_D_Stat_enum() == _other.getApaSteScanMde_D_Stat_enum() && getApaSelSapp_D_Stat_enum() == _other.getApaSelSapp_D_Stat_enum() && getApaSelPpa_D_Stat_enum() == _other.getApaSelPpa_D_Stat_enum() && getApaSelPoa_D_Stat_enum() == _other.getApaSelPoa_D_Stat_enum() && getApaSys_D_Stat_enum() == _other.getApaSys_D_Stat_enum() && getApaSteWhl_D_RqDrv_enum() == _other.getApaSteWhl_D_RqDrv_enum());
        }
    	inline bool operator!=(const ParkAid_Data_HS3_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.harman.ford.actvparkassist_types";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct actvparkassist_types

} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for PrkAidDrvDir_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::actvparkassist_types::PrkAidDrvDir_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::actvparkassist_types::PrkAidDrvDir_D_Stat_enum& prkAidDrvDir_D_Stat_enum) const {
            return static_cast<int32_t>(prkAidDrvDir_D_Stat_enum);
        }
    };
    //Hash for ApaMde_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::actvparkassist_types::ApaMde_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::actvparkassist_types::ApaMde_D_Stat_enum& apaMde_D_Stat_enum) const {
            return static_cast<int32_t>(apaMde_D_Stat_enum);
        }
    };
    //Hash for ApaMdeStat_D_RqDrv_enum
    template<>
    struct hash<::v0::org::harman::ford::actvparkassist_types::ApaMdeStat_D_RqDrv_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::actvparkassist_types::ApaMdeStat_D_RqDrv_enum& apaMdeStat_D_RqDrv_enum) const {
            return static_cast<int32_t>(apaMdeStat_D_RqDrv_enum);
        }
    };
    //Hash for ApaTrgtDist_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::actvparkassist_types::ApaTrgtDist_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::actvparkassist_types::ApaTrgtDist_D_Stat_enum& apaTrgtDist_D_Stat_enum) const {
            return static_cast<int32_t>(apaTrgtDist_D_Stat_enum);
        }
    };
    //Hash for ApaMsgTxt_D_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::actvparkassist_types::ApaMsgTxt_D_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::actvparkassist_types::ApaMsgTxt_D_Rq_enum& apaMsgTxt_D_Rq_enum) const {
            return static_cast<int32_t>(apaMsgTxt_D_Rq_enum);
        }
    };
    //Hash for ApaActvSide2_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::actvparkassist_types::ApaActvSide2_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::actvparkassist_types::ApaActvSide2_D_Stat_enum& apaActvSide2_D_Stat_enum) const {
            return static_cast<int32_t>(apaActvSide2_D_Stat_enum);
        }
    };
    //Hash for ApaAcsy_D_RqDrv_enum
    template<>
    struct hash<::v0::org::harman::ford::actvparkassist_types::ApaAcsy_D_RqDrv_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::actvparkassist_types::ApaAcsy_D_RqDrv_enum& apaAcsy_D_RqDrv_enum) const {
            return static_cast<int32_t>(apaAcsy_D_RqDrv_enum);
        }
    };
    //Hash for ApaScan_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::actvparkassist_types::ApaScan_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::actvparkassist_types::ApaScan_D_Stat_enum& apaScan_D_Stat_enum) const {
            return static_cast<int32_t>(apaScan_D_Stat_enum);
        }
    };
    //Hash for ApaLongCtl_D_RqDrv_enum
    template<>
    struct hash<::v0::org::harman::ford::actvparkassist_types::ApaLongCtl_D_RqDrv_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::actvparkassist_types::ApaLongCtl_D_RqDrv_enum& apaLongCtl_D_RqDrv_enum) const {
            return static_cast<int32_t>(apaLongCtl_D_RqDrv_enum);
        }
    };
    //Hash for ApaGearShif_D_RqDrv_enum
    template<>
    struct hash<::v0::org::harman::ford::actvparkassist_types::ApaGearShif_D_RqDrv_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::actvparkassist_types::ApaGearShif_D_RqDrv_enum& apaGearShif_D_RqDrv_enum) const {
            return static_cast<int32_t>(apaGearShif_D_RqDrv_enum);
        }
    };
    //Hash for ApaSteScanMde_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::actvparkassist_types::ApaSteScanMde_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::actvparkassist_types::ApaSteScanMde_D_Stat_enum& apaSteScanMde_D_Stat_enum) const {
            return static_cast<int32_t>(apaSteScanMde_D_Stat_enum);
        }
    };
    //Hash for ApaSelSapp_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::actvparkassist_types::ApaSelSapp_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::actvparkassist_types::ApaSelSapp_D_Stat_enum& apaSelSapp_D_Stat_enum) const {
            return static_cast<int32_t>(apaSelSapp_D_Stat_enum);
        }
    };
    //Hash for ApaSelPpa_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::actvparkassist_types::ApaSelPpa_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::actvparkassist_types::ApaSelPpa_D_Stat_enum& apaSelPpa_D_Stat_enum) const {
            return static_cast<int32_t>(apaSelPpa_D_Stat_enum);
        }
    };
    //Hash for ApaSelPoa_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::actvparkassist_types::ApaSelPoa_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::actvparkassist_types::ApaSelPoa_D_Stat_enum& apaSelPoa_D_Stat_enum) const {
            return static_cast<int32_t>(apaSelPoa_D_Stat_enum);
        }
    };
    //Hash for ApaSys_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::actvparkassist_types::ApaSys_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::actvparkassist_types::ApaSys_D_Stat_enum& apaSys_D_Stat_enum) const {
            return static_cast<int32_t>(apaSys_D_Stat_enum);
        }
    };
    //Hash for ApaSteWhl_D_RqDrv_enum
    template<>
    struct hash<::v0::org::harman::ford::actvparkassist_types::ApaSteWhl_D_RqDrv_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::actvparkassist_types::ApaSteWhl_D_RqDrv_enum& apaSteWhl_D_RqDrv_enum) const {
            return static_cast<int32_t>(apaSteWhl_D_RqDrv_enum);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_FORD_actvparkassist_types_HPP_

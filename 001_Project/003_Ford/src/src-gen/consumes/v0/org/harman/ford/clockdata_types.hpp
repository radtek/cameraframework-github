/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_ORG_HARMAN_FORD_clockdata_types_HPP_
#define V0_ORG_HARMAN_FORD_clockdata_types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace ford {

struct clockdata_types {
    
    struct DispGlblClkAdj_B_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Request = 1,
            En_NoRequest = 0
        };
        
        DispGlblClkAdj_B_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Request)) {}
        DispGlblClkAdj_B_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Request):
                case static_cast<int32_t>(Literal::En_NoRequest):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DispGlblClkAdj_B_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DispGlblClkAdj_B_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DispGlblClkAdj_B_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DispGlblClkAdj_B_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DispGlblClkAdj_B_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DispGlblClkAdj_B_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct SetTimeFormat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_24h_mode = 2,
            En_12h_mode = 1,
            En_Inactive = 0
        };
        
        SetTimeFormat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_24h_mode)) {}
        SetTimeFormat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_24h_mode):
                case static_cast<int32_t>(Literal::En_12h_mode):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SetTimeFormat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SetTimeFormat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SetTimeFormat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SetTimeFormat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SetTimeFormat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SetTimeFormat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Mc_VehTimeFrmtUsrSel_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_24h_mode = 2,
            En_12h_mode = 1,
            En_Invalid = 0
        };
        
        Mc_VehTimeFrmtUsrSel_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_24h_mode)) {}
        Mc_VehTimeFrmtUsrSel_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_24h_mode):
                case static_cast<int32_t>(Literal::En_12h_mode):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Mc_VehTimeFrmtUsrSel_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Mc_VehTimeFrmtUsrSel_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Mc_VehTimeFrmtUsrSel_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Mc_VehTimeFrmtUsrSel_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Mc_VehTimeFrmtUsrSel_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Mc_VehTimeFrmtUsrSel_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct GlobalClock_Data_HS3_struct : CommonAPI::Struct<uint8_t, uint16_t, uint8_t, uint8_t, uint8_t> {
    	
    	GlobalClock_Data_HS3_struct() {
    	}
    	GlobalClock_Data_HS3_struct(const uint8_t &_GlblClkYr_No_Actl, const uint16_t &_GlblClkDay_No_Actl, const uint8_t &_GlblClkMnte_No_Actl, const uint8_t &_GlblClkScnd_No_Actl, const uint8_t &_GlblClkHr_No_Actl)
    	{
    		std::get<0>(values_) = _GlblClkYr_No_Actl;
    		std::get<1>(values_) = _GlblClkDay_No_Actl;
    		std::get<2>(values_) = _GlblClkMnte_No_Actl;
    		std::get<3>(values_) = _GlblClkScnd_No_Actl;
    		std::get<4>(values_) = _GlblClkHr_No_Actl;
    	}
    	inline const uint8_t &getGlblClkYr_No_Actl() const { return std::get<0>(values_); }
    	inline void setGlblClkYr_No_Actl(const uint8_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint16_t &getGlblClkDay_No_Actl() const { return std::get<1>(values_); }
    	inline void setGlblClkDay_No_Actl(const uint16_t &_value) { std::get<1>(values_) = _value; }
    	inline const uint8_t &getGlblClkMnte_No_Actl() const { return std::get<2>(values_); }
    	inline void setGlblClkMnte_No_Actl(const uint8_t &_value) { std::get<2>(values_) = _value; }
    	inline const uint8_t &getGlblClkScnd_No_Actl() const { return std::get<3>(values_); }
    	inline void setGlblClkScnd_No_Actl(const uint8_t &_value) { std::get<3>(values_) = _value; }
    	inline const uint8_t &getGlblClkHr_No_Actl() const { return std::get<4>(values_); }
    	inline void setGlblClkHr_No_Actl(const uint8_t &_value) { std::get<4>(values_) = _value; }
    	inline bool operator==(const GlobalClock_Data_HS3_struct& _other) const {
                return (getGlblClkYr_No_Actl() == _other.getGlblClkYr_No_Actl() && getGlblClkDay_No_Actl() == _other.getGlblClkDay_No_Actl() && getGlblClkMnte_No_Actl() == _other.getGlblClkMnte_No_Actl() && getGlblClkScnd_No_Actl() == _other.getGlblClkScnd_No_Actl() && getGlblClkHr_No_Actl() == _other.getGlblClkHr_No_Actl());
        }
    	inline bool operator!=(const GlobalClock_Data_HS3_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.harman.ford.clockdata_types";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct clockdata_types

} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for DispGlblClkAdj_B_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::clockdata_types::DispGlblClkAdj_B_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::clockdata_types::DispGlblClkAdj_B_Rq_enum& dispGlblClkAdj_B_Rq_enum) const {
            return static_cast<int32_t>(dispGlblClkAdj_B_Rq_enum);
        }
    };
    //Hash for SetTimeFormat_enum
    template<>
    struct hash<::v0::org::harman::ford::clockdata_types::SetTimeFormat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::clockdata_types::SetTimeFormat_enum& setTimeFormat_enum) const {
            return static_cast<int32_t>(setTimeFormat_enum);
        }
    };
    //Hash for Mc_VehTimeFrmtUsrSel_St_enum
    template<>
    struct hash<::v0::org::harman::ford::clockdata_types::Mc_VehTimeFrmtUsrSel_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::clockdata_types::Mc_VehTimeFrmtUsrSel_St_enum& mc_VehTimeFrmtUsrSel_St_enum) const {
            return static_cast<int32_t>(mc_VehTimeFrmtUsrSel_St_enum);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_FORD_clockdata_types_HPP_

/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_ORG_HARMAN_FORD_wifinfo_types_HPP_
#define V0_ORG_HARMAN_FORD_wifinfo_types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace ford {

struct wifinfo_types {
    
    struct WifiHtsptMacAddr_B_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Request = 1,
            En_No_Request = 0
        };
        
        WifiHtsptMacAddr_B_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Request)) {}
        WifiHtsptMacAddr_B_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Request):
                case static_cast<int32_t>(Literal::En_No_Request):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const WifiHtsptMacAddr_B_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const WifiHtsptMacAddr_B_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const WifiHtsptMacAddr_B_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const WifiHtsptMacAddr_B_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const WifiHtsptMacAddr_B_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const WifiHtsptMacAddr_B_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct WifiHtsptEnbl_D_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_On = 2,
            En_Off = 1,
            En_Null = 0
        };
        
        WifiHtsptEnbl_D_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_On)) {}
        WifiHtsptEnbl_D_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_On):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const WifiHtsptEnbl_D_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const WifiHtsptEnbl_D_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const WifiHtsptEnbl_D_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const WifiHtsptEnbl_D_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const WifiHtsptEnbl_D_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const WifiHtsptEnbl_D_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct WifiDevcList_D_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NoEntry = 3,
            En_BlockedList = 2,
            En_ConnectedList = 1,
            En_Null = 0
        };
        
        WifiDevcList_D_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NoEntry)) {}
        WifiDevcList_D_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NoEntry):
                case static_cast<int32_t>(Literal::En_BlockedList):
                case static_cast<int32_t>(Literal::En_ConnectedList):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const WifiDevcList_D_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const WifiDevcList_D_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const WifiDevcList_D_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const WifiDevcList_D_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const WifiDevcList_D_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const WifiDevcList_D_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct WifiDataUsage_D_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_RefreshDataNoResponse = 3,
            En_RefreshData = 2,
            En_CurrentData = 1,
            En_Null = 0
        };
        
        WifiDataUsage_D_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_RefreshDataNoResponse)) {}
        WifiDataUsage_D_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_RefreshDataNoResponse):
                case static_cast<int32_t>(Literal::En_RefreshData):
                case static_cast<int32_t>(Literal::En_CurrentData):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const WifiDataUsage_D_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const WifiDataUsage_D_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const WifiDataUsage_D_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const WifiDataUsage_D_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const WifiDataUsage_D_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const WifiDataUsage_D_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct WifiCarrierInfo_B_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Request = 1,
            En_No_Request = 0
        };
        
        WifiCarrierInfo_B_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Request)) {}
        WifiCarrierInfo_B_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Request):
                case static_cast<int32_t>(Literal::En_No_Request):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const WifiCarrierInfo_B_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const WifiCarrierInfo_B_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const WifiCarrierInfo_B_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const WifiCarrierInfo_B_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const WifiCarrierInfo_B_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const WifiCarrierInfo_B_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct WifiHtsptTrial_D_RqDrv_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed_1 = 3,
            En_StopReminders = 2,
            En_RemindMeLater = 1,
            En_Null = 0
        };
        
        WifiHtsptTrial_D_RqDrv_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed_1)) {}
        WifiHtsptTrial_D_RqDrv_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed_1):
                case static_cast<int32_t>(Literal::En_StopReminders):
                case static_cast<int32_t>(Literal::En_RemindMeLater):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const WifiHtsptTrial_D_RqDrv_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const WifiHtsptTrial_D_RqDrv_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const WifiHtsptTrial_D_RqDrv_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const WifiHtsptTrial_D_RqDrv_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const WifiHtsptTrial_D_RqDrv_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const WifiHtsptTrial_D_RqDrv_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct WifiRemoveDevc_D_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_FromBlockedList = 2,
            En_FromConnectedList = 1,
            En_Null = 0
        };
        
        WifiRemoveDevc_D_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_FromBlockedList)) {}
        WifiRemoveDevc_D_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_FromBlockedList):
                case static_cast<int32_t>(Literal::En_FromConnectedList):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const WifiRemoveDevc_D_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const WifiRemoveDevc_D_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const WifiRemoveDevc_D_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const WifiRemoveDevc_D_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const WifiRemoveDevc_D_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const WifiRemoveDevc_D_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct WifiHtsptVisbl_D_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_On = 2,
            En_Off = 1,
            En_Null = 0
        };
        
        WifiHtsptVisbl_D_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_On)) {}
        WifiHtsptVisbl_D_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_On):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const WifiHtsptVisbl_D_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const WifiHtsptVisbl_D_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const WifiHtsptVisbl_D_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const WifiHtsptVisbl_D_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const WifiHtsptVisbl_D_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const WifiHtsptVisbl_D_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct WrlssAcsyChrgr_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Misalignment = 6,
            En_OverHeat = 5,
            En_MetalObjectDetected = 4,
            En_ChargingComplete = 3,
            En_ChargingInProgress = 2,
            En_ChargingNotInProgress = 1,
            En_Null = 0
        };
        
        WrlssAcsyChrgr_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Misalignment)) {}
        WrlssAcsyChrgr_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Misalignment):
                case static_cast<int32_t>(Literal::En_OverHeat):
                case static_cast<int32_t>(Literal::En_MetalObjectDetected):
                case static_cast<int32_t>(Literal::En_ChargingComplete):
                case static_cast<int32_t>(Literal::En_ChargingInProgress):
                case static_cast<int32_t>(Literal::En_ChargingNotInProgress):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const WrlssAcsyChrgr_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const WrlssAcsyChrgr_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const WrlssAcsyChrgr_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const WrlssAcsyChrgr_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const WrlssAcsyChrgr_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const WrlssAcsyChrgr_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct TelematicsSrvc_D_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Unused = 7,
            En_NotifyNotActivatedYet = 6,
            En_NotActivatedYet = 5,
            En_NotifyExpired = 4,
            En_Expired = 3,
            En_ExpiringSoon = 2,
            En_Active = 1,
            En_Null = 0
        };
        
        TelematicsSrvc_D_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Unused)) {}
        TelematicsSrvc_D_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Unused):
                case static_cast<int32_t>(Literal::En_NotifyNotActivatedYet):
                case static_cast<int32_t>(Literal::En_NotActivatedYet):
                case static_cast<int32_t>(Literal::En_NotifyExpired):
                case static_cast<int32_t>(Literal::En_Expired):
                case static_cast<int32_t>(Literal::En_ExpiringSoon):
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TelematicsSrvc_D_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TelematicsSrvc_D_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TelematicsSrvc_D_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TelematicsSrvc_D_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TelematicsSrvc_D_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TelematicsSrvc_D_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct WifiHtsptEnbl_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_OnDisabled = 3,
            En_On = 2,
            En_Off = 1,
            En_Null = 0
        };
        
        WifiHtsptEnbl_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_OnDisabled)) {}
        WifiHtsptEnbl_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_OnDisabled):
                case static_cast<int32_t>(Literal::En_On):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const WifiHtsptEnbl_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const WifiHtsptEnbl_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const WifiHtsptEnbl_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const WifiHtsptEnbl_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const WifiHtsptEnbl_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const WifiHtsptEnbl_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct WifiEnbl_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Enable = 2,
            En_Disable = 1,
            En_Null = 0
        };
        
        WifiEnbl_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Enable)) {}
        WifiEnbl_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Enable):
                case static_cast<int32_t>(Literal::En_Disable):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const WifiEnbl_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const WifiEnbl_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const WifiEnbl_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const WifiEnbl_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const WifiEnbl_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const WifiEnbl_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct WifiDevcListNew_B_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Available = 1,
            En_NotAvailable = 0
        };
        
        WifiDevcListNew_B_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Available)) {}
        WifiDevcListNew_B_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Available):
                case static_cast<int32_t>(Literal::En_NotAvailable):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const WifiDevcListNew_B_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const WifiDevcListNew_B_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const WifiDevcListNew_B_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const WifiDevcListNew_B_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const WifiDevcListNew_B_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const WifiDevcListNew_B_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct WifiDataUsage_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_PercentDataUsed = 2,
            En_FreeTrialPeriodWaiting = 1,
            En_Null = 0
        };
        
        WifiDataUsage_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_PercentDataUsed)) {}
        WifiDataUsage_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_PercentDataUsed):
                case static_cast<int32_t>(Literal::En_FreeTrialPeriodWaiting):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const WifiDataUsage_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const WifiDataUsage_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const WifiDataUsage_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const WifiDataUsage_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const WifiDataUsage_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const WifiDataUsage_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ModemSigStren_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotDetermined = 6,
            En_FiveBars = 5,
            En_FourBars = 4,
            En_ThreeBars = 3,
            En_TwoBars = 2,
            En_OneBar = 1,
            En_ZeroBars = 0
        };
        
        ModemSigStren_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotDetermined)) {}
        ModemSigStren_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotDetermined):
                case static_cast<int32_t>(Literal::En_FiveBars):
                case static_cast<int32_t>(Literal::En_FourBars):
                case static_cast<int32_t>(Literal::En_ThreeBars):
                case static_cast<int32_t>(Literal::En_TwoBars):
                case static_cast<int32_t>(Literal::En_OneBar):
                case static_cast<int32_t>(Literal::En_ZeroBars):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ModemSigStren_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ModemSigStren_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ModemSigStren_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ModemSigStren_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ModemSigStren_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ModemSigStren_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct WifiHtsptVisbl_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_On = 2,
            En_Off = 1,
            En_Null = 0
        };
        
        WifiHtsptVisbl_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_On)) {}
        WifiHtsptVisbl_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_On):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const WifiHtsptVisbl_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const WifiHtsptVisbl_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const WifiHtsptVisbl_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const WifiHtsptVisbl_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const WifiHtsptVisbl_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const WifiHtsptVisbl_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct WifiHtsptScrty_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Wapi = 2,
            En_Wpa2_Wpa = 1,
            En_Null = 0
        };
        
        WifiHtsptScrty_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Wapi)) {}
        WifiHtsptScrty_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Wapi):
                case static_cast<int32_t>(Literal::En_Wpa2_Wpa):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const WifiHtsptScrty_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const WifiHtsptScrty_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const WifiHtsptScrty_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const WifiHtsptScrty_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const WifiHtsptScrty_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const WifiHtsptScrty_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ModemTechnology_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Lte = 5,
            En_FourG = 4,
            En_ThreeG = 3,
            En_TwoG = 2,
            En_NoNetwork = 1,
            En_Null = 0
        };
        
        ModemTechnology_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Lte)) {}
        ModemTechnology_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Lte):
                case static_cast<int32_t>(Literal::En_FourG):
                case static_cast<int32_t>(Literal::En_ThreeG):
                case static_cast<int32_t>(Literal::En_TwoG):
                case static_cast<int32_t>(Literal::En_NoNetwork):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ModemTechnology_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ModemTechnology_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ModemTechnology_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ModemTechnology_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ModemTechnology_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ModemTechnology_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct WifiHtsptCnnct_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed_1 = 3,
            En_Connected = 2,
            En_NotConnected = 1,
            En_Null = 0
        };
        
        WifiHtsptCnnct_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed_1)) {}
        WifiHtsptCnnct_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed_1):
                case static_cast<int32_t>(Literal::En_Connected):
                case static_cast<int32_t>(Literal::En_NotConnected):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const WifiHtsptCnnct_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const WifiHtsptCnnct_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const WifiHtsptCnnct_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const WifiHtsptCnnct_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const WifiHtsptCnnct_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const WifiHtsptCnnct_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct WifiDataUsageOn_D_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed = 3,
            En_On = 2,
            En_Off = 1,
            En_Null = 0
        };
        
        WifiDataUsageOn_D_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed)) {}
        WifiDataUsageOn_D_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed):
                case static_cast<int32_t>(Literal::En_On):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const WifiDataUsageOn_D_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const WifiDataUsageOn_D_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const WifiDataUsageOn_D_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const WifiDataUsageOn_D_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const WifiDataUsageOn_D_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const WifiDataUsageOn_D_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ModemTechnology_D2_Stat_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Lte = 7,
            En_HspaPlus = 6,
            En_Umts = 5,
            En_Edge = 4,
            En_Gprs = 3,
            En_Gsm = 2,
            En_NoNetwork = 1,
            En_Null = 0
        };
        
        ModemTechnology_D2_Stat_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Lte)) {}
        ModemTechnology_D2_Stat_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Lte):
                case static_cast<int32_t>(Literal::En_HspaPlus):
                case static_cast<int32_t>(Literal::En_Umts):
                case static_cast<int32_t>(Literal::En_Edge):
                case static_cast<int32_t>(Literal::En_Gprs):
                case static_cast<int32_t>(Literal::En_Gsm):
                case static_cast<int32_t>(Literal::En_NoNetwork):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ModemTechnology_D2_Stat_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ModemTechnology_D2_Stat_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ModemTechnology_D2_Stat_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ModemTechnology_D2_Stat_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ModemTechnology_D2_Stat_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ModemTechnology_D2_Stat_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Telematics_D_Falt_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_NotUsed_5 = 7,
            En_NotUsed_4 = 6,
            En_NotUsed_3 = 5,
            En_NotUsed_2 = 4,
            En_NotUsed_1 = 3,
            En_RuntimeError = 2,
            En_ChipsetInitializationFailure = 1,
            En_Null = 0
        };
        
        Telematics_D_Falt_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_NotUsed_5)) {}
        Telematics_D_Falt_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_NotUsed_5):
                case static_cast<int32_t>(Literal::En_NotUsed_4):
                case static_cast<int32_t>(Literal::En_NotUsed_3):
                case static_cast<int32_t>(Literal::En_NotUsed_2):
                case static_cast<int32_t>(Literal::En_NotUsed_1):
                case static_cast<int32_t>(Literal::En_RuntimeError):
                case static_cast<int32_t>(Literal::En_ChipsetInitializationFailure):
                case static_cast<int32_t>(Literal::En_Null):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Telematics_D_Falt_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Telematics_D_Falt_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Telematics_D_Falt_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Telematics_D_Falt_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Telematics_D_Falt_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Telematics_D_Falt_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct TCU_Send_Signals_3_struct : CommonAPI::Struct<WifiHtsptEnbl_D_Stat_enum, WifiEnbl_D_Stat_enum, WifiDevcListNew_B_Stat_enum, WifiDataUsage_D_Stat_enum, ModemSigStren_D_Stat_enum, WifiHtsptVisbl_D_Stat_enum, WifiHtsptScrty_D_Stat_enum, uint8_t, ModemTechnology_D_Stat_enum, WifiHtsptCnnct_D_Stat_enum, WifiDataUsageOn_D_Stat_enum, ModemTechnology_D2_Stat_enum, Telematics_D_Falt_enum, uint8_t> {
    	
    	TCU_Send_Signals_3_struct() {
    	}
    	TCU_Send_Signals_3_struct(const WifiHtsptEnbl_D_Stat_enum &_wifiHtsptEnbl_D_Stat_enum, const WifiEnbl_D_Stat_enum &_wifiEnbl_D_Stat_enum, const WifiDevcListNew_B_Stat_enum &_wifiDevcListNew_B_Stat_enum, const WifiDataUsage_D_Stat_enum &_wifiDataUsage_D_Stat_enum, const ModemSigStren_D_Stat_enum &_modemSigStren_D_Stat_enum, const WifiHtsptVisbl_D_Stat_enum &_wifiHtsptVisbl_D_Stat_enum, const WifiHtsptScrty_D_Stat_enum &_wifiHtsptScrty_D_Stat_enum, const uint8_t &_WifiDataUsage_Pc_Actl, const ModemTechnology_D_Stat_enum &_modemTechnology_D_Stat_enum, const WifiHtsptCnnct_D_Stat_enum &_wifiHtsptCnnct_D_Stat_enum, const WifiDataUsageOn_D_Stat_enum &_wifiDataUsageOn_D_Stat_enum, const ModemTechnology_D2_Stat_enum &_modemTechnology_D2_Stat_enum, const Telematics_D_Falt_enum &_telematics_D_Falt_enum, const uint8_t &_WifiNoDevcCnnct_No_Actl)
    	{
    		std::get<0>(values_) = _wifiHtsptEnbl_D_Stat_enum;
    		std::get<1>(values_) = _wifiEnbl_D_Stat_enum;
    		std::get<2>(values_) = _wifiDevcListNew_B_Stat_enum;
    		std::get<3>(values_) = _wifiDataUsage_D_Stat_enum;
    		std::get<4>(values_) = _modemSigStren_D_Stat_enum;
    		std::get<5>(values_) = _wifiHtsptVisbl_D_Stat_enum;
    		std::get<6>(values_) = _wifiHtsptScrty_D_Stat_enum;
    		std::get<7>(values_) = _WifiDataUsage_Pc_Actl;
    		std::get<8>(values_) = _modemTechnology_D_Stat_enum;
    		std::get<9>(values_) = _wifiHtsptCnnct_D_Stat_enum;
    		std::get<10>(values_) = _wifiDataUsageOn_D_Stat_enum;
    		std::get<11>(values_) = _modemTechnology_D2_Stat_enum;
    		std::get<12>(values_) = _telematics_D_Falt_enum;
    		std::get<13>(values_) = _WifiNoDevcCnnct_No_Actl;
    	}
    	inline const WifiHtsptEnbl_D_Stat_enum &getWifiHtsptEnbl_D_Stat_enum() const { return std::get<0>(values_); }
    	inline void setWifiHtsptEnbl_D_Stat_enum(const WifiHtsptEnbl_D_Stat_enum &_value) { std::get<0>(values_) = _value; }
    	inline const WifiEnbl_D_Stat_enum &getWifiEnbl_D_Stat_enum() const { return std::get<1>(values_); }
    	inline void setWifiEnbl_D_Stat_enum(const WifiEnbl_D_Stat_enum &_value) { std::get<1>(values_) = _value; }
    	inline const WifiDevcListNew_B_Stat_enum &getWifiDevcListNew_B_Stat_enum() const { return std::get<2>(values_); }
    	inline void setWifiDevcListNew_B_Stat_enum(const WifiDevcListNew_B_Stat_enum &_value) { std::get<2>(values_) = _value; }
    	inline const WifiDataUsage_D_Stat_enum &getWifiDataUsage_D_Stat_enum() const { return std::get<3>(values_); }
    	inline void setWifiDataUsage_D_Stat_enum(const WifiDataUsage_D_Stat_enum &_value) { std::get<3>(values_) = _value; }
    	inline const ModemSigStren_D_Stat_enum &getModemSigStren_D_Stat_enum() const { return std::get<4>(values_); }
    	inline void setModemSigStren_D_Stat_enum(const ModemSigStren_D_Stat_enum &_value) { std::get<4>(values_) = _value; }
    	inline const WifiHtsptVisbl_D_Stat_enum &getWifiHtsptVisbl_D_Stat_enum() const { return std::get<5>(values_); }
    	inline void setWifiHtsptVisbl_D_Stat_enum(const WifiHtsptVisbl_D_Stat_enum &_value) { std::get<5>(values_) = _value; }
    	inline const WifiHtsptScrty_D_Stat_enum &getWifiHtsptScrty_D_Stat_enum() const { return std::get<6>(values_); }
    	inline void setWifiHtsptScrty_D_Stat_enum(const WifiHtsptScrty_D_Stat_enum &_value) { std::get<6>(values_) = _value; }
    	inline const uint8_t &getWifiDataUsage_Pc_Actl() const { return std::get<7>(values_); }
    	inline void setWifiDataUsage_Pc_Actl(const uint8_t &_value) { std::get<7>(values_) = _value; }
    	inline const ModemTechnology_D_Stat_enum &getModemTechnology_D_Stat_enum() const { return std::get<8>(values_); }
    	inline void setModemTechnology_D_Stat_enum(const ModemTechnology_D_Stat_enum &_value) { std::get<8>(values_) = _value; }
    	inline const WifiHtsptCnnct_D_Stat_enum &getWifiHtsptCnnct_D_Stat_enum() const { return std::get<9>(values_); }
    	inline void setWifiHtsptCnnct_D_Stat_enum(const WifiHtsptCnnct_D_Stat_enum &_value) { std::get<9>(values_) = _value; }
    	inline const WifiDataUsageOn_D_Stat_enum &getWifiDataUsageOn_D_Stat_enum() const { return std::get<10>(values_); }
    	inline void setWifiDataUsageOn_D_Stat_enum(const WifiDataUsageOn_D_Stat_enum &_value) { std::get<10>(values_) = _value; }
    	inline const ModemTechnology_D2_Stat_enum &getModemTechnology_D2_Stat_enum() const { return std::get<11>(values_); }
    	inline void setModemTechnology_D2_Stat_enum(const ModemTechnology_D2_Stat_enum &_value) { std::get<11>(values_) = _value; }
    	inline const Telematics_D_Falt_enum &getTelematics_D_Falt_enum() const { return std::get<12>(values_); }
    	inline void setTelematics_D_Falt_enum(const Telematics_D_Falt_enum &_value) { std::get<12>(values_) = _value; }
    	inline const uint8_t &getWifiNoDevcCnnct_No_Actl() const { return std::get<13>(values_); }
    	inline void setWifiNoDevcCnnct_No_Actl(const uint8_t &_value) { std::get<13>(values_) = _value; }
    	inline bool operator==(const TCU_Send_Signals_3_struct& _other) const {
                return (getWifiHtsptEnbl_D_Stat_enum() == _other.getWifiHtsptEnbl_D_Stat_enum() && getWifiEnbl_D_Stat_enum() == _other.getWifiEnbl_D_Stat_enum() && getWifiDevcListNew_B_Stat_enum() == _other.getWifiDevcListNew_B_Stat_enum() && getWifiDataUsage_D_Stat_enum() == _other.getWifiDataUsage_D_Stat_enum() && getModemSigStren_D_Stat_enum() == _other.getModemSigStren_D_Stat_enum() && getWifiHtsptVisbl_D_Stat_enum() == _other.getWifiHtsptVisbl_D_Stat_enum() && getWifiHtsptScrty_D_Stat_enum() == _other.getWifiHtsptScrty_D_Stat_enum() && getWifiDataUsage_Pc_Actl() == _other.getWifiDataUsage_Pc_Actl() && getModemTechnology_D_Stat_enum() == _other.getModemTechnology_D_Stat_enum() && getWifiHtsptCnnct_D_Stat_enum() == _other.getWifiHtsptCnnct_D_Stat_enum() && getWifiDataUsageOn_D_Stat_enum() == _other.getWifiDataUsageOn_D_Stat_enum() && getModemTechnology_D2_Stat_enum() == _other.getModemTechnology_D2_Stat_enum() && getTelematics_D_Falt_enum() == _other.getTelematics_D_Falt_enum() && getWifiNoDevcCnnct_No_Actl() == _other.getWifiNoDevcCnnct_No_Actl());
        }
    	inline bool operator!=(const TCU_Send_Signals_3_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.harman.ford.wifinfo_types";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct wifinfo_types

} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for WifiHtsptMacAddr_B_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::wifinfo_types::WifiHtsptMacAddr_B_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::wifinfo_types::WifiHtsptMacAddr_B_Rq_enum& wifiHtsptMacAddr_B_Rq_enum) const {
            return static_cast<int32_t>(wifiHtsptMacAddr_B_Rq_enum);
        }
    };
    //Hash for WifiHtsptEnbl_D_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::wifinfo_types::WifiHtsptEnbl_D_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::wifinfo_types::WifiHtsptEnbl_D_Rq_enum& wifiHtsptEnbl_D_Rq_enum) const {
            return static_cast<int32_t>(wifiHtsptEnbl_D_Rq_enum);
        }
    };
    //Hash for WifiDevcList_D_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::wifinfo_types::WifiDevcList_D_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::wifinfo_types::WifiDevcList_D_Rq_enum& wifiDevcList_D_Rq_enum) const {
            return static_cast<int32_t>(wifiDevcList_D_Rq_enum);
        }
    };
    //Hash for WifiDataUsage_D_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::wifinfo_types::WifiDataUsage_D_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::wifinfo_types::WifiDataUsage_D_Rq_enum& wifiDataUsage_D_Rq_enum) const {
            return static_cast<int32_t>(wifiDataUsage_D_Rq_enum);
        }
    };
    //Hash for WifiCarrierInfo_B_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::wifinfo_types::WifiCarrierInfo_B_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::wifinfo_types::WifiCarrierInfo_B_Rq_enum& wifiCarrierInfo_B_Rq_enum) const {
            return static_cast<int32_t>(wifiCarrierInfo_B_Rq_enum);
        }
    };
    //Hash for WifiHtsptTrial_D_RqDrv_enum
    template<>
    struct hash<::v0::org::harman::ford::wifinfo_types::WifiHtsptTrial_D_RqDrv_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::wifinfo_types::WifiHtsptTrial_D_RqDrv_enum& wifiHtsptTrial_D_RqDrv_enum) const {
            return static_cast<int32_t>(wifiHtsptTrial_D_RqDrv_enum);
        }
    };
    //Hash for WifiRemoveDevc_D_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::wifinfo_types::WifiRemoveDevc_D_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::wifinfo_types::WifiRemoveDevc_D_Rq_enum& wifiRemoveDevc_D_Rq_enum) const {
            return static_cast<int32_t>(wifiRemoveDevc_D_Rq_enum);
        }
    };
    //Hash for WifiHtsptVisbl_D_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::wifinfo_types::WifiHtsptVisbl_D_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::wifinfo_types::WifiHtsptVisbl_D_Rq_enum& wifiHtsptVisbl_D_Rq_enum) const {
            return static_cast<int32_t>(wifiHtsptVisbl_D_Rq_enum);
        }
    };
    //Hash for WrlssAcsyChrgr_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::wifinfo_types::WrlssAcsyChrgr_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::wifinfo_types::WrlssAcsyChrgr_D_Stat_enum& wrlssAcsyChrgr_D_Stat_enum) const {
            return static_cast<int32_t>(wrlssAcsyChrgr_D_Stat_enum);
        }
    };
    //Hash for TelematicsSrvc_D_St_enum
    template<>
    struct hash<::v0::org::harman::ford::wifinfo_types::TelematicsSrvc_D_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::wifinfo_types::TelematicsSrvc_D_St_enum& telematicsSrvc_D_St_enum) const {
            return static_cast<int32_t>(telematicsSrvc_D_St_enum);
        }
    };
    //Hash for WifiHtsptEnbl_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::wifinfo_types::WifiHtsptEnbl_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::wifinfo_types::WifiHtsptEnbl_D_Stat_enum& wifiHtsptEnbl_D_Stat_enum) const {
            return static_cast<int32_t>(wifiHtsptEnbl_D_Stat_enum);
        }
    };
    //Hash for WifiEnbl_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::wifinfo_types::WifiEnbl_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::wifinfo_types::WifiEnbl_D_Stat_enum& wifiEnbl_D_Stat_enum) const {
            return static_cast<int32_t>(wifiEnbl_D_Stat_enum);
        }
    };
    //Hash for WifiDevcListNew_B_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::wifinfo_types::WifiDevcListNew_B_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::wifinfo_types::WifiDevcListNew_B_Stat_enum& wifiDevcListNew_B_Stat_enum) const {
            return static_cast<int32_t>(wifiDevcListNew_B_Stat_enum);
        }
    };
    //Hash for WifiDataUsage_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::wifinfo_types::WifiDataUsage_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::wifinfo_types::WifiDataUsage_D_Stat_enum& wifiDataUsage_D_Stat_enum) const {
            return static_cast<int32_t>(wifiDataUsage_D_Stat_enum);
        }
    };
    //Hash for ModemSigStren_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::wifinfo_types::ModemSigStren_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::wifinfo_types::ModemSigStren_D_Stat_enum& modemSigStren_D_Stat_enum) const {
            return static_cast<int32_t>(modemSigStren_D_Stat_enum);
        }
    };
    //Hash for WifiHtsptVisbl_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::wifinfo_types::WifiHtsptVisbl_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::wifinfo_types::WifiHtsptVisbl_D_Stat_enum& wifiHtsptVisbl_D_Stat_enum) const {
            return static_cast<int32_t>(wifiHtsptVisbl_D_Stat_enum);
        }
    };
    //Hash for WifiHtsptScrty_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::wifinfo_types::WifiHtsptScrty_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::wifinfo_types::WifiHtsptScrty_D_Stat_enum& wifiHtsptScrty_D_Stat_enum) const {
            return static_cast<int32_t>(wifiHtsptScrty_D_Stat_enum);
        }
    };
    //Hash for ModemTechnology_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::wifinfo_types::ModemTechnology_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::wifinfo_types::ModemTechnology_D_Stat_enum& modemTechnology_D_Stat_enum) const {
            return static_cast<int32_t>(modemTechnology_D_Stat_enum);
        }
    };
    //Hash for WifiHtsptCnnct_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::wifinfo_types::WifiHtsptCnnct_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::wifinfo_types::WifiHtsptCnnct_D_Stat_enum& wifiHtsptCnnct_D_Stat_enum) const {
            return static_cast<int32_t>(wifiHtsptCnnct_D_Stat_enum);
        }
    };
    //Hash for WifiDataUsageOn_D_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::wifinfo_types::WifiDataUsageOn_D_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::wifinfo_types::WifiDataUsageOn_D_Stat_enum& wifiDataUsageOn_D_Stat_enum) const {
            return static_cast<int32_t>(wifiDataUsageOn_D_Stat_enum);
        }
    };
    //Hash for ModemTechnology_D2_Stat_enum
    template<>
    struct hash<::v0::org::harman::ford::wifinfo_types::ModemTechnology_D2_Stat_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::wifinfo_types::ModemTechnology_D2_Stat_enum& modemTechnology_D2_Stat_enum) const {
            return static_cast<int32_t>(modemTechnology_D2_Stat_enum);
        }
    };
    //Hash for Telematics_D_Falt_enum
    template<>
    struct hash<::v0::org::harman::ford::wifinfo_types::Telematics_D_Falt_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::wifinfo_types::Telematics_D_Falt_enum& telematics_D_Falt_enum) const {
            return static_cast<int32_t>(telematics_D_Falt_enum);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_FORD_wifinfo_types_HPP_

/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_ORG_HARMAN_FORD_mediaplayback_types_HPP_
#define V0_ORG_HARMAN_FORD_mediaplayback_types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace org {
namespace harman {
namespace ford {

struct mediaplayback_types {
    
    struct CD_ARAudioSource_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_iPod = 15,
            En_USB = 14,
            En_BTAudio = 13,
            En_AmfmRadio = 0,
            En_FrontDisc = 1,
            En_SDARS_DAB = 2,
            En_InDashCdChanger = 3,
            En_VoiceRecogniser = 4,
            En_TelematicUnit = 5,
            En_BluetoothPhone = 6,
            En_RearDisc = 7,
            En_APIM = 8,
            En_FrontAuxInput = 9,
            En_Navigation = 10,
            En_RearAux = 11,
            En_NotReq = 12
        };
        
        CD_ARAudioSource_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_iPod)) {}
        CD_ARAudioSource_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_iPod):
                case static_cast<int32_t>(Literal::En_USB):
                case static_cast<int32_t>(Literal::En_BTAudio):
                case static_cast<int32_t>(Literal::En_AmfmRadio):
                case static_cast<int32_t>(Literal::En_FrontDisc):
                case static_cast<int32_t>(Literal::En_SDARS_DAB):
                case static_cast<int32_t>(Literal::En_InDashCdChanger):
                case static_cast<int32_t>(Literal::En_VoiceRecogniser):
                case static_cast<int32_t>(Literal::En_TelematicUnit):
                case static_cast<int32_t>(Literal::En_BluetoothPhone):
                case static_cast<int32_t>(Literal::En_RearDisc):
                case static_cast<int32_t>(Literal::En_APIM):
                case static_cast<int32_t>(Literal::En_FrontAuxInput):
                case static_cast<int32_t>(Literal::En_Navigation):
                case static_cast<int32_t>(Literal::En_RearAux):
                case static_cast<int32_t>(Literal::En_NotReq):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CD_ARAudioSource_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CD_ARAudioSource_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CD_ARAudioSource_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CD_ARAudioSource_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CD_ARAudioSource_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CD_ARAudioSource_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CD_AROperationType_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Inactive = 0,
            En_Requestaudioresource = 1,
            En_Releaseaudioresource = 2,
            En_Releaseallaudioresouces = 3,
            En_Getresourceupdate = 4,
            En_Getallresourceupdates = 5
        };
        
        CD_AROperationType_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Inactive)) {}
        CD_AROperationType_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Inactive):
                case static_cast<int32_t>(Literal::En_Requestaudioresource):
                case static_cast<int32_t>(Literal::En_Releaseaudioresource):
                case static_cast<int32_t>(Literal::En_Releaseallaudioresouces):
                case static_cast<int32_t>(Literal::En_Getresourceupdate):
                case static_cast<int32_t>(Literal::En_Getallresourceupdates):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CD_AROperationType_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CD_AROperationType_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CD_AROperationType_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CD_AROperationType_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CD_AROperationType_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CD_AROperationType_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CD_ARReqstrSystem_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_FrontRequester = 0,
            En_RearRequester = 1
        };
        
        CD_ARReqstrSystem_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_FrontRequester)) {}
        CD_ARReqstrSystem_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_FrontRequester):
                case static_cast<int32_t>(Literal::En_RearRequester):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CD_ARReqstrSystem_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CD_ARReqstrSystem_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CD_ARReqstrSystem_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CD_ARReqstrSystem_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CD_ARReqstrSystem_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CD_ARReqstrSystem_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CD_ARReqstrPriority_Rq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_EmergencyServ = 0,
            En_TelService = 1,
            En_AutoAnswer = 2,
            En_Ta = 3,
            En_PttMutevoice = 4,
            En_NavUserVoiceCmd = 5,
            En_NavSysVoiceCmd = 6,
            En_Radio = 7,
            En_Disc = 8,
            En_Alarm = 9,
            En_Ptynews = 10,
            En_Aux_ExtSource = 11,
            En_BT_BTNavAndTelMute = 12,
            En_ManualAudioMute = 13,
            En_NotReq = 14
        };
        
        CD_ARReqstrPriority_Rq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_EmergencyServ)) {}
        CD_ARReqstrPriority_Rq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_EmergencyServ):
                case static_cast<int32_t>(Literal::En_TelService):
                case static_cast<int32_t>(Literal::En_AutoAnswer):
                case static_cast<int32_t>(Literal::En_Ta):
                case static_cast<int32_t>(Literal::En_PttMutevoice):
                case static_cast<int32_t>(Literal::En_NavUserVoiceCmd):
                case static_cast<int32_t>(Literal::En_NavSysVoiceCmd):
                case static_cast<int32_t>(Literal::En_Radio):
                case static_cast<int32_t>(Literal::En_Disc):
                case static_cast<int32_t>(Literal::En_Alarm):
                case static_cast<int32_t>(Literal::En_Ptynews):
                case static_cast<int32_t>(Literal::En_Aux_ExtSource):
                case static_cast<int32_t>(Literal::En_BT_BTNavAndTelMute):
                case static_cast<int32_t>(Literal::En_ManualAudioMute):
                case static_cast<int32_t>(Literal::En_NotReq):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CD_ARReqstrPriority_Rq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CD_ARReqstrPriority_Rq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CD_ARReqstrPriority_Rq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CD_ARReqstrPriority_Rq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CD_ARReqstrPriority_Rq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CD_ARReqstrPriority_Rq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct CD_Request_Signals_struct : CommonAPI::Struct<CD_ARAudioSource_Rq_enum, CD_AROperationType_Rq_enum, CD_ARReqstrSystem_Rq_enum, CD_ARReqstrPriority_Rq_enum> {
    	
    	CD_Request_Signals_struct() {
    	}
    	CD_Request_Signals_struct(const CD_ARAudioSource_Rq_enum &_cD_ARAudioSource_Rq_enum, const CD_AROperationType_Rq_enum &_cD_AROperationType_Rq_enum, const CD_ARReqstrSystem_Rq_enum &_cD_ARReqstrSystem_Rq_enum, const CD_ARReqstrPriority_Rq_enum &_cD_ARReqstrPriority_Rq_enum)
    	{
    		std::get<0>(values_) = _cD_ARAudioSource_Rq_enum;
    		std::get<1>(values_) = _cD_AROperationType_Rq_enum;
    		std::get<2>(values_) = _cD_ARReqstrSystem_Rq_enum;
    		std::get<3>(values_) = _cD_ARReqstrPriority_Rq_enum;
    	}
    	inline const CD_ARAudioSource_Rq_enum &getCD_ARAudioSource_Rq_enum() const { return std::get<0>(values_); }
    	inline void setCD_ARAudioSource_Rq_enum(const CD_ARAudioSource_Rq_enum &_value) { std::get<0>(values_) = _value; }
    	inline const CD_AROperationType_Rq_enum &getCD_AROperationType_Rq_enum() const { return std::get<1>(values_); }
    	inline void setCD_AROperationType_Rq_enum(const CD_AROperationType_Rq_enum &_value) { std::get<1>(values_) = _value; }
    	inline const CD_ARReqstrSystem_Rq_enum &getCD_ARReqstrSystem_Rq_enum() const { return std::get<2>(values_); }
    	inline void setCD_ARReqstrSystem_Rq_enum(const CD_ARReqstrSystem_Rq_enum &_value) { std::get<2>(values_) = _value; }
    	inline const CD_ARReqstrPriority_Rq_enum &getCD_ARReqstrPriority_Rq_enum() const { return std::get<3>(values_); }
    	inline void setCD_ARReqstrPriority_Rq_enum(const CD_ARReqstrPriority_Rq_enum &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const CD_Request_Signals_struct& _other) const {
                return (getCD_ARAudioSource_Rq_enum() == _other.getCD_ARAudioSource_Rq_enum() && getCD_AROperationType_Rq_enum() == _other.getCD_AROperationType_Rq_enum() && getCD_ARReqstrSystem_Rq_enum() == _other.getCD_ARReqstrSystem_Rq_enum() && getCD_ARReqstrPriority_Rq_enum() == _other.getCD_ARReqstrPriority_Rq_enum());
        }
    	inline bool operator!=(const CD_Request_Signals_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct ACU_CDShuffle_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Invalid = 0,
            En_On = 1,
            En_Off = 2,
            En_OnFolder = 3
        };
        
        ACU_CDShuffle_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Invalid)) {}
        ACU_CDShuffle_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_On):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_OnFolder):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_CDShuffle_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_CDShuffle_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_CDShuffle_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_CDShuffle_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_CDShuffle_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_CDShuffle_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ACU_CDRepeat_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Invalid = 0,
            En_RepeatOnTrack = 1,
            En_Off = 2,
            En_OnFolder = 3
        };
        
        ACU_CDRepeat_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Invalid)) {}
        ACU_CDRepeat_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_RepeatOnTrack):
                case static_cast<int32_t>(Literal::En_Off):
                case static_cast<int32_t>(Literal::En_OnFolder):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_CDRepeat_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_CDRepeat_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_CDRepeat_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_CDRepeat_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_CDRepeat_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_CDRepeat_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ACU_OperationMode_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Invalid = 0,
            En_Stop = 1,
            En_Play = 2,
            En_Pause = 3,
            En_FastForward3x = 4,
            En_FastForward10x = 5,
            En_FastRewind3x = 6,
            En_FastRewind10x = 7
        };
        
        ACU_OperationMode_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Invalid)) {}
        ACU_OperationMode_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Invalid):
                case static_cast<int32_t>(Literal::En_Stop):
                case static_cast<int32_t>(Literal::En_Play):
                case static_cast<int32_t>(Literal::En_Pause):
                case static_cast<int32_t>(Literal::En_FastForward3x):
                case static_cast<int32_t>(Literal::En_FastForward10x):
                case static_cast<int32_t>(Literal::En_FastRewind3x):
                case static_cast<int32_t>(Literal::En_FastRewind10x):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_OperationMode_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_OperationMode_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_OperationMode_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_OperationMode_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_OperationMode_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_OperationMode_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ACU_DiscCoding_St_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Cdda_CDTextAvailable = 6,
            En_MP3_DVD = 5,
            En_DVD = 4,
            En_NonAudioCD = 3,
            En_Mp3 = 2,
            En_Cdda__NoCDTextAvailable = 1,
            En_Invalid = 0
        };
        
        ACU_DiscCoding_St_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Cdda_CDTextAvailable)) {}
        ACU_DiscCoding_St_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Cdda_CDTextAvailable):
                case static_cast<int32_t>(Literal::En_MP3_DVD):
                case static_cast<int32_t>(Literal::En_DVD):
                case static_cast<int32_t>(Literal::En_NonAudioCD):
                case static_cast<int32_t>(Literal::En_Mp3):
                case static_cast<int32_t>(Literal::En_Cdda__NoCDTextAvailable):
                case static_cast<int32_t>(Literal::En_Invalid):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ACU_DiscCoding_St_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ACU_DiscCoding_St_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ACU_DiscCoding_St_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ACU_DiscCoding_St_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ACU_DiscCoding_St_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ACU_DiscCoding_St_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct ACU_Send_Signals_5_struct : CommonAPI::Struct<ACU_CDShuffle_St_enum, ACU_CDRepeat_St_enum, ACU_OperationMode_St_enum, uint8_t, ACU_DiscCoding_St_enum> {
    	
    	ACU_Send_Signals_5_struct() {
    	}
    	ACU_Send_Signals_5_struct(const ACU_CDShuffle_St_enum &_aCU_CDShuffle_St_enum, const ACU_CDRepeat_St_enum &_aCU_CDRepeat_St_enum, const ACU_OperationMode_St_enum &_aCU_OperationMode_St_enum, const uint8_t &_ACU_MagazineSlots_St, const ACU_DiscCoding_St_enum &_aCU_DiscCoding_St_enum)
    	{
    		std::get<0>(values_) = _aCU_CDShuffle_St_enum;
    		std::get<1>(values_) = _aCU_CDRepeat_St_enum;
    		std::get<2>(values_) = _aCU_OperationMode_St_enum;
    		std::get<3>(values_) = _ACU_MagazineSlots_St;
    		std::get<4>(values_) = _aCU_DiscCoding_St_enum;
    	}
    	inline const ACU_CDShuffle_St_enum &getACU_CDShuffle_St_enum() const { return std::get<0>(values_); }
    	inline void setACU_CDShuffle_St_enum(const ACU_CDShuffle_St_enum &_value) { std::get<0>(values_) = _value; }
    	inline const ACU_CDRepeat_St_enum &getACU_CDRepeat_St_enum() const { return std::get<1>(values_); }
    	inline void setACU_CDRepeat_St_enum(const ACU_CDRepeat_St_enum &_value) { std::get<1>(values_) = _value; }
    	inline const ACU_OperationMode_St_enum &getACU_OperationMode_St_enum() const { return std::get<2>(values_); }
    	inline void setACU_OperationMode_St_enum(const ACU_OperationMode_St_enum &_value) { std::get<2>(values_) = _value; }
    	inline const uint8_t &getACU_MagazineSlots_St() const { return std::get<3>(values_); }
    	inline void setACU_MagazineSlots_St(const uint8_t &_value) { std::get<3>(values_) = _value; }
    	inline const ACU_DiscCoding_St_enum &getACU_DiscCoding_St_enum() const { return std::get<4>(values_); }
    	inline void setACU_DiscCoding_St_enum(const ACU_DiscCoding_St_enum &_value) { std::get<4>(values_) = _value; }
    	inline bool operator==(const ACU_Send_Signals_5_struct& _other) const {
                return (getACU_CDShuffle_St_enum() == _other.getACU_CDShuffle_St_enum() && getACU_CDRepeat_St_enum() == _other.getACU_CDRepeat_St_enum() && getACU_OperationMode_St_enum() == _other.getACU_OperationMode_St_enum() && getACU_MagazineSlots_St() == _other.getACU_MagazineSlots_St() && getACU_DiscCoding_St_enum() == _other.getACU_DiscCoding_St_enum());
        }
    	inline bool operator!=(const ACU_Send_Signals_5_struct &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.harman.ford.mediaplayback_types";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct mediaplayback_types

} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for CD_ARAudioSource_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::CD_ARAudioSource_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::CD_ARAudioSource_Rq_enum& cD_ARAudioSource_Rq_enum) const {
            return static_cast<int32_t>(cD_ARAudioSource_Rq_enum);
        }
    };
    //Hash for CD_AROperationType_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::CD_AROperationType_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::CD_AROperationType_Rq_enum& cD_AROperationType_Rq_enum) const {
            return static_cast<int32_t>(cD_AROperationType_Rq_enum);
        }
    };
    //Hash for CD_ARReqstrSystem_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::CD_ARReqstrSystem_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::CD_ARReqstrSystem_Rq_enum& cD_ARReqstrSystem_Rq_enum) const {
            return static_cast<int32_t>(cD_ARReqstrSystem_Rq_enum);
        }
    };
    //Hash for CD_ARReqstrPriority_Rq_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::CD_ARReqstrPriority_Rq_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::CD_ARReqstrPriority_Rq_enum& cD_ARReqstrPriority_Rq_enum) const {
            return static_cast<int32_t>(cD_ARReqstrPriority_Rq_enum);
        }
    };
    //Hash for ACU_CDShuffle_St_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::ACU_CDShuffle_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::ACU_CDShuffle_St_enum& aCU_CDShuffle_St_enum) const {
            return static_cast<int32_t>(aCU_CDShuffle_St_enum);
        }
    };
    //Hash for ACU_CDRepeat_St_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::ACU_CDRepeat_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::ACU_CDRepeat_St_enum& aCU_CDRepeat_St_enum) const {
            return static_cast<int32_t>(aCU_CDRepeat_St_enum);
        }
    };
    //Hash for ACU_OperationMode_St_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::ACU_OperationMode_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::ACU_OperationMode_St_enum& aCU_OperationMode_St_enum) const {
            return static_cast<int32_t>(aCU_OperationMode_St_enum);
        }
    };
    //Hash for ACU_DiscCoding_St_enum
    template<>
    struct hash<::v0::org::harman::ford::mediaplayback_types::ACU_DiscCoding_St_enum> {
        inline size_t operator()(const ::v0::org::harman::ford::mediaplayback_types::ACU_DiscCoding_St_enum& aCU_DiscCoding_St_enum) const {
            return static_cast<int32_t>(aCU_DiscCoding_St_enum);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_ORG_HARMAN_FORD_mediaplayback_types_HPP_

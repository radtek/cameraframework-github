/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#include <v2/org/genivi/NodeStateManager/ConsumerDBusProxy.hpp>

namespace v2 {
namespace org {
namespace genivi {
namespace NodeStateManager {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createConsumerDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<ConsumerDBusProxy>(_address, _connection);
}

INITIALIZER(registerConsumerDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		Consumer::getInterface(),
		&createConsumerDBusProxy);
}

ConsumerDBusProxy::ConsumerDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		restartReason_(*this, "onRestartReasonAttributeChanged", "i", "getRestartReasonAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		shutdownReason_(*this, "onShutdownReasonAttributeChanged", "i", "getShutdownReasonAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		wakeUpReason_(*this, "onWakeUpReasonAttributeChanged", "i", "getWakeUpReasonAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		bootMode_(*this, "onBootModeAttributeChanged", "i", "getBootModeAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		vehiclePowerMode_(*this, "onVehiclePowerModeAttributeChanged", "s", "getVehiclePowerModeAttribute", static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))
,		nodeState_(*this, "NodeState", "i", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		nodeApplicationMode_(*this, "NodeApplicationMode", "i", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		sessionStateChanged_(*this, "SessionStateChanged", "sii", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		shutdownEventSelective_(*this, "ShutdownEvent", "u", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)))
{
}

      ConsumerDBusProxy::RestartReasonAttribute& ConsumerDBusProxy::getRestartReasonAttribute() {
          return restartReason_;
      }
      ConsumerDBusProxy::ShutdownReasonAttribute& ConsumerDBusProxy::getShutdownReasonAttribute() {
          return shutdownReason_;
      }
      ConsumerDBusProxy::WakeUpReasonAttribute& ConsumerDBusProxy::getWakeUpReasonAttribute() {
          return wakeUpReason_;
      }
      ConsumerDBusProxy::BootModeAttribute& ConsumerDBusProxy::getBootModeAttribute() {
          return bootMode_;
      }
      ConsumerDBusProxy::VehiclePowerModeAttribute& ConsumerDBusProxy::getVehiclePowerModeAttribute() {
          return vehiclePowerMode_;
      }

ConsumerDBusProxy::NodeStateEvent& ConsumerDBusProxy::getNodeStateEvent() {
    return nodeState_;
}
ConsumerDBusProxy::NodeApplicationModeEvent& ConsumerDBusProxy::getNodeApplicationModeEvent() {
    return nodeApplicationMode_;
}
ConsumerDBusProxy::SessionStateChangedEvent& ConsumerDBusProxy::getSessionStateChangedEvent() {
    return sessionStateChanged_;
}
ConsumerDBusProxy::ShutdownEventSelectiveEvent& ConsumerDBusProxy::getShutdownEventSelectiveEvent() {
    return shutdownEventSelective_;
}
    
    /**
     * description: GetNodeState:     	NodeStateId: Will be based on the NsmNodeState_e.    
     *   	ErrorCode:   Return value passed to the caller, based upon NsmErrorStatus_e. 
     *      	The method is used by other applications to get the NodeState without the
     *   need of registration to the signal.
     * author: Giridhar
     */
    void ConsumerDBusProxy::GetNodeState(CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmNodeState &_NodeStateId, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmNodeState, CommonAPI::EmptyDeployment> deploy_NodeStateId(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmNodeState,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "GetNodeState",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_NodeStateId, deploy_ErrorCode);
_NodeStateId = deploy_NodeStateId.getValue();
_ErrorCode = deploy_ErrorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConsumerDBusProxy::GetNodeStateAsync(GetNodeStateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmNodeState, CommonAPI::EmptyDeployment> deploy_NodeStateId(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmNodeState,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "GetNodeState",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmNodeState, CommonAPI::EmptyDeployment> _NodeStateId, CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> _ErrorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _NodeStateId.getValue(), _ErrorCode.getValue());
        },
        std::make_tuple(deploy_NodeStateId, deploy_ErrorCode));
    }
    /**
     * description: SetSessionState:     	SessionName:  The SessionName will be based upon either
     *   the pre-defined platform SessionNames (see NSM content page) or using a newly
     *   added product defined session name.     	SessionOwner: This parameter defines
     *   the name of the application that is setting the state of the session. This
     *   must be the applications systemd unit filename.     	SeatID:       This
     *   parameter will be based upon the enum NsmSeat_e     	SessionState: This
     *   parameter will be based upon the NsmSessionState_e but it will not be bounded
     *   by the values in that enumeration. The listed values are the default values
     *   that are mandatory for platform sessions, but product sessions may have
     *   additional SessionStates.     	ErrorCode:    Return value passed to the
     *   caller, based upon NsmErrorStatus_e.          	The method is used by
     *   applications to set the state of a session.
     * author: Giridhar
     */
    void ConsumerDBusProxy::SetSessionState(const std::string &_SessionName, const std::string &_SessionOwner, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState &_SessionState, CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_SessionName(_SessionName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_SessionOwner(_SessionOwner, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat, CommonAPI::EmptyDeployment> deploy_SeatID(_SeatID, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState, CommonAPI::EmptyDeployment> deploy_SessionState(_SessionState, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "SetSessionState",
        "ssii",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_SessionName, deploy_SessionOwner, deploy_SeatID, deploy_SessionState,
_internalCallStatus,
deploy_ErrorCode);
_ErrorCode = deploy_ErrorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConsumerDBusProxy::SetSessionStateAsync(const std::string &_SessionName, const std::string &_SessionOwner, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState &_SessionState, SetSessionStateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_SessionName(_SessionName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_SessionOwner(_SessionOwner, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat, CommonAPI::EmptyDeployment> deploy_SeatID(_SeatID, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState, CommonAPI::EmptyDeployment> deploy_SessionState(_SessionState, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "SetSessionState",
        "ssii",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_SessionName, deploy_SessionOwner, deploy_SeatID, deploy_SessionState,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> _ErrorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _ErrorCode.getValue());
        },
        std::make_tuple(deploy_ErrorCode));
    }
    /**
     * description: GetSessionState:     	SessionName:  The SessionName will be based upon either
     *   the pre-defined platform session names (see NSM content page) or using a newly
     *   added product defined SessionName.     	SeatID:       This parameter will be
     *   based upon the enum NsmSeat_e.     	SessionState: This parameter will be based
     *   upon the NsmSessionState_e but it will not be bounded by the values in that
     *   enumeration. The listed values are the default values that are mandatory for
     *   platform sessions, but product sessions may have additional SessionStates.    
     *   	ErrorCode:    Return value passed to the caller, based upon NsmErrorStatus_e.
     *            	The method is used by applications to get the state of a session.
     * author: Giridhar
     */
    void ConsumerDBusProxy::GetSessionState(const std::string &_SessionName, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState &_SessionState, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_SessionName(_SessionName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat, CommonAPI::EmptyDeployment> deploy_SeatID(_SeatID, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState, CommonAPI::EmptyDeployment> deploy_SessionState(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "GetSessionState",
        "si",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_SessionName, deploy_SeatID,
_internalCallStatus,
deploy_SessionState, deploy_ErrorCode);
_SessionState = deploy_SessionState.getValue();
_ErrorCode = deploy_ErrorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConsumerDBusProxy::GetSessionStateAsync(const std::string &_SessionName, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, GetSessionStateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_SessionName(_SessionName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat, CommonAPI::EmptyDeployment> deploy_SeatID(_SeatID, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState, CommonAPI::EmptyDeployment> deploy_SessionState(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "GetSessionState",
        "si",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_SessionName, deploy_SeatID,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState, CommonAPI::EmptyDeployment> _SessionState, CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> _ErrorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _SessionState.getValue(), _ErrorCode.getValue());
        },
        std::make_tuple(deploy_SessionState, deploy_ErrorCode));
    }
    /**
     * description: GetApplicationMode: 			ApplicationModeId: This parameter will be based upon the
     *   NsmNodeApplicationMode_e. 			ErrorCode:         Return value passed to the
     *   caller, based upon NsmErrorStatus_e. 	 			The method is used by other
     *   applications to get the application mode. 			The method is used by
     *   applications to get the state of a session.
     * author: Giridhar
     */
    void ConsumerDBusProxy::GetApplicationMode(CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmApplicationMode &_ApplicationModeId, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmApplicationMode, CommonAPI::EmptyDeployment> deploy_ApplicationModeId(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmApplicationMode,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "GetApplicationMode",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_ApplicationModeId, deploy_ErrorCode);
_ApplicationModeId = deploy_ApplicationModeId.getValue();
_ErrorCode = deploy_ErrorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConsumerDBusProxy::GetApplicationModeAsync(GetApplicationModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmApplicationMode, CommonAPI::EmptyDeployment> deploy_ApplicationModeId(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmApplicationMode,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "GetApplicationMode",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmApplicationMode, CommonAPI::EmptyDeployment> _ApplicationModeId, CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> _ErrorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _ApplicationModeId.getValue(), _ErrorCode.getValue());
        },
        std::make_tuple(deploy_ApplicationModeId, deploy_ErrorCode));
    }
    /**
     * description: RegisterShutdownClient:     	ShutdownMode: Shutdown mode for which client wants
     *   to be informed (i.e normal, fast etc).     	TimeoutMs:    Max. Timeout to wait
     *   for response from shutdown client in ms.     	ErrorCode:    Return value
     *   passed to the caller, based upon NsmErrorStatus_e.          	The method is
     *   used by other applications to register themselves as shutdown client. Any
     *   client that registers must provide a method in their D-Bus object called
     *   "LifecycleRequest". This method will take one parameter which is the
     *   RequestType (NSM_SHUTDOWNTYPE_NORMAL, NSM_SHUTDOWNTYPE_FAST). For an example
     *   of the required client interface please see the BootManager component who will
     *   be a client of the NSM. 		Removed Below Parameters:  		BusName:      Bus name
     *   of remote application.     	ObjName:      Object name of remote object that
     *   provides the shutdown interface.
     * author: Giridhar
     */
    void ConsumerDBusProxy::RegisterShutdownClient(const uint32_t &_ShutdownMode, const uint32_t &_TimeoutMs, CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_ShutdownMode(_ShutdownMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_TimeoutMs(_TimeoutMs, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "RegisterShutdownClient",
        "uu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_ShutdownMode, deploy_TimeoutMs,
_internalCallStatus,
deploy_ErrorCode);
_ErrorCode = deploy_ErrorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConsumerDBusProxy::RegisterShutdownClientAsync(const uint32_t &_ShutdownMode, const uint32_t &_TimeoutMs, RegisterShutdownClientAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_ShutdownMode(_ShutdownMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_TimeoutMs(_TimeoutMs, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "RegisterShutdownClient",
        "uu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_ShutdownMode, deploy_TimeoutMs,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> _ErrorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _ErrorCode.getValue());
        },
        std::make_tuple(deploy_ErrorCode));
    }
    /**
     * description: UnRegisterShutdownClient:     	ShutdownMode: Shutdown mode for which client
     *   wants to unregister (NSM_SHUTDOWNTYPE_NORMAL, NSM_SHUTDOWNTYPE_FAST).    
     *   	ErrorCode:    Return value passed to the caller, based upon NsmErrorStatus_e.
     *            	The method is used by other applications to unregister themselves as
     *   shutdown client.  		Removed Below Parameters:  		BusName:      Bus name of
     *   remote application.     	ObjName:      Object name of remote object that
     *   provides the shutdown interface.
     * author: Giridhar
     */
    void ConsumerDBusProxy::UnRegisterShutdownClient(const uint32_t &_ShutdownMode, CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_ShutdownMode(_ShutdownMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "UnRegisterShutdownClient",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_ShutdownMode,
_internalCallStatus,
deploy_ErrorCode);
_ErrorCode = deploy_ErrorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConsumerDBusProxy::UnRegisterShutdownClientAsync(const uint32_t &_ShutdownMode, UnRegisterShutdownClientAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_ShutdownMode(_ShutdownMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "UnRegisterShutdownClient",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_ShutdownMode,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> _ErrorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _ErrorCode.getValue());
        },
        std::make_tuple(deploy_ErrorCode));
    }
    /**
     * description: RegisterSession:     	SessionName:  The SessionName will be based upon either
     *   the pre-defined platform session names (see NSM content page) or using a newly
     *   added product defined SessionName.     	SessionOwner: This is the name of the
     *   application that is registering the new session (this must be the applications
     *   systemd unit filename).     	SeatID:       This parameter will be based upon
     *   the enum NsmSeatId_e     	SessionState: This parameter will be based upon the
     *   NsmSessionState_e but it will not be bounded by the values in that
     *   enumeration. The listed values are the default values that are mandatory for
     *   platform sessions, but product sessions may have additional session states.   
     *    	ErrorCode:    Return value passed to the caller, based upon
     *   NsmErrorStatus_e.          	The method is used by other applications to
     *   register a new session whose state should be observed and distributed by the
     *   NSM.
     * author: Giridhar
     */
    void ConsumerDBusProxy::RegisterSession(const std::string &_SessionName, const std::string &_SessionOwner, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState &_SessionState, CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_SessionName(_SessionName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_SessionOwner(_SessionOwner, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat, CommonAPI::EmptyDeployment> deploy_SeatID(_SeatID, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState, CommonAPI::EmptyDeployment> deploy_SessionState(_SessionState, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "RegisterSession",
        "ssii",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_SessionName, deploy_SessionOwner, deploy_SeatID, deploy_SessionState,
_internalCallStatus,
deploy_ErrorCode);
_ErrorCode = deploy_ErrorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConsumerDBusProxy::RegisterSessionAsync(const std::string &_SessionName, const std::string &_SessionOwner, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState &_SessionState, RegisterSessionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_SessionName(_SessionName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_SessionOwner(_SessionOwner, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat, CommonAPI::EmptyDeployment> deploy_SeatID(_SeatID, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState, CommonAPI::EmptyDeployment> deploy_SessionState(_SessionState, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "RegisterSession",
        "ssii",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_SessionName, deploy_SessionOwner, deploy_SeatID, deploy_SessionState,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> _ErrorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _ErrorCode.getValue());
        },
        std::make_tuple(deploy_ErrorCode));
    }
    /**
     * description: UnRegisterSession:     	SessionName:  The SessionName will be based upon either
     *   the pre-defined platform session names (see NSM content page) or using a newly
     *   added product defined SessionName.     	SessionOwner: This is the name of the
     *   application that originally registered the session. It will be validated that
     *   this value matches the stored value from the registration.     	SeatID:      
     *   This parameter will be based upon the enum NsmSeat_e.     	ErrorCode:   
     *   Return value passed to the caller, based upon NsmErrorStatus_e.          	The
     *   method is used by other applications to remove a new session from the session
     *   list hosted by NSM.
     * author: Giridhar
     */
    void ConsumerDBusProxy::UnRegisterSession(const std::string &_SessionName, const std::string &_SessionOwner, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_SessionName(_SessionName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_SessionOwner(_SessionOwner, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat, CommonAPI::EmptyDeployment> deploy_SeatID(_SeatID, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "UnRegisterSession",
        "ssi",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_SessionName, deploy_SessionOwner, deploy_SeatID,
_internalCallStatus,
deploy_ErrorCode);
_ErrorCode = deploy_ErrorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConsumerDBusProxy::UnRegisterSessionAsync(const std::string &_SessionName, const std::string &_SessionOwner, const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat &_SeatID, UnRegisterSessionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_SessionName(_SessionName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_SessionOwner(_SessionOwner, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat, CommonAPI::EmptyDeployment> deploy_SeatID(_SeatID, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "UnRegisterSession",
        "ssi",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_SessionName, deploy_SessionOwner, deploy_SeatID,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> _ErrorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _ErrorCode.getValue());
        },
        std::make_tuple(deploy_ErrorCode));
    }
    /**
     * description: GetAppHealthCount:     	Count: Return value passed to the caller. Number of
     *   applications that crashed or terminated accidentally.     	The method returns
     *   the number of applications that crashed or terminated accidentally, within the
     *   current life cycle. It can be used to observe the system state.
     * author: Giridhar
     */
    void ConsumerDBusProxy::GetAppHealthCount(CommonAPI::CallStatus &_internalCallStatus, uint32_t &_Count, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_Count(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "GetAppHealthCount",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_Count);
_Count = deploy_Count.getValue();
}
    std::future<CommonAPI::CallStatus> ConsumerDBusProxy::GetAppHealthCountAsync(GetAppHealthCountAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_Count(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "GetAppHealthCount",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> _Count) {
        	if (_callback)
        		_callback(_internalCallStatus, _Count.getValue());
        },
        std::make_tuple(deploy_Count));
    }
    /**
     * description: GetInterfaceVersion:     	Version: Unsigned integer that represents the version
     *   number of the Node State Manager.     	     	The method returns the version
     *   number of the Node State Manager. The number is organized in four bytes:      
     *      	Version: VVV.RRR.PPP.BBB          	<literallayout>     		VVV => Version 
     *   [1..255]     		RRR => Release  [0..255]     		PPP => Patch    [0..255]    
     *   		BBB => Build    [0..255]     	</literallayout>
     * author: Giridhar
     */
    void ConsumerDBusProxy::GetInterfaceVersion(CommonAPI::CallStatus &_internalCallStatus, uint32_t &_Version, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_Version(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "GetInterfaceVersion",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_Version);
_Version = deploy_Version.getValue();
}
    std::future<CommonAPI::CallStatus> ConsumerDBusProxy::GetInterfaceVersionAsync(GetInterfaceVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_Version(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "GetInterfaceVersion",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> _Version) {
        	if (_callback)
        		_callback(_internalCallStatus, _Version.getValue());
        },
        std::make_tuple(deploy_Version));
    }
    /**
     * description: LifecycleRequestComplete:         Status:    The result of the call to
     *   "LifecycleRequest". NsmErrorStatus_Ok: Request successfully processed.
     *   NsmErrorStatus_Error: An error occured while processing the
     *   "LifecycleRequest".         ErrorCode: Return value passed to the caller,
     *   based upon NsmErrorStatus_e.                  The function has to be called by
     *   a "asynchrounous" lifecycle client, when he processed the "LifecycleRequest". 
     *     		Removed below parameters:    		RequestId: The request Id of the called
     *   life cycle client. The value has been passed when "LifecycleRequest" was
     *   called.
     * author: Giridhar
     */
    void ConsumerDBusProxy::LifecycleRequestComplete(const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_Status, CommonAPI::CallStatus &_internalCallStatus, ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> deploy_Status(_Status, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "LifecycleRequestComplete",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_Status,
_internalCallStatus,
deploy_ErrorCode);
_ErrorCode = deploy_ErrorCode.getValue();
}
    std::future<CommonAPI::CallStatus> ConsumerDBusProxy::LifecycleRequestCompleteAsync(const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus &_Status, LifecycleRequestCompleteAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> deploy_Status(_Status, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "LifecycleRequestComplete",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_Status,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus, CommonAPI::EmptyDeployment> _ErrorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _ErrorCode.getValue());
        },
        std::make_tuple(deploy_ErrorCode));
    }


void ConsumerDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 2;
          ownVersionMinor = 1;
      }

      } // namespace NodeStateManager
      } // namespace genivi
      } // namespace org
      } // namespace v2

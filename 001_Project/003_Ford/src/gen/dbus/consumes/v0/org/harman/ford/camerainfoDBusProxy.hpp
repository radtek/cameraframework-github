/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_ORG_HARMAN_FORD_camerainfo_DBUS_PROXY_HPP_
#define V0_ORG_HARMAN_FORD_camerainfo_DBUS_PROXY_HPP_

#include <v0/org/harman/ford/camerainfoProxyBase.hpp>
#include "v0/org/harman/ford/camerainfoDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v0 {
namespace org {
namespace harman {
namespace ford {

class camerainfoDBusProxy
    : virtual public camerainfoProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    camerainfoDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~camerainfoDBusProxy() { }

    virtual CamraViewSplit_B_Rq_enumAttribute& getCamraViewSplit_B_Rq_enumAttribute();
    virtual CamraOvrlStat_D_Rq_enumAttribute& getCamraOvrlStat_D_Rq_enumAttribute();
    virtual CamraOvrlDyn_D_Rq_enumAttribute& getCamraOvrlDyn_D_Rq_enumAttribute();
    virtual CamraOvrlTow_D_Rq_enumAttribute& getCamraOvrlTow_D_Rq_enumAttribute();
    virtual CamraZoomMan_D_Rq_enumAttribute& getCamraZoomMan_D_Rq_enumAttribute();
    virtual VehCharacteristicSet2_HS3Attribute& getVehCharacteristicSet2_HS3Attribute();
    virtual VehCharacteristicSet2_HS3_sig_0Attribute& getVehCharacteristicSet2_HS3_sig_0Attribute();
    virtual VehCharacteristicSet2_HS3_sig_1Attribute& getVehCharacteristicSet2_HS3_sig_1Attribute();
    virtual VehCharacteristicSet2_HS3_sig_2Attribute& getVehCharacteristicSet2_HS3_sig_2Attribute();
    virtual VehCharacteristicSet2_HS3_sig_3Attribute& getVehCharacteristicSet2_HS3_sig_3Attribute();
    virtual VehCharacteristicSet2_HS3_sig_4Attribute& getVehCharacteristicSet2_HS3_sig_4Attribute();
    virtual PAC_Send_Signals_sig_0Attribute& getPAC_Send_Signals_sig_0Attribute();




    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    class DBuscamraViewSplit_B_Rq_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CamraViewSplit_B_Rq_enumAttribute>> {
    public:
    template <typename... _A>
    	DBuscamraViewSplit_B_Rq_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CamraViewSplit_B_Rq_enumAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v0::org::harman::ford::camerainfo_types::CamraViewSplit_B_Rq_enum& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v0::org::harman::ford::camerainfo_types::CamraViewSplit_B_Rq_enum& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CamraViewSplit_B_Rq_enumAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v0::org::harman::ford::camerainfo_types::CamraViewSplit_B_Rq_enum& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v0::org::harman::ford::camerainfo_types::CamraViewSplit_B_Rq_enum)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v0::org::harman::ford::camerainfo_types::CamraViewSplit_B_Rq_enum _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CamraViewSplit_B_Rq_enumAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBuscamraViewSplit_B_Rq_enum_Attribute camraViewSplit_B_Rq_enum_;
    class DBuscamraOvrlStat_D_Rq_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CamraOvrlStat_D_Rq_enumAttribute>> {
    public:
    template <typename... _A>
    	DBuscamraOvrlStat_D_Rq_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CamraOvrlStat_D_Rq_enumAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v0::org::harman::ford::camerainfo_types::CamraOvrlStat_D_Rq_enum& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v0::org::harman::ford::camerainfo_types::CamraOvrlStat_D_Rq_enum& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CamraOvrlStat_D_Rq_enumAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v0::org::harman::ford::camerainfo_types::CamraOvrlStat_D_Rq_enum& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v0::org::harman::ford::camerainfo_types::CamraOvrlStat_D_Rq_enum)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v0::org::harman::ford::camerainfo_types::CamraOvrlStat_D_Rq_enum _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CamraOvrlStat_D_Rq_enumAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBuscamraOvrlStat_D_Rq_enum_Attribute camraOvrlStat_D_Rq_enum_;
    class DBuscamraOvrlDyn_D_Rq_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CamraOvrlDyn_D_Rq_enumAttribute>> {
    public:
    template <typename... _A>
    	DBuscamraOvrlDyn_D_Rq_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CamraOvrlDyn_D_Rq_enumAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v0::org::harman::ford::camerainfo_types::CamraOvrlDyn_D_Rq_enum& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v0::org::harman::ford::camerainfo_types::CamraOvrlDyn_D_Rq_enum& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CamraOvrlDyn_D_Rq_enumAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v0::org::harman::ford::camerainfo_types::CamraOvrlDyn_D_Rq_enum& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v0::org::harman::ford::camerainfo_types::CamraOvrlDyn_D_Rq_enum)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v0::org::harman::ford::camerainfo_types::CamraOvrlDyn_D_Rq_enum _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CamraOvrlDyn_D_Rq_enumAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBuscamraOvrlDyn_D_Rq_enum_Attribute camraOvrlDyn_D_Rq_enum_;
    class DBuscamraOvrlTow_D_Rq_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CamraOvrlTow_D_Rq_enumAttribute>> {
    public:
    template <typename... _A>
    	DBuscamraOvrlTow_D_Rq_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CamraOvrlTow_D_Rq_enumAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v0::org::harman::ford::camerainfo_types::CamraOvrlTow_D_Rq_enum& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v0::org::harman::ford::camerainfo_types::CamraOvrlTow_D_Rq_enum& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CamraOvrlTow_D_Rq_enumAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v0::org::harman::ford::camerainfo_types::CamraOvrlTow_D_Rq_enum& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v0::org::harman::ford::camerainfo_types::CamraOvrlTow_D_Rq_enum)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v0::org::harman::ford::camerainfo_types::CamraOvrlTow_D_Rq_enum _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CamraOvrlTow_D_Rq_enumAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBuscamraOvrlTow_D_Rq_enum_Attribute camraOvrlTow_D_Rq_enum_;
    class DBuscamraZoomMan_D_Rq_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CamraZoomMan_D_Rq_enumAttribute>> {
    public:
    template <typename... _A>
    	DBuscamraZoomMan_D_Rq_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CamraZoomMan_D_Rq_enumAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v0::org::harman::ford::camerainfo_types::CamraZoomMan_D_Rq_enum& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v0::org::harman::ford::camerainfo_types::CamraZoomMan_D_Rq_enum& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CamraZoomMan_D_Rq_enumAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v0::org::harman::ford::camerainfo_types::CamraZoomMan_D_Rq_enum& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v0::org::harman::ford::camerainfo_types::CamraZoomMan_D_Rq_enum)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v0::org::harman::ford::camerainfo_types::CamraZoomMan_D_Rq_enum _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CamraZoomMan_D_Rq_enumAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBuscamraZoomMan_D_Rq_enum_Attribute camraZoomMan_D_Rq_enum_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<VehCharacteristicSet2_HS3Attribute, ::v0::org::harman::ford::camerainfo_types_::VehCharacteristicSet2_HS3_structDeployment_t>> vehCharacteristicSet2_HS3_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<VehCharacteristicSet2_HS3_sig_0Attribute, ::v0::org::harman::ford::camerainfo_types_::VehCharacteristicSet2_HS3_sig_0_structDeployment_t>> vehCharacteristicSet2_HS3_sig_0_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<VehCharacteristicSet2_HS3_sig_1Attribute, ::v0::org::harman::ford::camerainfo_types_::VehCharacteristicSet2_HS3_sig_1_structDeployment_t>> vehCharacteristicSet2_HS3_sig_1_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<VehCharacteristicSet2_HS3_sig_2Attribute, ::v0::org::harman::ford::camerainfo_types_::VehCharacteristicSet2_HS3_sig_2_structDeployment_t>> vehCharacteristicSet2_HS3_sig_2_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<VehCharacteristicSet2_HS3_sig_3Attribute, ::v0::org::harman::ford::camerainfo_types_::VehCharacteristicSet2_HS3_sig_3_structDeployment_t>> vehCharacteristicSet2_HS3_sig_3_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<VehCharacteristicSet2_HS3_sig_4Attribute, ::v0::org::harman::ford::camerainfo_types_::VehCharacteristicSet2_HS3_sig_4_structDeployment_t>> vehCharacteristicSet2_HS3_sig_4_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PAC_Send_Signals_sig_0Attribute, ::v0::org::harman::ford::camerainfo_types_::PAC_Send_Signals_sig_0_structDeployment_t>> pAC_Send_Signals_sig_0_;


};

} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

#endif // V0_ORG_HARMAN_FORD_camerainfo_DBUS_PROXY_HPP_


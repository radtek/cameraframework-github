/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_ORG_HARMAN_FORD_actvparkassist_DBUS_PROXY_HPP_
#define V0_ORG_HARMAN_FORD_actvparkassist_DBUS_PROXY_HPP_

#include <v0/org/harman/ford/actvparkassistProxyBase.hpp>
#include "v0/org/harman/ford/actvparkassistDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v0 {
namespace org {
namespace harman {
namespace ford {

class actvparkassistDBusProxy
    : virtual public actvparkassistProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    actvparkassistDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~actvparkassistDBusProxy() { }

    virtual PrkAidDrvDir_D_Stat_enumAttribute& getPrkAidDrvDir_D_Stat_enumAttribute();
    virtual ApaMde_D_StatAttribute& getApaMde_D_StatAttribute();
    virtual ApaMdeStat_D_RqDrv_enumAttribute& getApaMdeStat_D_RqDrv_enumAttribute();
    virtual ParkAid_Data_HS3Attribute& getParkAid_Data_HS3Attribute();




    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    class DBusprkAidDrvDir_D_Stat_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PrkAidDrvDir_D_Stat_enumAttribute>> {
    public:
    template <typename... _A>
    	DBusprkAidDrvDir_D_Stat_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PrkAidDrvDir_D_Stat_enumAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusprkAidDrvDir_D_Stat_enum_Attribute prkAidDrvDir_D_Stat_enum_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<ApaMde_D_StatAttribute, ::v0::org::harman::ford::actvparkassist_types_::ApaMde_D_Stat_structDeployment_t>> apaMde_D_Stat_;
    class DBusapaMdeStat_D_RqDrv_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ApaMdeStat_D_RqDrv_enumAttribute>> {
    public:
    template <typename... _A>
    	DBusapaMdeStat_D_RqDrv_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ApaMdeStat_D_RqDrv_enumAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v0::org::harman::ford::actvparkassist_types::ApaMdeStat_D_RqDrv_enum& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v0::org::harman::ford::actvparkassist_types::ApaMdeStat_D_RqDrv_enum& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ApaMdeStat_D_RqDrv_enumAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v0::org::harman::ford::actvparkassist_types::ApaMdeStat_D_RqDrv_enum& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v0::org::harman::ford::actvparkassist_types::ApaMdeStat_D_RqDrv_enum)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v0::org::harman::ford::actvparkassist_types::ApaMdeStat_D_RqDrv_enum _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ApaMdeStat_D_RqDrv_enumAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBusapaMdeStat_D_RqDrv_enum_Attribute apaMdeStat_D_RqDrv_enum_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<ParkAid_Data_HS3Attribute, ::v0::org::harman::ford::actvparkassist_types_::ParkAid_Data_HS3_structDeployment_t>> parkAid_Data_HS3_;


};

} // namespace ford
} // namespace harman
} // namespace org
} // namespace v0

#endif // V0_ORG_HARMAN_FORD_actvparkassist_DBUS_PROXY_HPP_


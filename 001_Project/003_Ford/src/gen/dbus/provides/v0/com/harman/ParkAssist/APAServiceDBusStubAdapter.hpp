/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_COM_HARMAN_PARKASSIST_APA_Service_DBUS_STUB_ADAPTER_HPP_
#define V0_COM_HARMAN_PARKASSIST_APA_Service_DBUS_STUB_ADAPTER_HPP_

#include <v0/com/harman/ParkAssist/APAServiceStub.hpp>
#include "v0/com/harman/ParkAssist/APAServiceDBusDeployment.hpp"        
#include <v1/com/harman/ParkAssist/APABaseTypeDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace ParkAssist {

typedef CommonAPI::DBus::DBusStubAdapterHelper<APAServiceStub> APAServiceDBusStubAdapterHelper;

class APAServiceDBusStubAdapterInternal
    : public virtual APAServiceStubAdapter,
      public APAServiceDBusStubAdapterHelper
{
public:
    APAServiceDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~APAServiceDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return APAService::getInterface();
    }

    void fireAPAStatusAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enAPAStatus& value);
    void fireAPAModeAvailabilityInfoAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::ListAPAavaliabilityInfo& value);
    void fireObjApaViewTypeAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::APAViewType& value);
    void fireCurrentApaActiveModeAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enAPAMode& value);
    void fireScanLeftRightStatusAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalScanLeftRightStatus& value);
    void firePositionalSymbol1StatusAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol1Info& value);
    void firePositionalSymbol2StatusAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol2Info& value);
    void firePositionalText1AttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText1& value);
    void firePositionalText2AttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText2& value);
    void firePositionalCarLeftAttributeChanged(const bool& value);
    void firePositionalCarRightAttributeChanged(const bool& value);
    void firePositionalCarPOAAttributeChanged(const bool& value);
    void fireParkScenarioLeftAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioLeft& value);
    void fireParkScenarioRightAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioRight& value);
    void fireParkScenarioPOAAttributeChanged(const bool& value);
    void fireCarNonRVCSacAttributeChanged(const bool& value);
    void fireAPAErrorStatusAttributeChanged(const bool& value);
    void fireParkInArrowAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enParkInArrow& value);
    void firePositionalPOALeftAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeft& value);
    void firePositionalPOARightAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARight& value);
    void firePositionalPOARightSelectedAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARightSelected& value);
    void firePositionalPOALeftSelectedAttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeftSelected& value);
    void firePositionalSymbol3AttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol3& value);
    void firePositionalSymbol4AttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol4& value);
    void firePositionalText3AttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText3& value);
    void firePositionalText4AttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText4& value);
    void firePositionalText5AttributeChanged(const ::v1::com::harman::ParkAssist::APABaseType::enPositionalText5& value);



    const APAServiceDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        CommonAPI::Version
        > getAPAServiceInterfaceVersionStubDispatcher;

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        ::v1::com::harman::ParkAssist::APABaseType::enAPAStatus                
        > getAPAStatusAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        ::v1::com::harman::ParkAssist::APABaseType::ListAPAavaliabilityInfo,
        ::v1::com::harman::ParkAssist::APABaseType_::ListAPAavaliabilityInfoDeployment_t                
        > getAPAModeAvailabilityInfoAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        ::v1::com::harman::ParkAssist::APABaseType::APAViewType,
        ::v1::com::harman::ParkAssist::APABaseType_::APAViewTypeDeployment_t                
        > getObjApaViewTypeAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        ::v1::com::harman::ParkAssist::APABaseType::enAPAMode                
        > getCurrentApaActiveModeAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        ::v1::com::harman::ParkAssist::APABaseType::enPositionalScanLeftRightStatus                
        > getScanLeftRightStatusAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol1Info                
        > getPositionalSymbol1StatusAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol2Info                
        > getPositionalSymbol2StatusAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        ::v1::com::harman::ParkAssist::APABaseType::enPositionalText1                
        > getPositionalText1AttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        ::v1::com::harman::ParkAssist::APABaseType::enPositionalText2                
        > getPositionalText2AttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        bool                
        > getPositionalCarLeftAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        bool                
        > getPositionalCarRightAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        bool                
        > getPositionalCarPOAAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioLeft                
        > getParkScenarioLeftAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        ::v1::com::harman::ParkAssist::APABaseType::enParkScenarioRight                
        > getParkScenarioRightAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        bool                
        > getParkScenarioPOAAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        bool                
        > getCarNonRVCSacAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        bool                
        > getAPAErrorStatusAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        ::v1::com::harman::ParkAssist::APABaseType::enParkInArrow                
        > getParkInArrowAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeft                
        > getPositionalPOALeftAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARight                
        > getPositionalPOARightAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOARightSelected                
        > getPositionalPOARightSelectedAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        ::v1::com::harman::ParkAssist::APABaseType::enPositionalPOALeftSelected                
        > getPositionalPOALeftSelectedAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol3                
        > getPositionalSymbol3AttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        ::v1::com::harman::ParkAssist::APABaseType::enPositionalSymbol4                
        > getPositionalSymbol4AttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        ::v1::com::harman::ParkAssist::APABaseType::enPositionalText3                
        > getPositionalText3AttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        ::v1::com::harman::ParkAssist::APABaseType::enPositionalText4                
        > getPositionalText4AttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::APAServiceStub,
        ::v1::com::harman::ParkAssist::APABaseType::enPositionalText5                
        > getPositionalText5AttributeStubDispatcher;



static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::ParkAssist::APAServiceStub,
    std::tuple<::v1::com::harman::ParkAssist::APABaseType::enAPAMode>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > selectApaModeStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    APAServiceDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class APAServiceDBusStubAdapter
    : public APAServiceDBusStubAdapterInternal,
      public std::enable_shared_from_this<APAServiceDBusStubAdapter> {
public:
    APAServiceDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          APAServiceDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace ParkAssist
} // namespace harman
} // namespace com
} // namespace v0

#endif // V0_COM_HARMAN_PARKASSIST_APA_Service_DBUS_STUB_ADAPTER_HPP_

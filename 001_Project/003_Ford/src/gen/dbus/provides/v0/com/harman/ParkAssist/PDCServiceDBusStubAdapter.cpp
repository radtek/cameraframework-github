/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#include <v0/com/harman/ParkAssist/PDCService.hpp>
#include <v0/com/harman/ParkAssist/PDCServiceDBusStubAdapter.hpp>

namespace v0 {
namespace com {
namespace harman {
namespace ParkAssist {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createPDCServiceDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<PDCServiceDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerPDCServiceDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	PDCService::getInterface(), &createPDCServiceDBusStubAdapter);
}

PDCServiceDBusStubAdapterInternal::~PDCServiceDBusStubAdapterInternal() {
    deactivateManagedInstances();
    PDCServiceDBusStubAdapterHelper::deinit();
}

void PDCServiceDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* PDCServiceDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"getPDCStatusAttribute\">\n"
            "<arg name=\"value\" type=\"i\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onPDCStatusAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
        "</signal>\n"
        "<method name=\"getPDCErrorStatusAttribute\">\n"
            "<arg name=\"value\" type=\"b\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onPDCErrorStatusAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"b\" />\n"
        "</signal>\n"
        "<method name=\"CancelPDCReq\">\n"
            "<arg name=\"_m_eCancelPDC\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::PDCServiceStub,
        CommonAPI::Version
        > PDCServiceDBusStubAdapterInternal::getPDCServiceInterfaceVersionStubDispatcher(&PDCServiceStub::getInterfaceVersion, "uu");

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::PDCServiceStub,
        ::v1::com::harman::ParkAssist::PDCBaseType::enPDCStatus
        > PDCServiceDBusStubAdapterInternal::getPDCStatusAttributeStubDispatcher(
            &::v0::com::harman::ParkAssist::PDCServiceStub::getPDCStatusAttribute
            , "i"
            );
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::PDCServiceStub,
        bool
        > PDCServiceDBusStubAdapterInternal::getPDCErrorStatusAttributeStubDispatcher(
            &::v0::com::harman::ParkAssist::PDCServiceStub::getPDCErrorStatusAttribute
            , "b"
            );



CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::ParkAssist::PDCServiceStub,
    std::tuple<::v1::com::harman::ParkAssist::PDCBaseType::enCancelPDCIcon>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > PDCServiceDBusStubAdapterInternal::cancelPDCReqStubDispatcher(
    &PDCServiceStub::CancelPDCReq, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());


void PDCServiceDBusStubAdapterInternal::firePDCStatusAttributeChanged(const ::v1::com::harman::ParkAssist::PDCBaseType::enPDCStatus& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v1::com::harman::ParkAssist::PDCBaseType::enPDCStatus
    >>
        ::sendSignal(
            *this,
            "onPDCStatusAttributeChanged",
            "i",
            value
    
    );
}
void PDCServiceDBusStubAdapterInternal::firePDCErrorStatusAttributeChanged(const bool& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    bool
    >>
        ::sendSignal(
            *this,
            "onPDCErrorStatusAttributeChanged",
            "b",
            value
    
    );
}



const PDCServiceDBusStubAdapterHelper::StubDispatcherTable& PDCServiceDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& PDCServiceDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

PDCServiceDBusStubAdapterInternal::PDCServiceDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      PDCServiceDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<PDCServiceStub>(_stub), false),
      stubDispatcherTable_({
            { { "getPDCStatusAttribute", "" }, &com::harman::ParkAssist::PDCServiceDBusStubAdapterInternal::getPDCStatusAttributeStubDispatcher },
            { { "getPDCErrorStatusAttribute", "" }, &com::harman::ParkAssist::PDCServiceDBusStubAdapterInternal::getPDCErrorStatusAttributeStubDispatcher }
            ,
            { { "CancelPDCReq", "i" }, &com::harman::ParkAssist::PDCServiceDBusStubAdapterInternal::cancelPDCReqStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &com::harman::ParkAssist::PDCServiceDBusStubAdapterInternal::getPDCServiceInterfaceVersionStubDispatcher });
}

bool PDCServiceDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace ParkAssist
} // namespace harman
} // namespace com
} // namespace v0

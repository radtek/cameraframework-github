/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_COM_HARMAN_PARKASSIST_PDC_Service_DBUS_STUB_ADAPTER_HPP_
#define V0_COM_HARMAN_PARKASSIST_PDC_Service_DBUS_STUB_ADAPTER_HPP_

#include <v0/com/harman/ParkAssist/PDCServiceStub.hpp>
#include "v0/com/harman/ParkAssist/PDCServiceDBusDeployment.hpp"        
#include <v1/com/harman/ParkAssist/PDCBaseTypeDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace ParkAssist {

typedef CommonAPI::DBus::DBusStubAdapterHelper<PDCServiceStub> PDCServiceDBusStubAdapterHelper;

class PDCServiceDBusStubAdapterInternal
    : public virtual PDCServiceStubAdapter,
      public PDCServiceDBusStubAdapterHelper
{
public:
    PDCServiceDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~PDCServiceDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return PDCService::getInterface();
    }

    void firePDCStatusAttributeChanged(const ::v1::com::harman::ParkAssist::PDCBaseType::enPDCStatus& value);
    void firePDCErrorStatusAttributeChanged(const bool& value);



    const PDCServiceDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::PDCServiceStub,
        CommonAPI::Version
        > getPDCServiceInterfaceVersionStubDispatcher;

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::PDCServiceStub,
        ::v1::com::harman::ParkAssist::PDCBaseType::enPDCStatus                
        > getPDCStatusAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::PDCServiceStub,
        bool                
        > getPDCErrorStatusAttributeStubDispatcher;



static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::ParkAssist::PDCServiceStub,
    std::tuple<::v1::com::harman::ParkAssist::PDCBaseType::enCancelPDCIcon>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > cancelPDCReqStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    PDCServiceDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class PDCServiceDBusStubAdapter
    : public PDCServiceDBusStubAdapterInternal,
      public std::enable_shared_from_this<PDCServiceDBusStubAdapter> {
public:
    PDCServiceDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          PDCServiceDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace ParkAssist
} // namespace harman
} // namespace com
} // namespace v0

#endif // V0_COM_HARMAN_PARKASSIST_PDC_Service_DBUS_STUB_ADAPTER_HPP_

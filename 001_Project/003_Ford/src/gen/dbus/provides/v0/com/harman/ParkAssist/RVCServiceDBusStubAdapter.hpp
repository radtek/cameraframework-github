/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by Voice CodeGen Version: R1_v1.3.0
* generated on: Tue Mar 07 13:22:52 CST 2017
*/
#ifndef V0_COM_HARMAN_PARKASSIST_RVC_Service_DBUS_STUB_ADAPTER_HPP_
#define V0_COM_HARMAN_PARKASSIST_RVC_Service_DBUS_STUB_ADAPTER_HPP_

#include <v0/com/harman/ParkAssist/RVCServiceStub.hpp>
#include "v0/com/harman/ParkAssist/RVCServiceDBusDeployment.hpp"        
#include <v1/com/harman/ParkAssist/ParkAssistBaseTypeDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace ParkAssist {

typedef CommonAPI::DBus::DBusStubAdapterHelper<RVCServiceStub> RVCServiceDBusStubAdapterHelper;

class RVCServiceDBusStubAdapterInternal
    : public virtual RVCServiceStubAdapter,
      public RVCServiceDBusStubAdapterHelper
{
public:
    RVCServiceDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~RVCServiceDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return RVCService::getInterface();
    }

    void fireRVCZoomOnOffAttributeChanged(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom& value);
    void fireRVCSpiltViewOnOffAttributeChanged(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView& value);
    void fireRVCDisPlayStatusAttributeChanged(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCStatus& value);
    void fireRVCErrorAttributeChanged(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCError& value);
    void fireCameraDelayOnOffAttributeChanged(const bool& value);
    void fireRVCEnhancedPrkAidAttributeChanged(const bool& value);
    void fireRVCTrunkStatusAttributeChanged(const bool& value);
    void fireDisplayIconTypeAttributeChanged(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enDisplayIconType& value);



    const RVCServiceDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::RVCServiceStub,
        CommonAPI::Version
        > getRVCServiceInterfaceVersionStubDispatcher;

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::RVCServiceStub,
        ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom                
        > getRVCZoomOnOffAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::RVCServiceStub,
        ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCZoom                    
        > setRVCZoomOnOffAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::RVCServiceStub,
        ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView                
        > getRVCSpiltViewOnOffAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::RVCServiceStub,
        ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCSplitView                    
        > setRVCSpiltViewOnOffAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::RVCServiceStub,
        ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCStatus                
        > getRVCDisPlayStatusAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::RVCServiceStub,
        ::v1::com::harman::ParkAssist::ParkAssistBaseType::enRVCError                
        > getRVCErrorAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::RVCServiceStub,
        bool                
        > getCameraDelayOnOffAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::RVCServiceStub,
        bool                    
        > setCameraDelayOnOffAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::RVCServiceStub,
        bool                
        > getRVCEnhancedPrkAidAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::RVCServiceStub,
        bool                    
        > setRVCEnhancedPrkAidAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::RVCServiceStub,
        bool                
        > getRVCTrunkStatusAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::RVCServiceStub,
        bool                    
        > setRVCTrunkStatusAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::ParkAssist::RVCServiceStub,
        ::v1::com::harman::ParkAssist::ParkAssistBaseType::enDisplayIconType                
        > getDisplayIconTypeAttributeStubDispatcher;



static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::ParkAssist::RVCServiceStub,
    std::tuple<::v1::com::harman::ParkAssist::ParkAssistBaseType::enCancelRVC>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > cancelRVCReqStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    RVCServiceDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class RVCServiceDBusStubAdapter
    : public RVCServiceDBusStubAdapterInternal,
      public std::enable_shared_from_this<RVCServiceDBusStubAdapter> {
public:
    RVCServiceDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          RVCServiceDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace ParkAssist
} // namespace harman
} // namespace com
} // namespace v0

#endif // V0_COM_HARMAN_PARKASSIST_RVC_Service_DBUS_STUB_ADAPTER_HPP_

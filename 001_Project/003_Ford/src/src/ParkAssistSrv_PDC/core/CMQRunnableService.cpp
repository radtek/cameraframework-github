//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Ford-LCIS
//  @ File Name : CMQRunnableService.cpp
//  @ Date : 2016-11-22
//  @ Author : Guofeng.lu@harman.com
//
//


#include "CMQRunnableService.h"

CMQRunnableService::CMQRunnableService(const string& strName, CMessageQueue* pMsgQueue)
: CRunableService(strName,true)
, m_bInitialized(false)
, m_pMsgQueue(pMsgQueue)
{
	if(!m_pMsgQueue)
		PDCC_LOG_INFO("m_pMsgQueue is NULL \n");
}

CMQRunnableService::~CMQRunnableService()
{
	if( m_pMsgQueue )
	{
		delete  m_pMsgQueue;
		//ref object feature 
		//m_pMsgQueue->release();
	}
}

void CMQRunnableService::start()
{
	if( m_pMsgQueue == NULL )
	{
		PDCC_LOG_INFO("CMQRunnableService::start pMsgQueue is NULL\n");
		return;
	}

	CRunableService::start();
}

void CMQRunnableService::pushMessage(const tagBaseMessage& rMsg,int ilen)
{
	if( m_pMsgQueue )
	{
		PDCC_LOG_INFO("CMQRunnableService::pushMessage: rMsg._uiType[%d] - rMsg._pData[%d][%d] -len[%d] \n",rMsg._uiType,(int)rMsg._pData[0],(int)rMsg._pData[1],ilen) ;
		m_pMsgQueue->pushMessage(rMsg,ilen);
		resume();
	}
}

void CMQRunnableService::update()
{
	beforeHandleMessageQueue();

	m_pMsgQueue->handleMessageQueue();

	afterHandleMessageQueue();
}

void CMQRunnableService::beforeHandleMessageQueue()
{
	PDCC_LOG_INFO("CMQRunnableService::beforeHandleMessageQueue\n");
}

void CMQRunnableService::afterHandleMessageQueue()
{
	
	//msg que is empty, wait next push to resume
	PDCC_LOG_INFO("CMQRunnableService::afterHandleMessageQueue \n");
	pause();
	PDCC_LOG_INFO("CMQRunnableService::afterHandleMessageQueue resume\n");
}



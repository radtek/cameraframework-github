/**
 * generated by Voice CodeGen Version: R1_v1.3.0
 * generated on: Fri Nov 04 18:01:09 IST 2016
 */

#ifndef V0_COM_HARMAN_PARKASSIST_RVCSERVICESTUBIMPL_HPP
#define V0_COM_HARMAN_PARKASSIST_RVCSERVICESTUBIMPL_HPP
#define DATASIZE 512
#include "v0/com/harman/ParkAssist/RVCServiceStubDefault.hpp"
#include "ParkAssistSrv_Common/CommonCore.hpp"
#include "ParkAssistSrv_Common/CPAMContext.hpp"

using namespace v0::com::harman::ParkAssist;
using namespace v0::org::harman::ford;
using namespace v1::com::harman::ParkAssist;
#ifdef __cplusplus
extern "C"
{
#endif

#include"NanoMsg.h"

#ifdef __cplusplus
}
#endif
using namespace std;


typedef enum _GearPostion
{
    RVC_REVERSE = 0,
    RVC_NOT_PARK_REVERSE =1 ,
    RVC_GEAR_FAULT =2,
    RVC_MISSING = 3,
    RVC_UNKNOWN =4
}GearPostion;

typedef enum _ManaulGearStatus
{
    ACTIVE= 0,
    INACTIVE =1 ,
    FAULT =2,
    MISSING = 3,
    UNKNOWN =4
}ManaulGearStatus;

namespace v0 {
namespace com {
namespace harman {
namespace ParkAssist {

typedef std::function< void() > timerCallback;

class RVCServiceStubImpl : public RVCServiceStubDefault
{

public:

    
    RVCServiceStubImpl(CContext *p_pobjContext);
    
    virtual ~RVCServiceStubImpl();

    /**
    @brief Call back from Common API whenever Zoom attribute is changed by HMI
    @param : None
    */
    void onRemoteRVCZoomOnOffAttributeChanged();
    
    /**
    @brief Call back from Common API whenever SpiltViewOnOff Attribute is changed by HMI
    @param : None
    */
    void onRemoteRVCSpiltViewOnOffAttributeChanged();
    
    /**
    @brief Call back from Common API whenever CameraDelayOnOff Attribute is changed by HMI
    @param : None
    */
    void onRemoteCameraDelayOnOffAttributeChanged();
    
    /**
    @brief Call back from Common API whenever Enhanced mode  Attribute is changed by HMI
    @param : None
    */
    void onRemoteRVCEnhancedPrkAidAttributeChanged();
    
	void CancelRVCReq(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::ParkAssist::ParkAssistBaseType::enCancelRVC _m_eCancelRVC, CancelRVCReqReply_t _reply);
    
    /**
     * @brief Notification to indicate Current video  settings and conversion related to HMI values
     * @param  VehCharacteristicSet2 - Structure containing zoom,overlay status
     */
    void NotifyVehCharacteristic(camerainfo_types::VehCharacteristicSet2_HS3_struct *PtrVehCharacter);
    /**
     * @briefNotification to indicate Current Gear position of vehicle and conversion related to HMI values
     * @param  TransmissionModeExtension - Enum value for different gear position.
     */
    void NotifyGearPostion(bodycontroldata_types::GearLvrPos_D_Actl_enum PtrGearPostion);
    
    /**
     * Notification to indicate Park brake status  and conversion related to HMI values
     * @param  PtrGearPostion - Enum value for different Park Brake status.
     */
    void NotifyParkBrkStatus(enginedata_types::PrkBrkActv_B_Actl_enum p_ePrkBrkStatus);
    

	void ProcessElecBrkStatuResponce(enginedata_types::PrkBrkStatus_enum p_eElcPrkBrkStatus);
    /**
     * Initialize RVC Presctrl with default values 
     * @param  Ptr_AMBProviderHandler -Handel to AMB provider.
     */
    void InitializeRVCStub();
    
    
    /**
     * Conversion of AMB Split View values to HMI understanding values
     * @param  None
     */
    void ProcessSplitViewResponce(uint16_t p_CameraSplitView);
    
    /**
     * Setting Default values once AMB is Avaliabel
     * @param  None
     */
     void SetCameraInfoDefaultSettings();
    
    /**
     * Timer to handle gear fault denouncing logic 
     * @param  None
     */
    void GearFaulttimerCallback();
    
    /**
     *  Determining when to  switch off camera when camera delay is on 
     * @param  None
     */
    
    void RVCOffRequestonCameradelay();
    
    /**
     * @brief Update camera speed state 
     */
    void UpdateNSMState(bool PowerStandby);
    /**
    @brief Updating Ignition value 
    @param : bool
    */
    void UpdateIgnitionState(bool IgnitionValue);
    timerCallback tcallback;
    timerCallback tCameraDelaycbk;
    
    void CameraDelayTimerExpired();

    /**
     * IPC thread to listen message from diffrent process 
     * @param  None
     */
    void NanoMsgListner();
    
    /**
     * Conversion from AMB related zoom value to HMI related value
      @param  uint16_t
     */
    
    void ProcessZoomResponce(uint16_t CamraZoom);
    
    /**
     * Distance bar setting callback from AMB
      @param  uint16_t
     */
    void CamPDCGuidStat(uint16_t PDCGuidStat);
    /**
     * Dynamic guideline call back from AMB
      @param  uint16_t
     */
    void CamraOvrlDyn(uint16_t CamraOvrDyn);
    
    /**
     * Static guideline call back from AMB
      @param  uint16_t
     */
    void CamraOvrlStat(uint16_t CamraOvrStat);
    
   
    /**
     * @brief process the Nano message to achieve PC
     */
    void ProcessNanoMessage(int MsgType);
    
  
    /**
     * To Handel RVC turn off logic in case of camera delay on and off
     */
    void ProcessRVCOffRequest();
    
    /**
     * @brief To set fixed setting camera 
     */
    void SetCameraFixedSettings();
    
    /**
     * @brief Update camera speed state 
     */
    void UpdateCameraSpeedState(bool pCameraSpeed);
    
    /**
     * @brief Update Trunk status to HMI  
     */
    void UpdateVehicelTrunkStatus(enginedata_types::DrStatTgate_B_Actl_enum pTrunkStatus);
    
    /**
    @Brief:Receiving Manual Gear status from AMB
    **/
    void UpdateManualGearStatus(rearviewcamclient_types::GearRvrse_D_Actl_enum PManualGearStatus);
    
    /**
    @brief Calculate current Gear Position 
    @param : None
    */
    void CalculateGearStatus();
    
    /**
    @Brief:Calculating APA system status is NOT_ACCESSIBLE or not
    @param  None
    */
    void UpdateAPASystemStatus(actvparkassist_types::ApaSys_D_Stat_enum p_ApaSysStatus);
    
    /**
    @Brief:Calculating APA Gear status is SHIFT_TO_D or not
    @param  None
    */
    void UpdateAPAGearStatus(actvparkassist_types::ApaGearShif_D_RqDrv_enum p_eApaGearStatus);
    
    /**
    @brief Switching off the camera depending on APA gear status and APA system status
    @param : None
    */
    void ProcessAPAGearStatus();
    
    /**
    @brief Switching off the camera 
    @param : None
    */
    void RVCSwitchOffCamera();

	 /**
    @brief Switching off the camera once APA D0ne
    @param : None
    */
	void RVCSwitchOffByAPA();
    /**
     * @brief Clean up the class before existing
     */
    void Deinitilize();    

private:
    
    int m_Socket;
    bool m_GearFault;
    bool m_CameraMaxSpeed;
    bool m_NsmSessionState;
    bool m_IsTimerRunning;
    bool m_ParkBrakeStatus;
    bool m_VehParked;
    //m_APASysAcess value will true if system's operational state is Not accessible
    bool m_APASysAcess;
    //m_APAGearStatus value will true if ApaGearShif_D_RqDrv is SHIFT_TO_D
    bool m_APAGearStatus;
    //m_Ignitionoff value is true for when ignition status of vehicle is not in RUN/Start 
    bool m_Ignitionoff;
    //m_IsCameraOffReq value is true for when Camera off request is already requested by Ford Video App
    bool m_IsCameraOffReq;
    
    //m_ReverseGearStatus is true when vehicle in reverse gear 
    bool m_ReverseGearStatus;
    
    //Value will be true when HMI presses cancel icon to cancel the RVC 
    bool m_CancelIconPresed;
    
    //To check whether camera is configured or not 
    bool m_bCameraConfigured;
    
    CTimer m_timerInstance;

    ManaulGearStatus m_ManualGear;
    u_int8_t m_TimerValue ;
    thread m_NanoMsgThread;
    condition_variable m_WaitEventCondVar;
    condition_variable m_WaitMaxSpeedCondVar;
    bool m_ThreadExit;
    mutex m_EventlockMutex;
    mutex m_SpeedlockMutex;
    mutex m_ExitTimerlockMutex;
    //Required to know the reason for RVC exit(Forward gear or gear fault) from AMB
    condition_variable m_WaitForRVCStopReason;
    mutex m_RVCStopLockMutex;
    CContext *m_pobjContext;

    /**
    @brief Check for RVC switch off because off Gear Fault
    @param : None
    */
    void WaitForAMBUpdate();
    
    /**
    @brief Notifying current gear status is fault or not **/
    
    void NotifyGearStatus();
    
    void ZoomIconOnOff(bool l_value);

};

} // namespace ParkAssist
} // namespace harman
} // namespace com
} // namespace v0

#endif //V0_COM_HARMAN_PARKASSIST_RVCSERVICESTUBIMPL_HPP

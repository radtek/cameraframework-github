/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.201702211714.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.3.0
* generated on: Tue Aug 01 13:37:50 CST 2017
*/
#ifndef V1_COM_HARMAN_ADAS_Adas_Type_HPP_
#define V1_COM_HARMAN_ADAS_Adas_Type_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace adas {

struct AdasType {
    
    struct eModuleStates : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            OFF = 0,
            ON = 1,
            UNAVAILABLE = 8
        };
        
        eModuleStates() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::OFF)) {}
        eModuleStates(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::OFF):
                case static_cast<int32_t>(Literal::ON):
                case static_cast<int32_t>(Literal::UNAVAILABLE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eModuleStates &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eModuleStates &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eModuleStates &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eModuleStates &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eModuleStates &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eModuleStates &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct sAdasModuleState : CommonAPI::Struct<std::string, eModuleStates> {
    	
    	sAdasModuleState() {
    	}
    	sAdasModuleState(const std::string &_module_name, const eModuleStates &_eStates)
    	{
    		std::get<0>(values_) = _module_name;
    		std::get<1>(values_) = _eStates;
    	}
    	/**
    	 * description: .
    	 */
    	inline const std::string &getModule_name() const { return std::get<0>(values_); }
    	inline void setModule_name(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const eModuleStates &getEStates() const { return std::get<1>(values_); }
    	inline void setEStates(const eModuleStates &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const sAdasModuleState& _other) const {
                return (getModule_name() == _other.getModule_name() && getEStates() == _other.getEStates());
        }
    	inline bool operator!=(const sAdasModuleState &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: list
     */
    typedef std::vector<AdasType::sAdasModuleState> aModuleState;



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.adas.AdasType";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct AdasType

} // namespace adas
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for eModuleStates
    template<>
    struct hash<::v1::com::harman::adas::AdasType::eModuleStates> {
        inline size_t operator()(const ::v1::com::harman::adas::AdasType::eModuleStates& eModuleStates) const {
            return static_cast<int32_t>(eModuleStates);
        }
    };
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_ADAS_Adas_Type_HPP_

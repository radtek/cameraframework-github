/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.201702211714.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.3.0
* generated on: Tue Aug 01 13:37:50 CST 2017
*/
#include <v0/com/harman/adas/PASServiceStubDefault.hpp>
#include <assert.h>

namespace v0 {
namespace com {
namespace harman {
namespace adas {

PASServiceStubDefault::PASServiceStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(PASService::getInterfaceVersion()) {
}

const CommonAPI::Version& PASServiceStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

PASServiceStubRemoteEvent* PASServiceStubDefault::initStubAdapter(const std::shared_ptr<PASServiceStubAdapter> &_adapter) {
    CommonAPI::Stub<PASServiceStubAdapter, PASServiceStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

const std::vector<::v1::com::harman::adas::PASBaseType::enPASStatus>& PASServiceStubDefault::getPASStatusAttribute() {
    return pASStatusAttributeValue_;
}

const std::vector<::v1::com::harman::adas::PASBaseType::enPASStatus>& PASServiceStubDefault::getPASStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getPASStatusAttribute();
}

void PASServiceStubDefault::setPASStatusAttribute(std::vector<::v1::com::harman::adas::PASBaseType::enPASStatus> _value) {
    const bool valueChanged = trySetPASStatusAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<PASServiceStubAdapter, PASServiceStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->firePASStatusAttributeChanged(pASStatusAttributeValue_);
    }
}

bool PASServiceStubDefault::trySetPASStatusAttribute(std::vector<::v1::com::harman::adas::PASBaseType::enPASStatus> _value) {
    if (!validatePASStatusAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (pASStatusAttributeValue_ != _value);
    pASStatusAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool PASServiceStubDefault::validatePASStatusAttributeRequestedValue(const std::vector<::v1::com::harman::adas::PASBaseType::enPASStatus> &_value) {
    (void)_value;
	return true;
}



void PASServiceStubDefault::SwitchPASView(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::adas::PASBaseType::enPASViewStatus _m_ePASViewStatus, SwitchPASViewReply_t _reply) {
    (void)_client;
    (void) _m_ePASViewStatus;
    _reply();
}




PASServiceStubDefault::RemoteEventHandler::RemoteEventHandler(PASServiceStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace adas
} // namespace harman
} // namespace com
} // namespace v0

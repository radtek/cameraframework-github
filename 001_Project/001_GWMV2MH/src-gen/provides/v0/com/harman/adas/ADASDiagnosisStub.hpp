/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.201702211714.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.3.0
* generated on: Tue Aug 01 13:37:50 CST 2017
*/
#ifndef V0_COM_HARMAN_ADAS_ADAS_Diagnosis_STUB_HPP_
#define V0_COM_HARMAN_ADAS_ADAS_Diagnosis_STUB_HPP_

#include <functional>



#include <v1/com/harman/adas/ADASDiagType.hpp>

#include <v0/com/harman/adas/ADASDiagnosis.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace adas {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service ADASDiagnosis. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class ADASDiagnosisStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual ADASDiagnosis {
 public:



    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for ADASDiagnosis.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ADASDiagnosisStubRemoteEvent
{
public:
    virtual ~ADASDiagnosisStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service ADASDiagnosis to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ADASDiagnosisStub
    : public virtual CommonAPI::Stub<ADASDiagnosisStubAdapter, ADASDiagnosisStubRemoteEvent>
{
public:
    typedef std::function<void (::v1::com::harman::adas::ADASDiagType::enDiagTestState _m_DiagTest)>triggerCameraTestingReply_t;
    typedef std::function<void (uint8_t _m_eAVMGuideLinewMode)>getNumOfCamerasReply_t;

    virtual ~ADASDiagnosisStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    /// This is the method that will be called on remote calls on the method triggerCameraTesting.
    virtual void triggerCameraTesting(const std::shared_ptr<CommonAPI::ClientId> _client, triggerCameraTestingReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method getNumOfCameras.
    virtual void getNumOfCameras(const std::shared_ptr<CommonAPI::ClientId> _client, getNumOfCamerasReply_t _reply) = 0;

    using CommonAPI::Stub<ADASDiagnosisStubAdapter, ADASDiagnosisStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<ADASDiagnosisStubAdapter, ADASDiagnosisStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<ADASDiagnosisStubAdapter, ADASDiagnosisStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef ADASDiagnosisStubRemoteEvent RemoteEventType;
    typedef ADASDiagnosis StubInterface;
};

} // namespace adas
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_ADAS_ADAS_Diagnosis_STUB_HPP_

/**
 * generated by DCIF CodeGen Version: R2_v2.3.0
 * generated on: Thu Oct 12 15:16:25 CST 2017
 */

#ifndef V0_COM_HARMAN_ADAS_AVMSERVICESTUBIMPL_HPP
#define V0_COM_HARMAN_ADAS_AVMSERVICESTUBIMPL_HPP

#include <CommonAPI/CommonAPI.hpp>
#include "v0/com/harman/adas/AVMServiceStubDefault.hpp"

namespace v0 {
namespace com {
namespace harman {
namespace adas {

class AVMServiceStubImpl : public v0::com::harman::adas::AVMServiceStubDefault
{

public:
	AVMServiceStubImpl();
    virtual ~AVMServiceStubImpl();

	virtual void SwitchAVMView(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::harman::adas::AVMBaseType::enAVMViewMode m_eAVMViewMode, SwitchAVMViewReply_t);
	virtual void SwitchGuideline(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::harman::adas::AVMBaseType::enAVMGuideLineMode m_eAVMGuideLinewMode, SwitchGuidelineReply_t);
	virtual void SwitchCTA(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::harman::adas::CTABaseType::enCTAWorkMode m_eCATMode, SwitchCTAReply_t);
	virtual void SwitchAutoCalibrationAuto(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::harman::adas::AVMBaseType::enAutoCaliWorkModeAuto m_eAutoCaliMode, SwitchAutoCalibrationAutoReply_t);
	virtual void SwitchAutoCalibrationManually(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::harman::adas::AVMBaseType::enAutoCaliWorkModeManu m_eAutoCaliMode, SwitchAutoCalibrationManuallyReply_t);
};

} // namespace adas
} // namespace harman
} // namespace com
} // namespace v0

#endif //V0_COM_HARMAN_ADAS_AVMSERVICESTUBIMPL_HPP

/**
 * generated by Voice CodeGen Version: R1_v1.3.0
 * generated on: Fri Nov 25 12:19:25 IST 2016
 */
#if 1
using namespace std;
#include "PDCServiceStubImpl.hpp"
#include "ParkAssistSrv_Common/CPresCoreHandler.hpp"

namespace v0 {
namespace com {
namespace harman {
namespace ParkAssist {

PDCServiceStubImpl::PDCServiceStubImpl(CContext *p_pobjContext):m_pobjContext(p_pobjContext)
{
    LOG_INFO(LOG_COMMON,"PDCServiceStubImpl constructor");
	if(m_pobjContext->m_bIsPDCSupported)
	{
		 LOG_INFO(LOG_COMMON,"PDC is not configured ");
		setPDCStatusAttribute(v1::com::harman::ParkAssist::PDCBaseType::enPDCStatus::e_PDC_OFF);
	}
	else
	{
		LOG_INFO(LOG_COMMON,"PDC is configured ");
		setPDCStatusAttribute(v1::com::harman::ParkAssist::PDCBaseType::enPDCStatus::e_PDC_NOT_CONFIGURED);
	}
}

PDCServiceStubImpl::~PDCServiceStubImpl()
{

}

void PDCServiceStubImpl::CancelPDCReq(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::harman::ParkAssist::PDCBaseType::enCancelPDCIcon m_eCancelPDC, CancelPDCReqReply_t reply)
{
    LOG_INFO(LOG_PDC, "Cancel PDC Req Received...");
    EParkAssistReqId l_eReqId = e_ParkAssist_VPA_CANCEL_PDC_REQUEST;
    CPresCoreHandler::getInstance()->addRequestToPresCore(l_eReqId);
}


void PDCServiceStubImpl::PDCStatusChangeNotify(bool p_ePDCStatus)
{
    v1::com::harman::ParkAssist::PDCBaseType::enPDCStatus l_ePDCStatus = v1::com::harman::ParkAssist::PDCBaseType::enPDCStatus::e_PDC_OFF;
    if(true == p_ePDCStatus)
    {
        l_ePDCStatus = v1::com::harman::ParkAssist::PDCBaseType::enPDCStatus::e_PDC_ON;
    }
    LOG_INFO(LOG_PDC, "PDCStatusChangeNotify Message is :: >> %d", l_ePDCStatus);
    setPDCStatusAttribute(l_ePDCStatus);
        
}

} // namespace ParkAssist
} // namespace harman
} // namespace com
}
#endif 

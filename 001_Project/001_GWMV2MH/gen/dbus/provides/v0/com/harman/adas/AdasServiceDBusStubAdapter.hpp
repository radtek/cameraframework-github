/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.201702211714.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.3.0
* generated on: Tue Aug 01 13:37:50 CST 2017
*/
#ifndef V0_COM_HARMAN_ADAS_Adas_Service_DBUS_STUB_ADAPTER_HPP_
#define V0_COM_HARMAN_ADAS_Adas_Service_DBUS_STUB_ADAPTER_HPP_

#include <v0/com/harman/adas/AdasServiceStub.hpp>
#include "v0/com/harman/adas/AdasServiceDBusDeployment.hpp"        
#include <v1/com/harman/adas/AdasTypeDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace adas {

typedef CommonAPI::DBus::DBusStubAdapterHelper<AdasServiceStub> AdasServiceDBusStubAdapterHelper;

class AdasServiceDBusStubAdapterInternal
    : public virtual AdasServiceStubAdapter,
      public AdasServiceDBusStubAdapterHelper
{
public:
    AdasServiceDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~AdasServiceDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return AdasService::getInterface();
    }

    void fireCurrentStateAttributeChanged(const ::v1::com::harman::adas::AdasType::aModuleState& value);

    void fireAAdasModuleStateEvent(const ::v1::com::harman::adas::AdasType::aModuleState& modulesState);


    const AdasServiceDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::adas::AdasServiceStub,
        CommonAPI::Version
        > getAdasServiceInterfaceVersionStubDispatcher;

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::adas::AdasServiceStub,
        ::v1::com::harman::adas::AdasType::aModuleState,
        ::v1::com::harman::adas::AdasType_::aModuleStateDeployment_t                
        > getCurrentStateAttributeStubDispatcher;



static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::adas::AdasServiceStub,
    std::tuple<std::string>,
    std::tuple<::v1::com::harman::adas::AdasType::eModuleStates>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > getModuleStateStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    AdasServiceDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class AdasServiceDBusStubAdapter
    : public AdasServiceDBusStubAdapterInternal,
      public std::enable_shared_from_this<AdasServiceDBusStubAdapter> {
public:
    AdasServiceDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          AdasServiceDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace adas
} // namespace harman
} // namespace com
} // namespace v0

#endif // V0_COM_HARMAN_ADAS_Adas_Service_DBUS_STUB_ADAPTER_HPP_

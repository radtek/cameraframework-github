//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : ScreenShot.cpp
//  @ Date : 2017/3/8 ÐÇÆÚÈý
//  @ Author : 
//
//

#include "ScreenShot.h"

#include <ctype.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

ScreenShot::ScreenShot()
{
	screen_ctx= NULL;
	screen_disp= NULL;
	screen_displays= NULL;
	screen_pix= NULL;
	screen_buf= NULL;
	m_pointer = NULL;
	m_stride =0;
	m_iWidth=0;
	m_iHeight=0;
}
ScreenShot::~ScreenShot()
{
	screen_destroy_pixmap(screen_pix);
	screen_destroy_context(screen_ctx);
}
int ScreenShot::iInit()
{
	int size[2] = { 0, 0 };
	int rc=0,val=0;
	int count = 0;

   rc = screen_create_context(&screen_ctx, SCREEN_DISPLAY_MANAGER_CONTEXT);
   if (rc) {
		perror("screen_context_create");
		return 1;
	}


	rc = screen_get_context_property_iv(screen_ctx, SCREEN_PROPERTY_DISPLAY_COUNT, &count);
	if (rc) {
		perror("screen_get_context_property_iv(SCREEN_PROPERTY_DISPLAY_COUNT)");
		return 1;
	}

	if (count > 0) {
		screen_displays = (screen_display_t*)calloc(count, sizeof(screen_display_t));
		rc = screen_get_context_property_pv(screen_ctx, SCREEN_PROPERTY_DISPLAYS, (void **)screen_displays);
		if (rc) {
			perror("screen_get_context_property_pv(SCREEN_PROPERTY_DISPLAYS)");
			return 1;
		}
		screen_disp = screen_displays[0];
		free(screen_displays);
	}

	if (!screen_disp) {
		fputs("no displays\n", stderr);
		return 1;
	}

	rc = screen_create_pixmap(&screen_pix, screen_ctx);
	if (rc) {
		perror("screen_create_pixmap");
		return 1;
	}

	val = SCREEN_USAGE_READ | SCREEN_USAGE_NATIVE;
	rc = screen_set_pixmap_property_iv(screen_pix, SCREEN_PROPERTY_USAGE, &val);
	if (rc) {
		perror("screen_set_pixmap_property_iv(SCREEN_PROPERTY_USAGE)");
		return 1;
	}

	val = SCREEN_FORMAT_RGBA8888;
	rc = screen_set_pixmap_property_iv(screen_pix, SCREEN_PROPERTY_FORMAT, &val);
	if (rc) {
		perror("screen_set_pixmap_property_iv(SCREEN_PROPERTY_FORMAT)");
		return 1;
	}

	if (size[0] <= 0 || size[1] <= 0) {
		rc = screen_get_display_property_iv(screen_disp, SCREEN_PROPERTY_SIZE, size);
		if (rc) {
			perror("screen_get_display_property_iv(SCREEN_PROPERTY_SIZE)");
			return 1;
		}
	}

	rc = screen_set_pixmap_property_iv(screen_pix, SCREEN_PROPERTY_BUFFER_SIZE, size);
	if (rc) {
		perror("screen_set_pixmap_property_iv(SCREEN_PROPERTY_BUFFER_SIZE)");
		return 1;
	}

	rc = screen_create_pixmap_buffer(screen_pix);
	if (rc) {
		perror("screen_create_pixmap_buffer");
		return 1;
	}

	rc = screen_get_pixmap_property_pv(screen_pix, SCREEN_PROPERTY_RENDER_BUFFERS, (void **)&screen_buf);
	if (rc) {
		perror("screen_get_pixmap_property_pv(SCREEN_PROPERTY_RENDER_BUFFERS)");
		return 1;
	}

	rc = screen_get_buffer_property_pv(screen_buf, SCREEN_PROPERTY_POINTER, (void**)&m_pointer);
	if (rc) {
		perror("screen_get_buffer_property_pv(SCREEN_PROPERTY_POINTER)");
		return 1;
	}

	rc = screen_get_buffer_property_iv(screen_buf, SCREEN_PROPERTY_STRIDE, &m_stride);
	if (rc) {
		perror("screen_get_buffer_property_pv(SCREEN_PROPERTY_STRIDE)");
		return 1;
	}
	m_iWidth =size[0];
	m_iHeight =size[1];
	printf("screen shot get screen size %d*%d %d \n",m_iWidth,m_iHeight,m_stride);
	return 0;
}

int ScreenShot::iDumptoBuffer(char* pbuf)
{
	int rc = screen_read_display(screen_disp, screen_buf, 0, NULL, 0);
	if (rc) {
		perror("screen_read_display");
		return 1;
	}

	for (int i = 0; i < m_iHeight; i++)
	{
		memcpy(&pbuf[i*m_iWidth*4], m_pointer + i * m_stride, m_iWidth * 4);
	}
	return 0;
}

int ScreenShot::iDumptoBMP(const char* pDumpToFile, const char* pDumpFromBuf)
{
	int nbytes;
	int fd;
	//char fname[] = "RVSScreenShot.bmp";
	//char *tok;
	char header[54];
	/*
	 int rc=0;
	 rc = screen_read_display(screen_disp, screen_buf, 0, NULL, 0);
	if (rc) {
		perror("screen_read_display");
		return 1;
	}
	rc = screen_get_buffer_property_pv(screen_buf, SCREEN_PROPERTY_POINTER, (void**)&m_pointer);
	if (rc) {
		perror("screen_get_buffer_property_pv(SCREEN_PROPERTY_POINTER)");
		return 1;
	}*/
	fd = open(pDumpToFile, O_CREAT | O_WRONLY);
	if (fd == -1) {
		perror("open");
		return 1;
	}

	nbytes = m_iWidth * m_iHeight * 4;
	header[0] = 'B';
	header[1] = 'M';
	header[2] = nbytes & 0xff;
	header[3] = (nbytes >> 8) & 0xff;
	header[4] = (nbytes >> 16) & 0xff;
	header[5] = (nbytes >> 24) & 0xff;
	header[6] = 0;
	header[7] = 0;
	header[8] = 0;
	header[9] = 0;
	header[10] = 54;
	header[11] = 0;
	header[12] = 0;
	header[13] = 0;
	header[14] = 40;
	header[15] = 0;
	header[16] = 0;
	header[17] = 0;
	header[18] = m_iWidth & 0xff;
	header[19] = (m_iWidth >> 8) & 0xff;
	header[20] = (m_iWidth >> 16) & 0xff;
	header[21] = (m_iWidth >> 24) & 0xff;
	header[22] = -m_iHeight & 0xff;
	header[23] = (-m_iHeight >> 8) & 0xff;
	header[24] = (-m_iHeight >> 16) & 0xff;
	header[25] = (-m_iHeight >> 24) & 0xff;
	header[26] = 1;
	header[27] = 0;
	header[28] = 32;
	header[29] = 0;
	header[30] = 0;
	header[31] = 0;
	header[32] = 0;
	header[33] = 0;
	header[34] = 0; /* image size */
	header[35] = 0;
	header[36] = 0;
	header[37] = 0;
	header[38] = 0x9;
	header[39] = 0x88;
	header[40] = 0;
	header[41] = 0;
	header[42] = 0x9l;
	header[43] = 0x88;
	header[44] = 0;
	header[45] = 0;
	header[46] = 0;
	header[47] = 0;
	header[48] = 0;
	header[49] = 0;
	header[50] = 0;
	header[51] = 0;
	header[52] = 0;
	header[53] = 0;
	write(fd, header, sizeof(header));
	write(fd, pDumpFromBuf,  m_iHeight*m_iWidth * 4);
	//for (int i = 0; i < m_iHeight; i++) {
	//	write(fd, m_pointer + i * m_stride, m_iWidth * 4);
	//}

	close(fd);

	return 0;
}




//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : ExcpectionManager.h
//  @ Date : 2017/3/8 ÐÇÆÚÈý
//  @ Author : 
//
//


#if !defined(_EXCPECTIONMANAGER_H)
#define _EXCPECTIONMANAGER_H
#include "unistd.h"
#include <pthread.h>
#include "ScreenShot.h"
#include "RVSCRC.h"
#include "RVSDefine.h"
class ExcpectionManager {
public:
	enum eExcpectionCode  {
		eNO_EXCEPETION =0,
		eDISPLAY_FREEZE,
		eCAMBUFF_SWAP_BLK,
		eFAIL_SAFE_CODE_NUM
	};
	static ExcpectionManager* getInstance();
	static void delInstance();
	~ExcpectionManager();
	void bCameraFreeze();
	void start();
	void* run(void*);
	void quit(){ m_bQuit = true; };
	void vSetCameraState(bool bCamState);
	void vSetCamThreadCnt(int iCnt) {m_iCamThreadCnt = iCnt;};
	void vSetCameraSyncState(bool bCamSyncState) {m_bCamSyncState = bCamSyncState;};
private:
	ExcpectionManager();
	bool m_bQuit;
	bool m_bCamState;
	bool m_bCamSyncState;
	int m_iCamThreadCnt;
	pthread_t  m_hThread;
	ScreenShot m_ScreenShot;
	char* m_pScreenBuf;
	static ExcpectionManager * m_pInstance;
	void vCreateFileTagFreeze();
	uint32_t m_LastCRC;
};

#endif  //_EXCPECTIONMANAGER_H




声明：
此开发指南涉及到很多脚本和快捷命令，这些只是辅助开发，不用这些东西一样可以是正常开发工作，内容有笔误的，请发现后随时更改，更新此文档


------------代码树介绍----------------------
目前开发涉及到五棵树：（建议五棵代码树下载到同一个父目录下，使用仓库的默认名字（除了fork的仓库有自定义名字之外），以便运用后面提供的很多方便的脚本）
1. 组内的framework代码仓库（维护组内4个so） ssh://git@stash1.harman.com:7999/gwm_camsdk/cameraframework.git   （别名：框架代码树）
   这棵树直接在master分支上开发，rebase， push 等操作，无需创建分支，fork仓库，也无需提交pull request 申请。
2. 组内的framework代码仓库中的4个so和对应的头文件发布仓库 ssh://git@stash1.harman.com:7999/gwm_camsdk/camfw_gwmv2.git   （别名：框架发布树）
   这棵树直接在master分支上开发，rebase， push 等操作，无需创建分支，fork仓库，也无需提交pull request 申请。
3. 项目的代码仓库（头文件，so，长城项目文件） ssh://git@stash1.harman.com:7999/gwm_v2mh/cpm_adas_adservice.git   （别名：项目代码树）
   这棵树的工作环境是自己在网页上创建的自己的分支，clone树之后要先切换到自己的分支上再工作，提交代码需要创建pull request
4. 项目的BB文件仓库（维护长城TCFG环境的BB文件）  ssh://git@stash1.harman.com:7999/gwm_v2mh/cpm-gwm-v2mh.git  （别名：BB树）
   这棵树的工作环境是自己在网页上创建的自己的fork树（fork的时候名字可以加上一个体现自己这次提交的后缀），clone树之后直接工作，提交代码需要创建pull request
5. 项目的fidl/cdl文件仓库（维护组内相关fidl/cdl接口文件）  ssh://git@stash1.harman.com:7999/gwm_v2mh/contracts-gwm.git （别名：fidl/cdl树）
   这棵树除了改动接口是需要clone下来工作提交代码，还有个用处就是colne下来是为了在本地编译长城project的代码。
   这棵树的工作环境是自己在网页上创建的自己的fork树（fork的时候名字可以加上一个体现自己这次提交的后缀），clone树之后直接工作，提交代码需要创建pull request


------------搭建开发环境----------------------
1. 安装 sdk2
下载： elina-oakland-glibc-x86_64-x86_64-toolchain-2.0.2015143A_9940_B1-sdk2.sh
加可执行权限： chmod +x elina-oakland-glibc-x86_64-x86_64-toolchain-2.0.2015143A_9940_B1-sdk2.sh
运行脚本： ./elina-oakland-glibc-x86_64-x86_64-toolchain-2.0.2015143A_9940_B1-sdk2.sh （默认安装路径即可 /opt/elina/......）
如何使用elina工具链： 进入安装好的目录 source environment-setup-corei7-64-elina-linux   （source 动作隶属此终端，另外打开终端需要重做此步骤）
(参考： https://confluence.harman.com/confluence/display/GWMV2MH/Development+Environment+Setup+for+GWM+V2MH)
2. 安装 elina code generate 工具 （如果不是安装在opt目录下，那么不需要chmod的动作，安装在opt目录下是为了产生个机器无关的路径，这样后面写脚本可以使用固定路径）
sudo git clone ssh://git@stash1.harman.com:7999/int_devtools/elinaidelitelinux.git /opt/elinaidelitelinux
cd /opt/elinaidelitelinux
unzip ElinaLiteIDE-linux.gtk.x86_64.zip -d .
cd /opt
sudo chmod 777 elinaidelitelinux -R
(参考： https://confluence.harman.com/confluence/pages/viewpage.action?spaceKey=GWMV2MH&title=CPM+code+generation+process+in+Yocto)
3. 要在本地编译长城project的代码，需要下载fidl/cdl树： ssh://git@stash1.harman.com:7999/gwm_v2mh/contracts-gwm.git



---------------------以上内容是每个人需要了解的，此行以下的内容是使用技巧，可选择参考-----------------------------



------------框架代码树------根目录快捷指令 adas----------------
下载框架代码树： git clone ssh://git@stash1.harman.com:7999/gwm_camsdk/cameraframework.git

一 目录结构
000_Framework ： 框架 代码，其中包含 foundation abase client graphic 的源码，编译出4个so文件（libAFoundation.so libABase.so libAGraphic.so libACaseSocket.so）
001_Project   ： 测试代码

二 编译
1. 进入项目树的根目录，执行source setEnv.sh （注意，一定要在项目树的根目录执行此命令，其他目录执行会使脚本的变量赋值出现错误, source 动作隶属此终端，另外打开终端需要重做此步骤）
   执行后的结果是： 1. 引入sdk2的工具链（也就是做了source environment-setup-corei7-64-elina-linux，无需再手动去做这件事）;
                   2. 加入命令：foundation foundationlib abase abaslib caseclient caseclientlib graphic graphiclib
                  pushfoundation pushabase pushcaseclient pushgraphic pushadasdbus pushadas c adas cmakeconfig project ftest publish
                  makefoundation makeabase makecaseclient makegraphic makelib makecamera makeproject makeall
                  pushlib pushproject pushcamera pushall
  （c命令实现真正的清屏指令，不简单等同与clear命令;
    adas命令是在任何目录回到框架代码树的根目录，  【cameraframework】
    project 命令是在任何目录回到 项目代码树的build目录， 【cpm_adas_adservice/build】
    ftest 命令是在任何目录回到 测试代码， 【cameraframework/001_Project/001_GWMV2MH】
    publish 命令是在任何目录回到 框架发布树  【camfw_gwmv2】
    其他命令啥意思，一看setEnv.sh脚本的内容就知道）
2. 终端执行 foundation 命令 ，会直接进入foundation的源码目录，执行make，会编译代码，生成 libAFoundation.so(如有提示请输入用户密码)
                                                            执行make clean，会删除生成的中间文件和动态库文件
                                                            执行 foundationlib，会直接跳转到 libAFoundation.so 所在的目录
   makefoundation = foundation + make

3. 终端执行 abase 命令 ，会直接进入abase的源码目录，执行make，会编译代码，生成 libABase.so(如有提示请输入用户密码)
                                                            执行make clean，会删除生成的中间文件和动态库文件
                                                            执行 abaselib，会直接跳转到 libABase.so 所在的目录
    makeabase = abase + make

4. 终端执行 caseclient 命令 ，会直接进入 caseclient 的源码目录，执行make，会编译代码，生成 libACaseSocket.so(如有提示请输入用户密码)
                                                            执行make clean，会删除生成的中间文件和动态库文件
                                                            执行 caseclientlib，会直接跳转到 libACaseSocket.so 所在的目录
    makecaseclient = caseclient + make

5. 终端执行 graphic 命令 ，会直接进入graphic的源码目录，执行make，会编译代码，生成 libAGraphic.so(如有提示请输入用户密码)
                                                            执行make clean，会删除生成的中间文件和动态库文件
                                                            执行 graphiclib，会直接跳转到 libAGraphic.so 所在的目录
    makegraphic = graphic + make

6. 编译测试代码
   执行命令 ftest
   进入具体的某个test，执行make命令即可  (编译camera快捷命令 makecamera)


快捷编译指令：
   makelib = makefoundation + makeabase + makecaseclient + makegraphic
   makeproject = 编译长城项目代码
   makecamera = 编译camera的测试代码
   makeall = 一键编译所有东西 = makelib + makeproject + makecamera


7. 把编译出来的so 上传到板子上，使用命令 pushfoundation pushabase pushcaseclient pushgraphic pushadasdbus pushadas pushcamera
   pushlib = pushfoundation pushabase pushcaseclient pushgraphic
   pushproject = pushadasdbus pushadas
   pushall = pushlib + pushproject + pushcamera
   前提，请选确保setEnv.sh中的板子的remoteIP地址是正确的，板子的ip隔一段时间会变一次，变了就得手动改这个remoteIP地址。 目前的值：remoteIP="10.80.105.55"


------------框架发布树------根目录快捷指令 publish----------------
下载框架代码树： git clone ssh://git@stash1.harman.com:7999/gwm_camsdk/camfw_gwmv2.git
此树只是 框架代码树 000_Framework 目录下 编译出来的四个so 以及 这四个so 对应的头文件
快捷操作脚本： 在 框架代码树 根目录下执行 deploy_2_publish.sh 脚本，会自动把 框架代码树 中四个最新的so以及对应的头文件覆盖掉 框架发布树 老的文件



------------项目代码树------快捷指令 project----------------
下载项目代码树： ssh://git@stash1.harman.com:7999/gwm_v2mh/cpm_adas_adservice.git

1. 切换到自己的分之上开发代码

2. 编译项目代码
   终端执行 project 命令 ，会直接进入项目代码树 的 build目录(cpm_adas_adservice/build  【build已经加入 .gitignore 不会被提交】)

   cmake -DELINA_LITE_DCIF_GENERATOR=/opt/elinaidelitelinux/elina -DCDEPL_PATH=/home/snow/Workspace/contracts-gwm/contracts-gwm-v2mh/packages/adas/ADAS.cdl -DCMAKE_SYSROOT=/opt/elina/2.0.2015143A/sysroots/corei7-64-elina-linux  ../         (简洁指令cmakeconfig， 前提是上面的路径参数都是对的，有自己的目录那么只能用长的命令 cmake ......)
   make target (功能：先生成gen和src-gen目录（已经加入 .gitignore 不会被提交）），然后编译，结果是生成了两个文件：libadas-dbus.so 和 adas；
                      这里不能直接用make，make只是编译，并没有做生成代码的工作； make target = make generate + make)
   要clean ，只需要 在build目录下执行 rm -rf * 即可，再用前面的cmake ...（简洁指令cmakeconfig） , make target步骤重编就可以了
   如果接口没有变动，make target 只需要执行一次，以后clean动作不需要rm -rf *，再重新 make target。直接make clean 然后 make 就可有了。

   一键编译长城代码 makeproject



------------BB文件树----------------------
下载BB文件的代码树： ssh://git@stash1.harman.com:7999/gwm_v2mh/cpm-gwm-v2mh.git 由于这棵树是fork出来的，名字是自己起的，
例如 此次提交是修改了GPIO的代码，那么可以加上后缀，名字起成： cpm-gwm-v2mh-modifyGpio
所以真正的下载命令可能变成：ssh://git@stash1.harman.com:7999/gwm_v2mh/cpm-gwm-v2mh-modifyGpio.git


